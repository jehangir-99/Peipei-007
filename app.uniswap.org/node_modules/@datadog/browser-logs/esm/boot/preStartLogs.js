import{BoundedBuffer,assign,canUseEventBridge,display,displayAlreadyInitializedError,noop,timeStampNow}from"@datadog/browser-core";import{validateAndBuildLogsConfiguration}from"../domain/configuration";export function createPreStartStrategy(getCommonContext,trackingConsentState,doStartLogs){var cachedInitConfiguration,cachedConfiguration,bufferApiCalls=new BoundedBuffer,trackingConsentStateSubscription=trackingConsentState.observable.subscribe(tryStartLogs);function tryStartLogs(){if(cachedConfiguration&&cachedInitConfiguration&&trackingConsentState.isGranted()){trackingConsentStateSubscription.unsubscribe();var startLogsResult=doStartLogs(cachedInitConfiguration,cachedConfiguration);bufferApiCalls.drain(startLogsResult)}}return{init:function(initConfiguration){if(initConfiguration)if(canUseEventBridge()&&(initConfiguration=overrideInitConfigurationForBridge(initConfiguration)),cachedInitConfiguration=initConfiguration,cachedConfiguration)displayAlreadyInitializedError("DD_LOGS",initConfiguration);else{var configuration=validateAndBuildLogsConfiguration(initConfiguration);configuration&&(cachedConfiguration=configuration,trackingConsentState.tryToInit(configuration.trackingConsent),tryStartLogs())}else display.error("Missing configuration")},get initConfiguration(){return cachedInitConfiguration},getInternalContext:noop,handleLog:function(message,statusType,context,date){void 0===context&&(context=getCommonContext()),void 0===date&&(date=timeStampNow()),bufferApiCalls.add((function(startLogsResult){return startLogsResult.handleLog(message,statusType,context,date)}))}}}function overrideInitConfigurationForBridge(initConfiguration){return assign({},initConfiguration,{clientToken:"empty"})}