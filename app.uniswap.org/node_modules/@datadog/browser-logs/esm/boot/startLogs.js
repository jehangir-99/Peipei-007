import{sendToExtension,createPageExitObservable,willSyntheticsInjectRum,canUseEventBridge}from"@datadog/browser-core";import{startLogsSessionManager,startLogsSessionManagerStub}from"../domain/logsSessionManager";import{startLogsAssembly}from"../domain/assembly";import{startConsoleCollection}from"../domain/console/consoleCollection";import{startReportCollection}from"../domain/report/reportCollection";import{startNetworkErrorCollection}from"../domain/networkError/networkErrorCollection";import{startRuntimeErrorCollection}from"../domain/runtimeError/runtimeErrorCollection";import{LifeCycle}from"../domain/lifeCycle";import{startLoggerCollection}from"../domain/logger/loggerCollection";import{startLogsBatch}from"../transport/startLogsBatch";import{startLogsBridge}from"../transport/startLogsBridge";import{startInternalContext}from"../domain/contexts/internalContext";import{startReportError}from"../domain/reportError";import{startLogsTelemetry}from"../domain/logsTelemetry";export function startLogs(initConfiguration,configuration,getCommonContext,trackingConsentState){var lifeCycle=new LifeCycle,cleanupTasks=[];lifeCycle.subscribe(1,(function(log){return sendToExtension("logs",log)}));var reportError=startReportError(lifeCycle),pageExitObservable=createPageExitObservable(configuration),session=!configuration.sessionStoreStrategyType||canUseEventBridge()||willSyntheticsInjectRum()?startLogsSessionManagerStub(configuration):startLogsSessionManager(configuration,trackingConsentState),stopLogsTelemetry=startLogsTelemetry(initConfiguration,configuration,reportError,pageExitObservable,session).stop;cleanupTasks.push((function(){return stopLogsTelemetry()})),startNetworkErrorCollection(configuration,lifeCycle),startRuntimeErrorCollection(configuration,lifeCycle),startConsoleCollection(configuration,lifeCycle),startReportCollection(configuration,lifeCycle);var handleLog=startLoggerCollection(lifeCycle).handleLog;if(startLogsAssembly(session,configuration,lifeCycle,getCommonContext,reportError),canUseEventBridge())startLogsBridge(lifeCycle);else{var stopLogsBatch_1=startLogsBatch(configuration,lifeCycle,reportError,pageExitObservable,session).stop;cleanupTasks.push((function(){return stopLogsBatch_1()}))}return{handleLog:handleLog,getInternalContext:startInternalContext(session).get,stop:function(){cleanupTasks.forEach((function(task){return task()}))}}}