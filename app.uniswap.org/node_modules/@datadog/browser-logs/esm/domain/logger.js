var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r};import{clocksNow,computeRawError,computeStackTrace,combine,createContextManager,ErrorSource,monitored,sanitize}from"@datadog/browser-core";export var StatusType={debug:"debug",error:"error",info:"info",warn:"warn"};export var HandlerType={console:"console",http:"http",silent:"silent"};export var STATUSES=Object.keys(StatusType);var Logger=function(){function Logger(handleLogStrategy,customerDataTracker,name,handlerType,level,loggerContext){void 0===handlerType&&(handlerType=HandlerType.http),void 0===level&&(level=StatusType.debug),void 0===loggerContext&&(loggerContext={}),this.handleLogStrategy=handleLogStrategy,this.handlerType=handlerType,this.level=level,this.contextManager=createContextManager(customerDataTracker),this.contextManager.setContext(loggerContext),name&&this.contextManager.setContextProperty("logger",{name:name})}return Logger.prototype.log=function(message,messageContext,status,error){var errorContext;if(void 0===status&&(status=StatusType.info),null!=error){var stackTrace=error instanceof Error?computeStackTrace(error):void 0,rawError=computeRawError({stackTrace:stackTrace,originalError:error,nonErrorPrefix:"Provided",source:ErrorSource.LOGGER,handling:"handled",startClocks:clocksNow()});errorContext={stack:rawError.stack,kind:rawError.type,message:rawError.message,causes:rawError.causes}}var sanitizedMessageContext=sanitize(messageContext),context=errorContext?combine({error:errorContext},sanitizedMessageContext):sanitizedMessageContext;this.handleLogStrategy({message:sanitize(message),context:context,status:status},this)},Logger.prototype.debug=function(message,messageContext,error){this.log(message,messageContext,StatusType.debug,error)},Logger.prototype.info=function(message,messageContext,error){this.log(message,messageContext,StatusType.info,error)},Logger.prototype.warn=function(message,messageContext,error){this.log(message,messageContext,StatusType.warn,error)},Logger.prototype.error=function(message,messageContext,error){this.log(message,messageContext,StatusType.error,error)},Logger.prototype.setContext=function(context){this.contextManager.setContext(context)},Logger.prototype.getContext=function(){return this.contextManager.getContext()},Logger.prototype.setContextProperty=function(key,value){this.contextManager.setContextProperty(key,value)},Logger.prototype.removeContextProperty=function(key){this.contextManager.removeContextProperty(key)},Logger.prototype.clearContext=function(){this.contextManager.clearContext()},Logger.prototype.setHandler=function(handler){this.handlerType=handler},Logger.prototype.getHandler=function(){return this.handlerType},Logger.prototype.setLevel=function(level){this.level=level},Logger.prototype.getLevel=function(){return this.level},__decorate([monitored],Logger.prototype,"log",null),Logger}();export{Logger};