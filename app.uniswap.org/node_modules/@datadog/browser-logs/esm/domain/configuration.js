import{serializeConfiguration,assign,ONE_KIBI_BYTE,validateAndBuildConfiguration,display,removeDuplicates,ConsoleApiName,RawReportType,includes,objectValues}from"@datadog/browser-core";export var DEFAULT_REQUEST_ERROR_RESPONSE_LENGTH_LIMIT=32*ONE_KIBI_BYTE;export function validateAndBuildLogsConfiguration(initConfiguration){!0===initConfiguration.usePciIntake&&initConfiguration.site&&"datadoghq.com"!==initConfiguration.site&&display.warn("PCI compliance for Logs is only available for Datadog organizations in the US1 site. Default intake will be used.");var baseConfiguration=validateAndBuildConfiguration(initConfiguration),forwardConsoleLogs=validateAndBuildForwardOption(initConfiguration.forwardConsoleLogs,objectValues(ConsoleApiName),"Forward Console Logs"),forwardReports=validateAndBuildForwardOption(initConfiguration.forwardReports,objectValues(RawReportType),"Forward Reports");if(baseConfiguration&&forwardConsoleLogs&&forwardReports)return initConfiguration.forwardErrorsToLogs&&!includes(forwardConsoleLogs,ConsoleApiName.error)&&forwardConsoleLogs.push(ConsoleApiName.error),assign({forwardErrorsToLogs:!1!==initConfiguration.forwardErrorsToLogs,forwardConsoleLogs:forwardConsoleLogs,forwardReports:forwardReports,requestErrorResponseLengthLimit:DEFAULT_REQUEST_ERROR_RESPONSE_LENGTH_LIMIT,sendLogsAfterSessionExpiration:!!initConfiguration.sendLogsAfterSessionExpiration},baseConfiguration)}export function validateAndBuildForwardOption(option,allowedValues,label){return void 0===option?[]:"all"===option||Array.isArray(option)&&option.every((function(api){return includes(allowedValues,api)}))?"all"===option?allowedValues:removeDuplicates(option):void display.error("".concat(label,' should be "all" or an array with allowed values "').concat(allowedValues.join('", "'),'"'))}export function serializeLogsConfiguration(configuration){var baseSerializedInitConfiguration=serializeConfiguration(configuration);return assign({forward_errors_to_logs:configuration.forwardErrorsToLogs,forward_console_logs:configuration.forwardConsoleLogs,forward_reports:configuration.forwardReports,use_pci_intake:configuration.usePciIntake,send_logs_after_session_expiration:configuration.sendLogsAfterSessionExpiration},baseSerializedInitConfiguration)}