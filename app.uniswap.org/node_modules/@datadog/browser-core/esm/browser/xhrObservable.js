import{instrumentMethod}from"../tools/instrumentMethod";import{Observable}from"../tools/observable";import{elapsed,clocksNow,timeStampNow}from"../tools/utils/timeUtils";import{normalizeUrl}from"../tools/utils/urlPolyfill";import{shallowClone}from"../tools/utils/objectUtils";import{addEventListener}from"./addEventListener";var xhrObservable,xhrContexts=new WeakMap;export function initXhrObservable(configuration){return xhrObservable||(xhrObservable=createXhrObservable(configuration)),xhrObservable}function createXhrObservable(configuration){return new Observable((function(observable){var stopInstrumentingStart=instrumentMethod(XMLHttpRequest.prototype,"open",openXhr).stop,stopInstrumentingSend=instrumentMethod(XMLHttpRequest.prototype,"send",(function(call){sendXhr(call,configuration,observable)}),{computeHandlingStack:!0}).stop,stopInstrumentingAbort=instrumentMethod(XMLHttpRequest.prototype,"abort",abortXhr).stop;return function(){stopInstrumentingStart(),stopInstrumentingSend(),stopInstrumentingAbort()}}))}function openXhr(_a){var xhr=_a.target,_b=_a.parameters,method=_b[0],url=_b[1];xhrContexts.set(xhr,{state:"open",method:String(method).toUpperCase(),url:normalizeUrl(String(url))})}function sendXhr(_a,configuration,observable){var xhr=_a.target,handlingStack=_a.handlingStack,context=xhrContexts.get(xhr);if(context){var startContext=context;startContext.state="start",startContext.startClocks=clocksNow(),startContext.isAborted=!1,startContext.xhr=xhr,startContext.handlingStack=handlingStack;var hasBeenReported=!1,stopInstrumentingOnReadyStateChange=instrumentMethod(xhr,"onreadystatechange",(function(){xhr.readyState===XMLHttpRequest.DONE&&onEnd()})).stop,onEnd=function(){if(unsubscribeLoadEndListener(),stopInstrumentingOnReadyStateChange(),!hasBeenReported){hasBeenReported=!0;var completeContext=context;completeContext.state="complete",completeContext.duration=elapsed(startContext.startClocks.timeStamp,timeStampNow()),completeContext.status=xhr.status,observable.notify(shallowClone(completeContext))}},unsubscribeLoadEndListener=addEventListener(configuration,xhr,"loadend",onEnd).stop;observable.notify(startContext)}}function abortXhr(_a){var xhr=_a.target,context=xhrContexts.get(xhr);context&&(context.isAborted=!0)}