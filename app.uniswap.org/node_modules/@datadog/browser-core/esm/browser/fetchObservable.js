import{instrumentMethod}from"../tools/instrumentMethod";import{monitor}from"../tools/monitor";import{Observable}from"../tools/observable";import{clocksNow}from"../tools/utils/timeUtils";import{normalizeUrl}from"../tools/utils/urlPolyfill";var fetchObservable;export function initFetchObservable(){return fetchObservable||(fetchObservable=createFetchObservable()),fetchObservable}function createFetchObservable(){return new Observable((function(observable){if(window.fetch)return instrumentMethod(window,"fetch",(function(call){return beforeSend(call,observable)}),{computeHandlingStack:!0}).stop}))}function beforeSend(_a,observable){var parameters=_a.parameters,onPostCall=_a.onPostCall,handlingStack=_a.handlingStack,input=parameters[0],init=parameters[1],methodFromParams=init&&init.method;void 0===methodFromParams&&input instanceof Request&&(methodFromParams=input.method);var method=void 0!==methodFromParams?String(methodFromParams).toUpperCase():"GET",url=input instanceof Request?input.url:normalizeUrl(String(input)),context={state:"start",init:init,input:input,method:method,startClocks:clocksNow(),url:url,handlingStack:handlingStack};observable.notify(context),parameters[0]=context.input,parameters[1]=context.init,onPostCall((function(responsePromise){return afterSend(observable,responsePromise,context)}))}function afterSend(observable,responsePromise,startContext){var reportFetch=function(response){var context=startContext;context.state="resolve","stack"in response||response instanceof Error?(context.status=0,context.isAborted=response instanceof DOMException&&response.code===DOMException.ABORT_ERR,context.error=response):"status"in response&&(context.response=response,context.responseType=response.type,context.status=response.status,context.isAborted=!1),observable.notify(context)};responsePromise.then(monitor(reportFetch),monitor(reportFetch))}