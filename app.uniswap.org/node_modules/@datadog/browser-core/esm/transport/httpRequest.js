import{addTelemetryError}from"../domain/telemetry";import{monitor}from"../tools/monitor";import{addEventListener}from"../browser/addEventListener";import{newRetryState,sendWithRetryStrategy}from"./sendWithRetryStrategy";export function createHttpRequest(configuration,endpointBuilder,bytesLimit,reportError){var retryState=newRetryState(),sendStrategyForRetry=function(payload,onResponse){return fetchKeepAliveStrategy(configuration,endpointBuilder,bytesLimit,payload,onResponse)};return{send:function(payload){sendWithRetryStrategy(payload,retryState,sendStrategyForRetry,endpointBuilder.trackType,reportError)},sendOnExit:function(payload){sendBeaconStrategy(configuration,endpointBuilder,bytesLimit,payload)}}}function sendBeaconStrategy(configuration,endpointBuilder,bytesLimit,payload){if(!!navigator.sendBeacon&&payload.bytesCount<bytesLimit)try{var beaconUrl=endpointBuilder.build("beacon",payload);if(navigator.sendBeacon(beaconUrl,payload.data))return}catch(e){reportBeaconError(e)}sendXHR(configuration,endpointBuilder.build("xhr",payload),payload.data)}var hasReportedBeaconError=!1;function reportBeaconError(e){hasReportedBeaconError||(hasReportedBeaconError=!0,addTelemetryError(e))}export function fetchKeepAliveStrategy(configuration,endpointBuilder,bytesLimit,payload,onResponse){if(isKeepAliveSupported()&&payload.bytesCount<bytesLimit){var fetchUrl=endpointBuilder.build("fetch",payload);fetch(fetchUrl,{method:"POST",body:payload.data,keepalive:!0,mode:"cors"}).then(monitor((function(response){return null==onResponse?void 0:onResponse({status:response.status,type:response.type})})),monitor((function(){var xhrUrl=endpointBuilder.build("xhr",payload);sendXHR(configuration,xhrUrl,payload.data,onResponse)})))}else{var xhrUrl=endpointBuilder.build("xhr",payload);sendXHR(configuration,xhrUrl,payload.data,onResponse)}}function isKeepAliveSupported(){try{return window.Request&&"keepalive"in new Request("http://a")}catch(_a){return!1}}export function sendXHR(configuration,url,data,onResponse){var request=new XMLHttpRequest;request.open("POST",url,!0),data instanceof Blob&&request.setRequestHeader("Content-Type",data.type),addEventListener(configuration,request,"loadend",(function(){null==onResponse||onResponse({status:request.status})}),{once:!0}),request.send(data)}