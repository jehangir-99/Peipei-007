import{DOCS_ORIGIN,display}from"../tools/display";import{objectValues}from"../tools/utils/polyfills";import{isPageExitReason}from"../browser/pageExitObservable";import{jsonStringify}from"../tools/serialisation/jsonStringify";import{computeBytesCount}from"../tools/utils/byteUtils";var Batch=function(){function Batch(encoder,request,flushController,messageBytesLimit){var _this=this;this.encoder=encoder,this.request=request,this.flushController=flushController,this.messageBytesLimit=messageBytesLimit,this.upsertBuffer={},this.flushSubscription=this.flushController.flushObservable.subscribe((function(event){return _this.flush(event)}))}return Batch.prototype.add=function(message){this.addOrUpdate(message)},Batch.prototype.upsert=function(message,key){this.addOrUpdate(message,key)},Batch.prototype.stop=function(){this.flushSubscription.unsubscribe()},Batch.prototype.flush=function(event){var upsertMessages=objectValues(this.upsertBuffer).join("\n");this.upsertBuffer={};var isPageExit=isPageExitReason(event.reason),send=isPageExit?this.request.sendOnExit:this.request.send;if(isPageExit&&this.encoder.isAsync){var encoderResult=this.encoder.finishSync();encoderResult.outputBytesCount&&send(formatPayloadFromEncoder(encoderResult));var pendingMessages=[encoderResult.pendingData,upsertMessages].filter(Boolean).join("\n");pendingMessages&&send({data:pendingMessages,bytesCount:computeBytesCount(pendingMessages)})}else upsertMessages&&this.encoder.write(this.encoder.isEmpty?upsertMessages:"\n".concat(upsertMessages)),this.encoder.finish((function(encoderResult){send(formatPayloadFromEncoder(encoderResult))}))},Batch.prototype.addOrUpdate=function(message,key){var serializedMessage=jsonStringify(message),estimatedMessageBytesCount=this.encoder.estimateEncodedBytesCount(serializedMessage);estimatedMessageBytesCount>=this.messageBytesLimit?display.warn("Discarded a message whose size was bigger than the maximum allowed size ".concat(this.messageBytesLimit,"KB. More details: ").concat(DOCS_ORIGIN,"/real_user_monitoring/browser/troubleshooting/#technical-limitations")):(this.hasMessageFor(key)&&this.remove(key),this.push(serializedMessage,estimatedMessageBytesCount,key))},Batch.prototype.push=function(serializedMessage,estimatedMessageBytesCount,key){var _this=this;this.flushController.notifyBeforeAddMessage(estimatedMessageBytesCount),void 0!==key?(this.upsertBuffer[key]=serializedMessage,this.flushController.notifyAfterAddMessage()):this.encoder.write(this.encoder.isEmpty?serializedMessage:"\n".concat(serializedMessage),(function(realMessageBytesCount){_this.flushController.notifyAfterAddMessage(realMessageBytesCount-estimatedMessageBytesCount)}))},Batch.prototype.remove=function(key){var removedMessage=this.upsertBuffer[key];delete this.upsertBuffer[key];var messageBytesCount=this.encoder.estimateEncodedBytesCount(removedMessage);this.flushController.notifyAfterRemoveMessage(messageBytesCount)},Batch.prototype.hasMessageFor=function(key){return void 0!==key&&void 0!==this.upsertBuffer[key]},Batch}();export{Batch};function formatPayloadFromEncoder(encoderResult){return{data:"string"==typeof encoderResult.output?encoderResult.output:new Blob([encoderResult.output],{type:"text/plain"}),bytesCount:encoderResult.outputBytesCount,encoding:encoderResult.encoding}}