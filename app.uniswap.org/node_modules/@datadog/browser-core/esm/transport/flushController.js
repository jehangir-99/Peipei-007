import{Observable}from"../tools/observable";import{clearTimeout,setTimeout}from"../tools/timer";export function createFlushController(_a){var durationLimitTimeoutId,messagesLimit=_a.messagesLimit,bytesLimit=_a.bytesLimit,durationLimit=_a.durationLimit,pageExitObservable=_a.pageExitObservable,sessionExpireObservable=_a.sessionExpireObservable,pageExitSubscription=pageExitObservable.subscribe((function(event){return flush(event.reason)})),sessionExpireSubscription=sessionExpireObservable.subscribe((function(){return flush("session_expire")})),flushObservable=new Observable((function(){return function(){pageExitSubscription.unsubscribe(),sessionExpireSubscription.unsubscribe()}})),currentBytesCount=0,currentMessagesCount=0;function flush(flushReason){if(0!==currentMessagesCount){var messagesCount=currentMessagesCount,bytesCount=currentBytesCount;currentMessagesCount=0,currentBytesCount=0,cancelDurationLimitTimeout(),flushObservable.notify({reason:flushReason,messagesCount:messagesCount,bytesCount:bytesCount})}}function cancelDurationLimitTimeout(){clearTimeout(durationLimitTimeoutId),durationLimitTimeoutId=void 0}return{flushObservable:flushObservable,get messagesCount(){return currentMessagesCount},notifyBeforeAddMessage:function(estimatedMessageBytesCount){currentBytesCount+estimatedMessageBytesCount>=bytesLimit&&flush("bytes_limit"),currentMessagesCount+=1,currentBytesCount+=estimatedMessageBytesCount,void 0===durationLimitTimeoutId&&(durationLimitTimeoutId=setTimeout((function(){flush("duration_limit")}),durationLimit))},notifyAfterAddMessage:function(messageBytesCountDiff){void 0===messageBytesCountDiff&&(messageBytesCountDiff=0),currentBytesCount+=messageBytesCountDiff,currentMessagesCount>=messagesLimit?flush("messages_limit"):currentBytesCount>=bytesLimit&&flush("bytes_limit")},notifyAfterRemoveMessage:function(messageBytesCount){currentBytesCount-=messageBytesCount,0===(currentMessagesCount-=1)&&cancelDurationLimitTimeout()}}}