import{startsWith}from"../utils/polyfills";var UNKNOWN_FUNCTION="?";export function computeStackTrace(ex){var stack=[],stackProperty=tryToGetString(ex,"stack"),exString=String(ex);return stackProperty&&startsWith(stackProperty,exString)&&(stackProperty=stackProperty.slice(exString.length)),stackProperty&&stackProperty.split("\n").forEach((function(line){var stackFrame=parseChromeLine(line)||parseChromeAnonymousLine(line)||parseWinLine(line)||parseGeckoLine(line);stackFrame&&(!stackFrame.func&&stackFrame.line&&(stackFrame.func=UNKNOWN_FUNCTION),stack.push(stackFrame))})),{message:tryToGetString(ex,"message"),name:tryToGetString(ex,"name"),stack:stack}}var fileUrl="((?:file|https?|blob|chrome-extension|native|eval|webpack|snippet|<anonymous>|\\w+\\.|\\/).*?)",filePosition="(?::(\\d+))",CHROME_LINE_RE=new RegExp("^\\s*at (.*?) ?\\(".concat(fileUrl).concat(filePosition,"?").concat(filePosition,"?\\)?\\s*$"),"i"),CHROME_EVAL_RE=new RegExp("\\((\\S*)".concat(filePosition).concat(filePosition,"\\)"));function parseChromeLine(line){var parts=CHROME_LINE_RE.exec(line);if(parts){var isNative=parts[2]&&0===parts[2].indexOf("native"),isEval=parts[2]&&0===parts[2].indexOf("eval"),submatch=CHROME_EVAL_RE.exec(parts[2]);return isEval&&submatch&&(parts[2]=submatch[1],parts[3]=submatch[2],parts[4]=submatch[3]),{args:isNative?[parts[2]]:[],column:parts[4]?+parts[4]:void 0,func:parts[1]||UNKNOWN_FUNCTION,line:parts[3]?+parts[3]:void 0,url:isNative?void 0:parts[2]}}}var CHROME_ANONYMOUS_FUNCTION_RE=new RegExp("^\\s*at ?".concat(fileUrl).concat(filePosition,"?").concat(filePosition,"??\\s*$"),"i");function parseChromeAnonymousLine(line){var parts=CHROME_ANONYMOUS_FUNCTION_RE.exec(line);if(parts)return{args:[],column:parts[3]?+parts[3]:void 0,func:UNKNOWN_FUNCTION,line:parts[2]?+parts[2]:void 0,url:parts[1]}}var WINJS_LINE_RE=/^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;function parseWinLine(line){var parts=WINJS_LINE_RE.exec(line);if(parts)return{args:[],column:parts[4]?+parts[4]:void 0,func:parts[1]||UNKNOWN_FUNCTION,line:+parts[3],url:parts[2]}}var GECKO_LINE_RE=/^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|capacitor|\[native).*?|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i,GECKO_EVAL_RE=/(\S+) line (\d+)(?: > eval line \d+)* > eval/i;function parseGeckoLine(line){var parts=GECKO_LINE_RE.exec(line);if(parts){var isEval=parts[3]&&parts[3].indexOf(" > eval")>-1,submatch=GECKO_EVAL_RE.exec(parts[3]);return isEval&&submatch&&(parts[3]=submatch[1],parts[4]=submatch[2],parts[5]=void 0),{args:parts[2]?parts[2].split(","):[],column:parts[5]?+parts[5]:void 0,func:parts[1]||UNKNOWN_FUNCTION,line:parts[4]?+parts[4]:void 0,url:parts[3]}}}function tryToGetString(candidate,property){if("object"==typeof candidate&&candidate&&property in candidate){var value=candidate[property];return"string"==typeof value?value:void 0}}export function computeStackTraceFromOnErrorMessage(messageObj,url,line,column){var stack=[{url:url,column:column,line:line}],_a=tryToParseMessage(messageObj);return{name:_a.name,message:_a.message,stack:stack}}var ERROR_TYPES_RE=/^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?([\s\S]*)$/;function tryToParseMessage(messageObj){var _a,name,message;return"[object String]"==={}.toString.call(messageObj)&&(name=(_a=ERROR_TYPES_RE.exec(messageObj))[1],message=_a[2]),{name:name,message:message}}