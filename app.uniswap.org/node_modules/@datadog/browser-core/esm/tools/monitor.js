var onMonitorErrorCollected,__spreadArray=this&&this.__spreadArray||function(to,from,pack){if(pack||2===arguments.length)for(var ar,i=0,l=from.length;i<l;i++)!ar&&i in from||(ar||(ar=Array.prototype.slice.call(from,0,i)),ar[i]=from[i]);return to.concat(ar||Array.prototype.slice.call(from))};import{display}from"./display";var debugMode=!1;export function startMonitorErrorCollection(newOnMonitorErrorCollected){onMonitorErrorCollected=newOnMonitorErrorCollected}export function setDebugMode(newDebugMode){debugMode=newDebugMode}export function resetMonitor(){onMonitorErrorCollected=void 0,debugMode=!1}export function monitored(_,__,descriptor){var originalMethod=descriptor.value;descriptor.value=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];return(onMonitorErrorCollected?monitor(originalMethod):originalMethod).apply(this,args)}}export function monitor(fn){return function(){return callMonitored(fn,this,arguments)}}export function callMonitored(fn,context,args){try{return fn.apply(context,args)}catch(e){if(displayIfDebugEnabled(e),onMonitorErrorCollected)try{onMonitorErrorCollected(e)}catch(e){displayIfDebugEnabled(e)}}}export function displayIfDebugEnabled(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];debugMode&&display.error.apply(display,__spreadArray(["[MONITOR]"],args,!1))}