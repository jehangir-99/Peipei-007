import{getType}from"./utils/typeUtils";export function mergeInto(destination,source,circularReferenceChecker){if(void 0===circularReferenceChecker&&(circularReferenceChecker=createCircularReferenceChecker()),void 0===source)return destination;if("object"!=typeof source||null===source)return source;if(source instanceof Date)return new Date(source.getTime());if(source instanceof RegExp){var flags=source.flags||[source.global?"g":"",source.ignoreCase?"i":"",source.multiline?"m":"",source.sticky?"y":"",source.unicode?"u":""].join("");return new RegExp(source.source,flags)}if(!circularReferenceChecker.hasAlreadyBeenSeen(source)){if(Array.isArray(source)){for(var merged_1=Array.isArray(destination)?destination:[],i=0;i<source.length;++i)merged_1[i]=mergeInto(merged_1[i],source[i],circularReferenceChecker);return merged_1}var merged="object"===getType(destination)?destination:{};for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(merged[key]=mergeInto(merged[key],source[key],circularReferenceChecker));return merged}}export function deepClone(value){return mergeInto(void 0,value)}export function combine(){for(var destination,sources=[],_i=0;_i<arguments.length;_i++)sources[_i]=arguments[_i];for(var _a=0,sources_1=sources;_a<sources_1.length;_a++){var source=sources_1[_a];null!=source&&(destination=mergeInto(destination,source))}return destination}function createCircularReferenceChecker(){if("undefined"!=typeof WeakSet){var set_1=new WeakSet;return{hasAlreadyBeenSeen:function(value){var has=set_1.has(value);return has||set_1.add(value),has}}}var array=[];return{hasAlreadyBeenSeen:function(value){var has=array.indexOf(value)>=0;return has||array.push(value),has}}}