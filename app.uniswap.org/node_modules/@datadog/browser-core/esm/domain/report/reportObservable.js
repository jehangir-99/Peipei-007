import{toStackTraceString}from"../../tools/stackTrace/handlingStack";import{monitor}from"../../tools/monitor";import{mergeObservables,Observable}from"../../tools/observable";import{addEventListener,DOM_EVENT}from"../../browser/addEventListener";import{includes}from"../../tools/utils/polyfills";import{safeTruncate}from"../../tools/utils/stringUtils";export var RawReportType={intervention:"intervention",deprecation:"deprecation",cspViolation:"csp_violation"};export function initReportObservable(configuration,apis){var observables=[];includes(apis,RawReportType.cspViolation)&&observables.push(createCspViolationReportObservable(configuration));var reportTypes=apis.filter((function(api){return api!==RawReportType.cspViolation}));return reportTypes.length&&observables.push(createReportObservable(reportTypes)),mergeObservables.apply(void 0,observables)}function createReportObservable(reportTypes){return new Observable((function(observable){if(window.ReportingObserver){var handleReports=monitor((function(reports,_){return reports.forEach((function(report){observable.notify(buildRawReportFromReport(report))}))})),observer=new window.ReportingObserver(handleReports,{types:reportTypes,buffered:!0});return observer.observe(),function(){observer.disconnect()}}}))}function createCspViolationReportObservable(configuration){return new Observable((function(observable){return addEventListener(configuration,document,DOM_EVENT.SECURITY_POLICY_VIOLATION,(function(event){observable.notify(buildRawReportFromCspViolation(event))})).stop}))}function buildRawReportFromReport(report){var type=report.type,body=report.body;return{type:type,subtype:body.id,message:"".concat(type,": ").concat(body.message),originalReport:report,stack:buildStack(body.id,body.message,body.sourceFile,body.lineNumber,body.columnNumber)}}function buildRawReportFromCspViolation(event){var type=RawReportType.cspViolation,message="'".concat(event.blockedURI,"' blocked by '").concat(event.effectiveDirective,"' directive");return{type:RawReportType.cspViolation,subtype:event.effectiveDirective,message:"".concat(type,": ").concat(message),stack:buildStack(event.effectiveDirective,event.originalPolicy?"".concat(message,' of the policy "').concat(safeTruncate(event.originalPolicy,100,"..."),'"'):"no policy",event.sourceFile,event.lineNumber,event.columnNumber),originalReport:event}}function buildStack(name,message,sourceFile,lineNumber,columnNumber){return sourceFile?toStackTraceString({name:name,message:message,stack:[{func:"?",url:sourceFile,line:null!=lineNumber?lineNumber:void 0,column:null!=columnNumber?columnNumber:void 0}]}):void 0}