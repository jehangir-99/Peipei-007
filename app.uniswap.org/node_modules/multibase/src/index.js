"use strict";const constants=require("./constants"),{encodeText:encodeText,decodeText:decodeText,concat:concat}=require("./util");function multibase(nameOrCode,buf){if(!buf)throw new Error("requires an encoded Uint8Array");const{name:name,codeBuf:codeBuf}=encoding(nameOrCode);return validEncode(name,buf),concat([codeBuf,buf],codeBuf.length+buf.length)}function encode(nameOrCode,buf){const enc=encoding(nameOrCode),data=encodeText(enc.encode(buf));return concat([enc.codeBuf,data],enc.codeBuf.length+data.length)}function decode(data){data instanceof Uint8Array&&(data=decodeText(data));const prefix=data[0];["f","F","v","V","t","T","b","B","c","C","h","k","K"].includes(prefix)&&(data=data.toLowerCase());return encoding(data[0]).decode(data.substring(1))}function isEncoded(data){if(data instanceof Uint8Array&&(data=decodeText(data)),"[object String]"!==Object.prototype.toString.call(data))return!1;try{return encoding(data[0]).name}catch(err){return!1}}function validEncode(name,buf){encoding(name).decode(decodeText(buf))}function encoding(nameOrCode){if(Object.prototype.hasOwnProperty.call(constants.names,nameOrCode))return constants.names[nameOrCode];if(Object.prototype.hasOwnProperty.call(constants.codes,nameOrCode))return constants.codes[nameOrCode];throw new Error(`Unsupported encoding: ${nameOrCode}`)}function encodingFromData(data){return data instanceof Uint8Array&&(data=decodeText(data)),encoding(data[0])}exports=module.exports=multibase,exports.encode=encode,exports.decode=decode,exports.isEncoded=isEncoded,exports.encoding=encoding,exports.encodingFromData=encodingFromData;const names=Object.freeze(constants.names),codes=Object.freeze(constants.codes);exports.names=names,exports.codes=codes;