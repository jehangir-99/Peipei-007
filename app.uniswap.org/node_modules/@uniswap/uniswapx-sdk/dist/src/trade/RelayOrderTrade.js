"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.RelayOrderTrade=void 0;const sdk_core_1=require("@uniswap/sdk-core"),order_1=require("../order"),utils_1=require("./utils");class RelayOrderTrade{constructor({currenciesIn:currenciesIn,outputAmount:outputAmount,orderInfo:orderInfo,tradeType:tradeType}){this._currenciesIn=currenciesIn,this._outputAmount=outputAmount,this.tradeType=tradeType,this.order=new order_1.RelayOrder(orderInfo,outputAmount.currency.chainId)}get outputAmount(){return this._outputAmount}getFeeInputStartEndAmounts(){if(this._feeStartEndAmounts)return this._feeStartEndAmounts;if(!this.order.info.fee)throw new Error("no fee found");const currencyIn=this._currenciesIn.find((currency=>(0,utils_1.areCurrenciesEqual)(currency,this.order.info.fee.token,currency.chainId)));if(!currencyIn)throw new Error("currency output from order must exist in currenciesOut list");const startEndAmounts={startAmount:sdk_core_1.CurrencyAmount.fromRawAmount(currencyIn,this.order.info.fee.startAmount.toString()),endAmount:sdk_core_1.CurrencyAmount.fromRawAmount(currencyIn,this.order.info.fee.endAmount.toString())};return this._feeStartEndAmounts=startEndAmounts,startEndAmounts}getInputAmount(){if(this._inputAmount)return this._inputAmount;if(!this.order.info.input)throw new Error("no input found");const currencyIn=this._currenciesIn.find((currency=>(0,utils_1.areCurrenciesEqual)(currency,this.order.info.input.token,currency.chainId)));if(!currencyIn)throw new Error("currency input from order must exist in currenciesIn list");const inputAmount=sdk_core_1.CurrencyAmount.fromRawAmount(currencyIn,this.order.info.input.amount.toString());return this._inputAmount=inputAmount,inputAmount}get amountIn(){return this.getInputAmount()}get amountInFee(){return this.getFeeInputStartEndAmounts().startAmount}get maximumAmountInFee(){return this.getFeeInputStartEndAmounts().endAmount}get executionPrice(){var _a;return null!==(_a=this._executionPrice)&&void 0!==_a?_a:this._executionPrice=new sdk_core_1.Price(this.amountIn.currency,this.outputAmount.currency,this.amountIn.quotient,this.outputAmount.quotient)}worstExecutionPrice(){return new sdk_core_1.Price(this.amountIn.currency,this.outputAmount.currency,this.amountIn.quotient,this.outputAmount.quotient)}}exports.RelayOrderTrade=RelayOrderTrade;