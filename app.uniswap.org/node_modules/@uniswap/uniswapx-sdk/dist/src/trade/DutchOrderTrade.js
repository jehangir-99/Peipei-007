"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.DutchOrderTrade=void 0;const sdk_core_1=require("@uniswap/sdk-core"),order_1=require("../order"),utils_1=require("./utils");class DutchOrderTrade{constructor({currencyIn:currencyIn,currenciesOut:currenciesOut,orderInfo:orderInfo,tradeType:tradeType}){this._currencyIn=currencyIn,this._currenciesOut=currenciesOut,this.tradeType=tradeType,this.order=new order_1.DutchOrder(orderInfo,currencyIn.chainId)}get inputAmount(){if(this._inputAmount)return this._inputAmount;const amount=sdk_core_1.CurrencyAmount.fromRawAmount(this._currencyIn,this.order.info.input.startAmount.toString());return this._inputAmount=amount,amount}get outputAmounts(){if(this._outputAmounts)return this._outputAmounts;const amounts=this.order.info.outputs.map((output=>{const currencyOut=this._currenciesOut.find((currency=>(0,utils_1.areCurrenciesEqual)(currency,output.token,currency.chainId)));if(!currencyOut)throw new Error("currency not found in output array");return sdk_core_1.CurrencyAmount.fromRawAmount(currencyOut,output.startAmount.toString())}));return this._outputAmounts=amounts,amounts}getFirstNonFeeOutputStartEndAmounts(){if(this._firstNonFeeOutputStartEndAmounts)return this._firstNonFeeOutputStartEndAmounts;if(0===this.order.info.outputs.length)throw new Error("there must be at least one output token");const output=this.order.info.outputs[0],currencyOut=this._currenciesOut.find((currency=>(0,utils_1.areCurrenciesEqual)(currency,output.token,currency.chainId)));if(!currencyOut)throw new Error("currency output from order must exist in currenciesOut list");const startEndAmounts={startAmount:sdk_core_1.CurrencyAmount.fromRawAmount(currencyOut,output.startAmount.toString()),endAmount:sdk_core_1.CurrencyAmount.fromRawAmount(currencyOut,output.endAmount.toString())};return this._firstNonFeeOutputStartEndAmounts=startEndAmounts,startEndAmounts}get outputAmount(){return this.getFirstNonFeeOutputStartEndAmounts().startAmount}minimumAmountOut(){return this.getFirstNonFeeOutputStartEndAmounts().endAmount}maximumAmountIn(){return sdk_core_1.CurrencyAmount.fromRawAmount(this._currencyIn,this.order.info.input.endAmount.toString())}get executionPrice(){var _a;return null!==(_a=this._executionPrice)&&void 0!==_a?_a:this._executionPrice=new sdk_core_1.Price(this.inputAmount.currency,this.outputAmount.currency,this.inputAmount.quotient,this.outputAmount.quotient)}worstExecutionPrice(){return new sdk_core_1.Price(this.inputAmount.currency,this.outputAmount.currency,this.maximumAmountIn().quotient,this.minimumAmountOut().quotient)}}exports.DutchOrderTrade=DutchOrderTrade;