"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.RelayOrderParser=exports.UniswapXOrderParser=void 0;const ethers_1=require("ethers"),constants_1=require("../constants"),errors_1=require("../errors"),order_1=require("../order"),_1=require("."),UNISWAPX_ORDER_INFO_OFFSET=64,RELAY_ORDER_INFO_OFFSET=64,SLOT_LENGTH=64,ADDRESS_LENGTH=40;class OrderParser{_parseOrder(order){const strippedOrder=(0,_1.stripHexPrefix)(order),reactorAddressOffset=2*parseInt(strippedOrder.slice(this.orderInfoOffset,this.orderInfoOffset+64),16)+64,reactorAddressSlot=strippedOrder.slice(reactorAddressOffset,reactorAddressOffset+64),reactorAddress=ethers_1.ethers.utils.getAddress(reactorAddressSlot.slice(24)).toLowerCase();if(!constants_1.REVERSE_REACTOR_MAPPING[reactorAddress])throw new errors_1.MissingConfiguration("reactor",reactorAddress);return constants_1.REVERSE_REACTOR_MAPPING[reactorAddress].orderType}getOrderType(order){const{orderType:orderType}=constants_1.REVERSE_REACTOR_MAPPING[order.info.reactor.toLowerCase()];return orderType}getOrderTypeFromEncoded(order,chainId){const parsedOrder=this.parseOrder(order,chainId);return this.getOrderType(parsedOrder)}}class UniswapXOrderParser extends OrderParser{constructor(){super(...arguments),this.orderInfoOffset=64}parseOrder(order,chainId){const orderType=this._parseOrder(order);switch(orderType){case constants_1.OrderType.Dutch:return order_1.DutchOrder.parse(order,chainId);case constants_1.OrderType.Dutch_V2:{const cosignedOrder=order_1.CosignedV2DutchOrder.parse(order,chainId);return"0x"===cosignedOrder.info.cosignature?order_1.UnsignedV2DutchOrder.parse(order,chainId):cosignedOrder}default:throw new errors_1.MissingConfiguration("orderType",orderType)}}getOrderType(order){const{orderType:orderType}=constants_1.REVERSE_REACTOR_MAPPING[order.info.reactor.toLowerCase()];if(orderType==constants_1.OrderType.Dutch){const input=order.info.input,outputs=order.info.outputs;return input.startAmount.eq(input.endAmount)&&outputs.every((output=>output.startAmount.eq(output.endAmount)))?constants_1.OrderType.Limit:constants_1.OrderType.Dutch}return orderType}}exports.UniswapXOrderParser=UniswapXOrderParser;class RelayOrderParser extends OrderParser{constructor(){super(...arguments),this.orderInfoOffset=64}parseOrder(order,chainId){return order_1.RelayOrder.parse(order,chainId)}}exports.RelayOrderParser=RelayOrderParser;