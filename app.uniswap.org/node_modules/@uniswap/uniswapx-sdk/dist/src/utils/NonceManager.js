"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getCancelMultipleParams=exports.getCancelSingleParams=exports.setBit=exports.getFirstUnsetBit=exports.buildNonce=exports.splitNonce=exports.NonceManager=void 0;const tslib_1=require("tslib"),ethers_1=require("ethers"),constants_1=require("../constants"),contracts_1=require("../contracts"),errors_1=require("../errors");class NonceManager{constructor(provider,chainId,permit2Address){if(this.provider=provider,permit2Address)this.permit2=contracts_1.Permit2__factory.connect(permit2Address,provider);else{if(!constants_1.PERMIT2_MAPPING[chainId])throw new errors_1.MissingConfiguration("permit2",chainId.toString());this.permit2=contracts_1.Permit2__factory.connect(constants_1.PERMIT2_MAPPING[chainId],this.provider)}this.currentWord=new Map,this.currentBitmap=new Map}useNonce(address){return tslib_1.__awaiter(this,void 0,void 0,(function*(){const{word:word,bitmap:bitmap}=yield this.getNextOpenWord(address),bitPos=getFirstUnsetBit(bitmap);return this.currentWord.set(address,word),this.currentBitmap.set(address,setBit(bitmap,bitPos)),buildNonce(word,bitPos)}))}isUsed(address,nonce){return tslib_1.__awaiter(this,void 0,void 0,(function*(){const{word:word,bitPos:bitPos}=splitNonce(nonce);return(yield this.permit2.nonceBitmap(address,word)).div(ethers_1.BigNumber.from(2).pow(bitPos)).mod(2).eq(1)}))}getNextOpenWord(address){return tslib_1.__awaiter(this,void 0,void 0,(function*(){let currentWord=this.currentWord.get(address)||ethers_1.BigNumber.from(0),bitmap=this.currentBitmap.get(address)||(yield this.permit2.nonceBitmap(address,currentWord));for(;bitmap.eq(ethers_1.ethers.constants.MaxUint256);)currentWord=currentWord.add(1),bitmap=yield this.permit2.nonceBitmap(address,currentWord);return{word:currentWord,bitmap:bitmap}}))}}function splitNonce(nonce){return{word:nonce.div(256),bitPos:nonce.mod(256)}}function buildNonce(word,bitPos){return word.mul(256).add(bitPos)}function getFirstUnsetBit(bitmap){for(let i=0;i<256;i++)if(bitmap.div(ethers_1.BigNumber.from(2).pow(i)).mod(2).eq(0))return i;return-1}function setBit(bitmap,bitPos){const mask=ethers_1.BigNumber.from(2).pow(bitPos);return bitmap.div(mask).mod(2).eq(1)?bitmap:bitmap.add(mask)}function getCancelSingleParams(nonceToCancel){const{word:word,bitPos:bitPos}=splitNonce(nonceToCancel);return{word:word,mask:ethers_1.BigNumber.from(2).pow(bitPos)}}function getCancelMultipleParams(noncesToCancel){const splitNonces=noncesToCancel.map(splitNonce),splitNoncesByWord={};return splitNonces.forEach((splitNonce=>{const word=splitNonce.word.toString();splitNoncesByWord[word]||(splitNoncesByWord[word]=[]),splitNoncesByWord[word].push(splitNonce)})),Object.entries(splitNoncesByWord).map((([word,splitNonce])=>{let mask=ethers_1.BigNumber.from(0);return splitNonce.forEach((splitNonce=>{mask=mask.or(ethers_1.BigNumber.from(2).pow(splitNonce.bitPos))})),{word:ethers_1.BigNumber.from(word),mask:mask}}))}exports.NonceManager=NonceManager,exports.splitNonce=splitNonce,exports.buildNonce=buildNonce,exports.getFirstUnsetBit=getFirstUnsetBit,exports.setBit=setBit,exports.getCancelSingleParams=getCancelSingleParams,exports.getCancelMultipleParams=getCancelMultipleParams;