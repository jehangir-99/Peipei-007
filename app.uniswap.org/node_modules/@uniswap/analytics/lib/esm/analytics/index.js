import{Identify,identify,init,track,getDeviceId as getAmplitudeDeviceId,getUserId as getAmplitudeUserId,getSessionId as getAmplitudeSessionId}from"@amplitude/analytics-browser";import{ApplicationTransport}from"./ApplicationTransport";let isInitialized=!1;export let analyticsConfig;export function initializeAnalytics(apiKey,originApplication,config){if(config?.isProductionEnv||!isInitialized){if(config?.isProductionEnv){if(isInitialized)throw new Error("initializeAnalytics called multiple times. Ensure it is outside of a React component.");if(config.debug)throw new Error("It looks like you're trying to initialize analytics in debug mode for production. Disable debug mode or use a non-production environment.")}isInitialized=!0,analyticsConfig=config,init(apiKey,void 0,{serverUrl:config?.proxyUrl,transportProvider:new ApplicationTransport(originApplication,config?.reportOriginCountry),trackingOptions:{ipAddress:!1,carrier:!1,city:!1,region:!1,dma:!1}})}}export function sendAnalyticsEvent(eventName,eventProperties){const origin=window.location.origin;analyticsConfig?.debug&&console.log({eventName:eventName,eventProperties:{...eventProperties,origin:origin}}),track(eventName,{...eventProperties,origin:origin})}export function getDeviceId(){return getAmplitudeDeviceId()}export function getUserId(){return getAmplitudeUserId()}export function getSessionId(){return getAmplitudeSessionId()}class UserModel{log(method,...parameters){console.debug(`[amplitude(Identify)]: ${method}(${parameters})`)}call(mutate){if(analyticsConfig?.isProductionEnv)identify(mutate(new Identify));else{const log=(_,method)=>this.log.bind(this,method);mutate(new Proxy(new Identify,{get:log}))}}set(key,value){this.call((event=>event.set(key,value)))}setOnce(key,value){this.call((event=>event.setOnce(key,value)))}add(key,value){this.call((event=>event.add(key,value)))}postInsert(key,value){this.call((event=>event.postInsert(key,value)))}remove(key,value){this.call((event=>event.remove(key,value)))}}export const user=new UserModel;