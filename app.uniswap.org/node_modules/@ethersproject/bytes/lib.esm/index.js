"use strict";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version);function isHexable(value){return!!value.toHexString}function addSlice(array){return array.slice||(array.slice=function(){const args=Array.prototype.slice.call(arguments);return addSlice(new Uint8Array(Array.prototype.slice.apply(array,args)))}),array}export function isBytesLike(value){return isHexString(value)&&!(value.length%2)||isBytes(value)}function isInteger(value){return"number"==typeof value&&value==value&&value%1==0}export function isBytes(value){if(null==value)return!1;if(value.constructor===Uint8Array)return!0;if("string"==typeof value)return!1;if(!isInteger(value.length)||value.length<0)return!1;for(let i=0;i<value.length;i++){const v=value[i];if(!isInteger(v)||v<0||v>=256)return!1}return!0}export function arrayify(value,options){if(options||(options={}),"number"==typeof value){logger.checkSafeUint53(value,"invalid arrayify value");const result=[];for(;value;)result.unshift(255&value),value=parseInt(String(value/256));return 0===result.length&&result.push(0),addSlice(new Uint8Array(result))}if(options.allowMissingPrefix&&"string"==typeof value&&"0x"!==value.substring(0,2)&&(value="0x"+value),isHexable(value)&&(value=value.toHexString()),isHexString(value)){let hex=value.substring(2);hex.length%2&&("left"===options.hexPad?hex="0"+hex:"right"===options.hexPad?hex+="0":logger.throwArgumentError("hex data is odd-length","value",value));const result=[];for(let i=0;i<hex.length;i+=2)result.push(parseInt(hex.substring(i,i+2),16));return addSlice(new Uint8Array(result))}return isBytes(value)?addSlice(new Uint8Array(value)):logger.throwArgumentError("invalid arrayify value","value",value)}export function concat(items){const objects=items.map((item=>arrayify(item))),length=objects.reduce(((accum,item)=>accum+item.length),0),result=new Uint8Array(length);return objects.reduce(((offset,object)=>(result.set(object,offset),offset+object.length)),0),addSlice(result)}export function stripZeros(value){let result=arrayify(value);if(0===result.length)return result;let start=0;for(;start<result.length&&0===result[start];)start++;return start&&(result=result.slice(start)),result}export function zeroPad(value,length){(value=arrayify(value)).length>length&&logger.throwArgumentError("value out of range","value",arguments[0]);const result=new Uint8Array(length);return result.set(value,length-value.length),addSlice(result)}export function isHexString(value,length){return!("string"!=typeof value||!value.match(/^0x[0-9A-Fa-f]*$/))&&(!length||value.length===2+2*length)}const HexCharacters="0123456789abcdef";export function hexlify(value,options){if(options||(options={}),"number"==typeof value){logger.checkSafeUint53(value,"invalid hexlify value");let hex="";for(;value;)hex=HexCharacters[15&value]+hex,value=Math.floor(value/16);return hex.length?(hex.length%2&&(hex="0"+hex),"0x"+hex):"0x00"}if("bigint"==typeof value)return(value=value.toString(16)).length%2?"0x0"+value:"0x"+value;if(options.allowMissingPrefix&&"string"==typeof value&&"0x"!==value.substring(0,2)&&(value="0x"+value),isHexable(value))return value.toHexString();if(isHexString(value))return value.length%2&&("left"===options.hexPad?value="0x0"+value.substring(2):"right"===options.hexPad?value+="0":logger.throwArgumentError("hex data is odd-length","value",value)),value.toLowerCase();if(isBytes(value)){let result="0x";for(let i=0;i<value.length;i++){let v=value[i];result+=HexCharacters[(240&v)>>4]+HexCharacters[15&v]}return result}return logger.throwArgumentError("invalid hexlify value","value",value)}export function hexDataLength(data){if("string"!=typeof data)data=hexlify(data);else if(!isHexString(data)||data.length%2)return null;return(data.length-2)/2}export function hexDataSlice(data,offset,endOffset){return"string"!=typeof data?data=hexlify(data):(!isHexString(data)||data.length%2)&&logger.throwArgumentError("invalid hexData","value",data),offset=2+2*offset,null!=endOffset?"0x"+data.substring(offset,2+2*endOffset):"0x"+data.substring(offset)}export function hexConcat(items){let result="0x";return items.forEach((item=>{result+=hexlify(item).substring(2)})),result}export function hexValue(value){const trimmed=hexStripZeros(hexlify(value,{hexPad:"left"}));return"0x"===trimmed?"0x0":trimmed}export function hexStripZeros(value){"string"!=typeof value&&(value=hexlify(value)),isHexString(value)||logger.throwArgumentError("invalid hex string","value",value),value=value.substring(2);let offset=0;for(;offset<value.length&&"0"===value[offset];)offset++;return"0x"+value.substring(offset)}export function hexZeroPad(value,length){for("string"!=typeof value?value=hexlify(value):isHexString(value)||logger.throwArgumentError("invalid hex string","value",value),value.length>2*length+2&&logger.throwArgumentError("value out of range","value",arguments[1]);value.length<2*length+2;)value="0x0"+value.substring(2);return value}export function splitSignature(signature){const result={r:"0x",s:"0x",_vs:"0x",recoveryParam:0,v:0,yParityAndS:"0x",compact:"0x"};if(isBytesLike(signature)){let bytes=arrayify(signature);64===bytes.length?(result.v=27+(bytes[32]>>7),bytes[32]&=127,result.r=hexlify(bytes.slice(0,32)),result.s=hexlify(bytes.slice(32,64))):65===bytes.length?(result.r=hexlify(bytes.slice(0,32)),result.s=hexlify(bytes.slice(32,64)),result.v=bytes[64]):logger.throwArgumentError("invalid signature string","signature",signature),result.v<27&&(0===result.v||1===result.v?result.v+=27:logger.throwArgumentError("signature invalid v byte","signature",signature)),result.recoveryParam=1-result.v%2,result.recoveryParam&&(bytes[32]|=128),result._vs=hexlify(bytes.slice(32,64))}else{if(result.r=signature.r,result.s=signature.s,result.v=signature.v,result.recoveryParam=signature.recoveryParam,result._vs=signature._vs,null!=result._vs){const vs=zeroPad(arrayify(result._vs),32);result._vs=hexlify(vs);const recoveryParam=vs[0]>=128?1:0;null==result.recoveryParam?result.recoveryParam=recoveryParam:result.recoveryParam!==recoveryParam&&logger.throwArgumentError("signature recoveryParam mismatch _vs","signature",signature),vs[0]&=127;const s=hexlify(vs);null==result.s?result.s=s:result.s!==s&&logger.throwArgumentError("signature v mismatch _vs","signature",signature)}if(null==result.recoveryParam)null==result.v?logger.throwArgumentError("signature missing v and recoveryParam","signature",signature):0===result.v||1===result.v?result.recoveryParam=result.v:result.recoveryParam=1-result.v%2;else if(null==result.v)result.v=27+result.recoveryParam;else{const recId=0===result.v||1===result.v?result.v:1-result.v%2;result.recoveryParam!==recId&&logger.throwArgumentError("signature recoveryParam mismatch v","signature",signature)}null!=result.r&&isHexString(result.r)?result.r=hexZeroPad(result.r,32):logger.throwArgumentError("signature missing or invalid r","signature",signature),null!=result.s&&isHexString(result.s)?result.s=hexZeroPad(result.s,32):logger.throwArgumentError("signature missing or invalid s","signature",signature);const vs=arrayify(result.s);vs[0]>=128&&logger.throwArgumentError("signature s out of range","signature",signature),result.recoveryParam&&(vs[0]|=128);const _vs=hexlify(vs);result._vs&&(isHexString(result._vs)||logger.throwArgumentError("signature invalid _vs","signature",signature),result._vs=hexZeroPad(result._vs,32)),null==result._vs?result._vs=_vs:result._vs!==_vs&&logger.throwArgumentError("signature _vs mismatch v and s","signature",signature)}return result.yParityAndS=result._vs,result.compact=result.r+result.yParityAndS.substring(2),result}export function joinSignature(signature){return hexlify(concat([(signature=splitSignature(signature)).r,signature.s,signature.recoveryParam?"0x1c":"0x1b"]))}