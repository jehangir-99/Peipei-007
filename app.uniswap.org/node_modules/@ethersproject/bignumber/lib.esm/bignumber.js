"use strict";import _BN from"bn.js";var BN=_BN.BN;import{hexlify,isBytes,isHexString}from"@ethersproject/bytes";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version),_constructorGuard={},MAX_SAFE=9007199254740991;export function isBigNumberish(value){return null!=value&&(BigNumber.isBigNumber(value)||"number"==typeof value&&value%1==0||"string"==typeof value&&!!value.match(/^-?[0-9]+$/)||isHexString(value)||"bigint"==typeof value||isBytes(value))}let _warnedToStringRadix=!1;export class BigNumber{constructor(constructorGuard,hex){constructorGuard!==_constructorGuard&&logger.throwError("cannot call constructor directly; use BigNumber.from",Logger.errors.UNSUPPORTED_OPERATION,{operation:"new (BigNumber)"}),this._hex=hex,this._isBigNumber=!0,Object.freeze(this)}fromTwos(value){return toBigNumber(toBN(this).fromTwos(value))}toTwos(value){return toBigNumber(toBN(this).toTwos(value))}abs(){return"-"===this._hex[0]?BigNumber.from(this._hex.substring(1)):this}add(other){return toBigNumber(toBN(this).add(toBN(other)))}sub(other){return toBigNumber(toBN(this).sub(toBN(other)))}div(other){return BigNumber.from(other).isZero()&&throwFault("division-by-zero","div"),toBigNumber(toBN(this).div(toBN(other)))}mul(other){return toBigNumber(toBN(this).mul(toBN(other)))}mod(other){const value=toBN(other);return value.isNeg()&&throwFault("division-by-zero","mod"),toBigNumber(toBN(this).umod(value))}pow(other){const value=toBN(other);return value.isNeg()&&throwFault("negative-power","pow"),toBigNumber(toBN(this).pow(value))}and(other){const value=toBN(other);return(this.isNegative()||value.isNeg())&&throwFault("unbound-bitwise-result","and"),toBigNumber(toBN(this).and(value))}or(other){const value=toBN(other);return(this.isNegative()||value.isNeg())&&throwFault("unbound-bitwise-result","or"),toBigNumber(toBN(this).or(value))}xor(other){const value=toBN(other);return(this.isNegative()||value.isNeg())&&throwFault("unbound-bitwise-result","xor"),toBigNumber(toBN(this).xor(value))}mask(value){return(this.isNegative()||value<0)&&throwFault("negative-width","mask"),toBigNumber(toBN(this).maskn(value))}shl(value){return(this.isNegative()||value<0)&&throwFault("negative-width","shl"),toBigNumber(toBN(this).shln(value))}shr(value){return(this.isNegative()||value<0)&&throwFault("negative-width","shr"),toBigNumber(toBN(this).shrn(value))}eq(other){return toBN(this).eq(toBN(other))}lt(other){return toBN(this).lt(toBN(other))}lte(other){return toBN(this).lte(toBN(other))}gt(other){return toBN(this).gt(toBN(other))}gte(other){return toBN(this).gte(toBN(other))}isNegative(){return"-"===this._hex[0]}isZero(){return toBN(this).isZero()}toNumber(){try{return toBN(this).toNumber()}catch(error){throwFault("overflow","toNumber",this.toString())}return null}toBigInt(){try{return BigInt(this.toString())}catch(e){}return logger.throwError("this platform does not support BigInt",Logger.errors.UNSUPPORTED_OPERATION,{value:this.toString()})}toString(){return arguments.length>0&&(10===arguments[0]?_warnedToStringRadix||(_warnedToStringRadix=!0,logger.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")):16===arguments[0]?logger.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()",Logger.errors.UNEXPECTED_ARGUMENT,{}):logger.throwError("BigNumber.toString does not accept parameters",Logger.errors.UNEXPECTED_ARGUMENT,{})),toBN(this).toString(10)}toHexString(){return this._hex}toJSON(key){return{type:"BigNumber",hex:this.toHexString()}}static from(value){if(value instanceof BigNumber)return value;if("string"==typeof value)return value.match(/^-?0x[0-9a-f]+$/i)?new BigNumber(_constructorGuard,toHex(value)):value.match(/^-?[0-9]+$/)?new BigNumber(_constructorGuard,toHex(new BN(value))):logger.throwArgumentError("invalid BigNumber string","value",value);if("number"==typeof value)return value%1&&throwFault("underflow","BigNumber.from",value),(value>=MAX_SAFE||value<=-MAX_SAFE)&&throwFault("overflow","BigNumber.from",value),BigNumber.from(String(value));const anyValue=value;if("bigint"==typeof anyValue)return BigNumber.from(anyValue.toString());if(isBytes(anyValue))return BigNumber.from(hexlify(anyValue));if(anyValue)if(anyValue.toHexString){const hex=anyValue.toHexString();if("string"==typeof hex)return BigNumber.from(hex)}else{let hex=anyValue._hex;if(null==hex&&"BigNumber"===anyValue.type&&(hex=anyValue.hex),"string"==typeof hex&&(isHexString(hex)||"-"===hex[0]&&isHexString(hex.substring(1))))return BigNumber.from(hex)}return logger.throwArgumentError("invalid BigNumber value","value",value)}static isBigNumber(value){return!(!value||!value._isBigNumber)}}function toHex(value){if("string"!=typeof value)return toHex(value.toString(16));if("-"===value[0])return"-"===(value=value.substring(1))[0]&&logger.throwArgumentError("invalid hex","value",value),"0x00"===(value=toHex(value))?value:"-"+value;if("0x"!==value.substring(0,2)&&(value="0x"+value),"0x"===value)return"0x00";for(value.length%2&&(value="0x0"+value.substring(2));value.length>4&&"0x00"===value.substring(0,4);)value="0x"+value.substring(4);return value}function toBigNumber(value){return BigNumber.from(toHex(value))}function toBN(value){const hex=BigNumber.from(value).toHexString();return"-"===hex[0]?new BN("-"+hex.substring(3),16):new BN(hex.substring(2),16)}function throwFault(fault,operation,value){const params={fault:fault,operation:operation};return null!=value&&(params.value=value),logger.throwError(fault,Logger.errors.NUMERIC_FAULT,params)}export function _base36To16(value){return new BN(value,36).toString(16)}export function _base16To36(value){return new BN(value,16).toString(36)}