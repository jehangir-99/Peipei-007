"use strict";import{arrayify,hexZeroPad,isBytes}from"@ethersproject/bytes";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version);import{BigNumber,isBigNumberish}from"./bignumber";const _constructorGuard={},Zero=BigNumber.from(0),NegativeOne=BigNumber.from(-1);function throwFault(message,fault,operation,value){const params={fault:fault,operation:operation};return void 0!==value&&(params.value=value),logger.throwError(message,Logger.errors.NUMERIC_FAULT,params)}let zeros="0";for(;zeros.length<256;)zeros+=zeros;function getMultiplier(decimals){if("number"!=typeof decimals)try{decimals=BigNumber.from(decimals).toNumber()}catch(e){}return"number"==typeof decimals&&decimals>=0&&decimals<=256&&!(decimals%1)?"1"+zeros.substring(0,decimals):logger.throwArgumentError("invalid decimal size","decimals",decimals)}export function formatFixed(value,decimals){null==decimals&&(decimals=0);const multiplier=getMultiplier(decimals),negative=(value=BigNumber.from(value)).lt(Zero);negative&&(value=value.mul(NegativeOne));let fraction=value.mod(multiplier).toString();for(;fraction.length<multiplier.length-1;)fraction="0"+fraction;fraction=fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];const whole=value.div(multiplier).toString();return value=1===multiplier.length?whole:whole+"."+fraction,negative&&(value="-"+value),value}export function parseFixed(value,decimals){null==decimals&&(decimals=0);const multiplier=getMultiplier(decimals);"string"==typeof value&&value.match(/^-?[0-9.]+$/)||logger.throwArgumentError("invalid decimal value","value",value);const negative="-"===value.substring(0,1);negative&&(value=value.substring(1)),"."===value&&logger.throwArgumentError("missing value","value",value);const comps=value.split(".");comps.length>2&&logger.throwArgumentError("too many decimal points","value",value);let whole=comps[0],fraction=comps[1];for(whole||(whole="0"),fraction||(fraction="0");"0"===fraction[fraction.length-1];)fraction=fraction.substring(0,fraction.length-1);for(fraction.length>multiplier.length-1&&throwFault("fractional component exceeds decimals","underflow","parseFixed"),""===fraction&&(fraction="0");fraction.length<multiplier.length-1;)fraction+="0";const wholeValue=BigNumber.from(whole),fractionValue=BigNumber.from(fraction);let wei=wholeValue.mul(multiplier).add(fractionValue);return negative&&(wei=wei.mul(NegativeOne)),wei}export class FixedFormat{constructor(constructorGuard,signed,width,decimals){constructorGuard!==_constructorGuard&&logger.throwError("cannot use FixedFormat constructor; use FixedFormat.from",Logger.errors.UNSUPPORTED_OPERATION,{operation:"new FixedFormat"}),this.signed=signed,this.width=width,this.decimals=decimals,this.name=(signed?"":"u")+"fixed"+String(width)+"x"+String(decimals),this._multiplier=getMultiplier(decimals),Object.freeze(this)}static from(value){if(value instanceof FixedFormat)return value;"number"==typeof value&&(value=`fixed128x${value}`);let signed=!0,width=128,decimals=18;if("string"==typeof value)if("fixed"===value);else if("ufixed"===value)signed=!1;else{const match=value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);match||logger.throwArgumentError("invalid fixed format","format",value),signed="u"!==match[1],width=parseInt(match[2]),decimals=parseInt(match[3])}else if(value){const check=(key,type,defaultValue)=>null==value[key]?defaultValue:(typeof value[key]!==type&&logger.throwArgumentError("invalid fixed format ("+key+" not "+type+")","format."+key,value[key]),value[key]);signed=check("signed","boolean",signed),width=check("width","number",width),decimals=check("decimals","number",decimals)}return width%8&&logger.throwArgumentError("invalid fixed format width (not byte aligned)","format.width",width),decimals>80&&logger.throwArgumentError("invalid fixed format (decimals too large)","format.decimals",decimals),new FixedFormat(_constructorGuard,signed,width,decimals)}}export class FixedNumber{constructor(constructorGuard,hex,value,format){constructorGuard!==_constructorGuard&&logger.throwError("cannot use FixedNumber constructor; use FixedNumber.from",Logger.errors.UNSUPPORTED_OPERATION,{operation:"new FixedFormat"}),this.format=format,this._hex=hex,this._value=value,this._isFixedNumber=!0,Object.freeze(this)}_checkFormat(other){this.format.name!==other.format.name&&logger.throwArgumentError("incompatible format; use fixedNumber.toFormat","other",other)}addUnsafe(other){this._checkFormat(other);const a=parseFixed(this._value,this.format.decimals),b=parseFixed(other._value,other.format.decimals);return FixedNumber.fromValue(a.add(b),this.format.decimals,this.format)}subUnsafe(other){this._checkFormat(other);const a=parseFixed(this._value,this.format.decimals),b=parseFixed(other._value,other.format.decimals);return FixedNumber.fromValue(a.sub(b),this.format.decimals,this.format)}mulUnsafe(other){this._checkFormat(other);const a=parseFixed(this._value,this.format.decimals),b=parseFixed(other._value,other.format.decimals);return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier),this.format.decimals,this.format)}divUnsafe(other){this._checkFormat(other);const a=parseFixed(this._value,this.format.decimals),b=parseFixed(other._value,other.format.decimals);return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b),this.format.decimals,this.format)}floor(){const comps=this.toString().split(".");1===comps.length&&comps.push("0");let result=FixedNumber.from(comps[0],this.format);const hasFraction=!comps[1].match(/^(0*)$/);return this.isNegative()&&hasFraction&&(result=result.subUnsafe(ONE.toFormat(result.format))),result}ceiling(){const comps=this.toString().split(".");1===comps.length&&comps.push("0");let result=FixedNumber.from(comps[0],this.format);const hasFraction=!comps[1].match(/^(0*)$/);return!this.isNegative()&&hasFraction&&(result=result.addUnsafe(ONE.toFormat(result.format))),result}round(decimals){null==decimals&&(decimals=0);const comps=this.toString().split(".");if(1===comps.length&&comps.push("0"),(decimals<0||decimals>80||decimals%1)&&logger.throwArgumentError("invalid decimal count","decimals",decimals),comps[1].length<=decimals)return this;const factor=FixedNumber.from("1"+zeros.substring(0,decimals),this.format),bump=BUMP.toFormat(this.format);return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor)}isZero(){return"0.0"===this._value||"0"===this._value}isNegative(){return"-"===this._value[0]}toString(){return this._value}toHexString(width){if(null==width)return this._hex;width%8&&logger.throwArgumentError("invalid byte width","width",width);const hex=BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();return hexZeroPad(hex,width/8)}toUnsafeFloat(){return parseFloat(this.toString())}toFormat(format){return FixedNumber.fromString(this._value,format)}static fromValue(value,decimals,format){return null!=format||null==decimals||isBigNumberish(decimals)||(format=decimals,decimals=null),null==decimals&&(decimals=0),null==format&&(format="fixed"),FixedNumber.fromString(formatFixed(value,decimals),FixedFormat.from(format))}static fromString(value,format){null==format&&(format="fixed");const fixedFormat=FixedFormat.from(format),numeric=parseFixed(value,fixedFormat.decimals);!fixedFormat.signed&&numeric.lt(Zero)&&throwFault("unsigned value cannot be negative","overflow","value",value);let hex=null;fixedFormat.signed?hex=numeric.toTwos(fixedFormat.width).toHexString():(hex=numeric.toHexString(),hex=hexZeroPad(hex,fixedFormat.width/8));const decimal=formatFixed(numeric,fixedFormat.decimals);return new FixedNumber(_constructorGuard,hex,decimal,fixedFormat)}static fromBytes(value,format){null==format&&(format="fixed");const fixedFormat=FixedFormat.from(format);if(arrayify(value).length>fixedFormat.width/8)throw new Error("overflow");let numeric=BigNumber.from(value);fixedFormat.signed&&(numeric=numeric.fromTwos(fixedFormat.width));const hex=numeric.toTwos((fixedFormat.signed?0:1)+fixedFormat.width).toHexString(),decimal=formatFixed(numeric,fixedFormat.decimals);return new FixedNumber(_constructorGuard,hex,decimal,fixedFormat)}static from(value,format){if("string"==typeof value)return FixedNumber.fromString(value,format);if(isBytes(value))return FixedNumber.fromBytes(value,format);try{return FixedNumber.fromValue(value,0,format)}catch(error){if(error.code!==Logger.errors.INVALID_ARGUMENT)throw error}return logger.throwArgumentError("invalid FixedNumber value","value",value)}static isFixedNumber(value){return!(!value||!value._isFixedNumber)}}const ONE=FixedNumber.from(1),BUMP=FixedNumber.from("0.5");