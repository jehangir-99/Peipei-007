"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P((function(resolve){resolve(value)}))).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};import{checkResultErrors,Indexed,Interface}from"@ethersproject/abi";import{Provider}from"@ethersproject/abstract-provider";import{Signer,VoidSigner}from"@ethersproject/abstract-signer";import{getAddress,getContractAddress}from"@ethersproject/address";import{BigNumber}from"@ethersproject/bignumber";import{arrayify,concat,hexlify,isBytes,isHexString}from"@ethersproject/bytes";import{defineReadOnly,deepCopy,getStatic,resolveProperties,shallowCopy}from"@ethersproject/properties";import{accessListify}from"@ethersproject/transactions";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version),allowedTransactionKeys={chainId:!0,data:!0,from:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,value:!0,type:!0,accessList:!0,maxFeePerGas:!0,maxPriorityFeePerGas:!0,customData:!0,ccipReadEnabled:!0};function resolveName(resolver,nameOrPromise){return __awaiter(this,void 0,void 0,(function*(){const name=yield nameOrPromise;"string"!=typeof name&&logger.throwArgumentError("invalid address or ENS name","name",name);try{return getAddress(name)}catch(error){}resolver||logger.throwError("a provider or signer is needed to resolve ENS names",Logger.errors.UNSUPPORTED_OPERATION,{operation:"resolveName"});const address=yield resolver.resolveName(name);return null==address&&logger.throwArgumentError("resolver or addr is not configured for ENS name","name",name),address}))}function resolveAddresses(resolver,value,paramType){return __awaiter(this,void 0,void 0,(function*(){return Array.isArray(paramType)?yield Promise.all(paramType.map(((paramType,index)=>resolveAddresses(resolver,Array.isArray(value)?value[index]:value[paramType.name],paramType)))):"address"===paramType.type?yield resolveName(resolver,value):"tuple"===paramType.type?yield resolveAddresses(resolver,value,paramType.components):"array"===paramType.baseType?Array.isArray(value)?yield Promise.all(value.map((v=>resolveAddresses(resolver,v,paramType.arrayChildren)))):Promise.reject(logger.makeError("invalid value for array",Logger.errors.INVALID_ARGUMENT,{argument:"value",value:value})):value}))}function populateTransaction(contract,fragment,args){return __awaiter(this,void 0,void 0,(function*(){let overrides={};args.length===fragment.inputs.length+1&&"object"==typeof args[args.length-1]&&(overrides=shallowCopy(args.pop())),logger.checkArgumentCount(args.length,fragment.inputs.length,"passed to contract"),contract.signer?overrides.from?overrides.from=resolveProperties({override:resolveName(contract.signer,overrides.from),signer:contract.signer.getAddress()}).then((check=>__awaiter(this,void 0,void 0,(function*(){return getAddress(check.signer)!==check.override&&logger.throwError("Contract with a Signer cannot override from",Logger.errors.UNSUPPORTED_OPERATION,{operation:"overrides.from"}),check.override})))):overrides.from=contract.signer.getAddress():overrides.from&&(overrides.from=resolveName(contract.provider,overrides.from));const resolved=yield resolveProperties({args:resolveAddresses(contract.signer||contract.provider,args,fragment.inputs),address:contract.resolvedAddress,overrides:resolveProperties(overrides)||{}}),data=contract.interface.encodeFunctionData(fragment,resolved.args),tx={data:data,to:resolved.address},ro=resolved.overrides;if(null!=ro.nonce&&(tx.nonce=BigNumber.from(ro.nonce).toNumber()),null!=ro.gasLimit&&(tx.gasLimit=BigNumber.from(ro.gasLimit)),null!=ro.gasPrice&&(tx.gasPrice=BigNumber.from(ro.gasPrice)),null!=ro.maxFeePerGas&&(tx.maxFeePerGas=BigNumber.from(ro.maxFeePerGas)),null!=ro.maxPriorityFeePerGas&&(tx.maxPriorityFeePerGas=BigNumber.from(ro.maxPriorityFeePerGas)),null!=ro.from&&(tx.from=ro.from),null!=ro.type&&(tx.type=ro.type),null!=ro.accessList&&(tx.accessList=accessListify(ro.accessList)),null==tx.gasLimit&&null!=fragment.gas){let intrinsic=21e3;const bytes=arrayify(data);for(let i=0;i<bytes.length;i++)intrinsic+=4,bytes[i]&&(intrinsic+=64);tx.gasLimit=BigNumber.from(fragment.gas).add(intrinsic)}if(ro.value){const roValue=BigNumber.from(ro.value);roValue.isZero()||fragment.payable||logger.throwError("non-payable method cannot override value",Logger.errors.UNSUPPORTED_OPERATION,{operation:"overrides.value",value:overrides.value}),tx.value=roValue}ro.customData&&(tx.customData=shallowCopy(ro.customData)),ro.ccipReadEnabled&&(tx.ccipReadEnabled=!!ro.ccipReadEnabled),delete overrides.nonce,delete overrides.gasLimit,delete overrides.gasPrice,delete overrides.from,delete overrides.value,delete overrides.type,delete overrides.accessList,delete overrides.maxFeePerGas,delete overrides.maxPriorityFeePerGas,delete overrides.customData,delete overrides.ccipReadEnabled;const leftovers=Object.keys(overrides).filter((key=>null!=overrides[key]));return leftovers.length&&logger.throwError(`cannot override ${leftovers.map((l=>JSON.stringify(l))).join(",")}`,Logger.errors.UNSUPPORTED_OPERATION,{operation:"overrides",overrides:leftovers}),tx}))}function buildPopulate(contract,fragment){return function(...args){return populateTransaction(contract,fragment,args)}}function buildEstimate(contract,fragment){const signerOrProvider=contract.signer||contract.provider;return function(...args){return __awaiter(this,void 0,void 0,(function*(){signerOrProvider||logger.throwError("estimate require a provider or signer",Logger.errors.UNSUPPORTED_OPERATION,{operation:"estimateGas"});const tx=yield populateTransaction(contract,fragment,args);return yield signerOrProvider.estimateGas(tx)}))}}function addContractWait(contract,tx){const wait=tx.wait.bind(tx);tx.wait=confirmations=>wait(confirmations).then((receipt=>(receipt.events=receipt.logs.map((log=>{let event=deepCopy(log),parsed=null;try{parsed=contract.interface.parseLog(log)}catch(e){}return parsed&&(event.args=parsed.args,event.decode=(data,topics)=>contract.interface.decodeEventLog(parsed.eventFragment,data,topics),event.event=parsed.name,event.eventSignature=parsed.signature),event.removeListener=()=>contract.provider,event.getBlock=()=>contract.provider.getBlock(receipt.blockHash),event.getTransaction=()=>contract.provider.getTransaction(receipt.transactionHash),event.getTransactionReceipt=()=>Promise.resolve(receipt),event})),receipt)))}function buildCall(contract,fragment,collapseSimple){const signerOrProvider=contract.signer||contract.provider;return function(...args){return __awaiter(this,void 0,void 0,(function*(){let blockTag;if(args.length===fragment.inputs.length+1&&"object"==typeof args[args.length-1]){const overrides=shallowCopy(args.pop());null!=overrides.blockTag&&(blockTag=yield overrides.blockTag),delete overrides.blockTag,args.push(overrides)}null!=contract.deployTransaction&&(yield contract._deployed(blockTag));const tx=yield populateTransaction(contract,fragment,args),result=yield signerOrProvider.call(tx,blockTag);try{let value=contract.interface.decodeFunctionResult(fragment,result);return collapseSimple&&1===fragment.outputs.length&&(value=value[0]),value}catch(error){throw error.code===Logger.errors.CALL_EXCEPTION&&(error.address=contract.address,error.args=args,error.transaction=tx),error}}))}}function buildSend(contract,fragment){return function(...args){return __awaiter(this,void 0,void 0,(function*(){contract.signer||logger.throwError("sending a transaction requires a signer",Logger.errors.UNSUPPORTED_OPERATION,{operation:"sendTransaction"}),null!=contract.deployTransaction&&(yield contract._deployed());const txRequest=yield populateTransaction(contract,fragment,args),tx=yield contract.signer.sendTransaction(txRequest);return addContractWait(contract,tx),tx}))}}function buildDefault(contract,fragment,collapseSimple){return fragment.constant?buildCall(contract,fragment,collapseSimple):buildSend(contract,fragment)}function getEventTag(filter){return!filter.address||null!=filter.topics&&0!==filter.topics.length?(filter.address||"*")+"@"+(filter.topics?filter.topics.map((topic=>Array.isArray(topic)?topic.join("|"):topic)).join(":"):""):"*"}class RunningEvent{constructor(tag,filter){defineReadOnly(this,"tag",tag),defineReadOnly(this,"filter",filter),this._listeners=[]}addListener(listener,once){this._listeners.push({listener:listener,once:once})}removeListener(listener){let done=!1;this._listeners=this._listeners.filter((item=>!(!done&&item.listener===listener)||(done=!0,!1)))}removeAllListeners(){this._listeners=[]}listeners(){return this._listeners.map((i=>i.listener))}listenerCount(){return this._listeners.length}run(args){const listenerCount=this.listenerCount();return this._listeners=this._listeners.filter((item=>{const argsCopy=args.slice();return setTimeout((()=>{item.listener.apply(this,argsCopy)}),0),!item.once})),listenerCount}prepareEvent(event){}getEmit(event){return[event]}}class ErrorRunningEvent extends RunningEvent{constructor(){super("error",null)}}class FragmentRunningEvent extends RunningEvent{constructor(address,contractInterface,fragment,topics){const filter={address:address};let topic=contractInterface.getEventTopic(fragment);topics?(topic!==topics[0]&&logger.throwArgumentError("topic mismatch","topics",topics),filter.topics=topics.slice()):filter.topics=[topic],super(getEventTag(filter),filter),defineReadOnly(this,"address",address),defineReadOnly(this,"interface",contractInterface),defineReadOnly(this,"fragment",fragment)}prepareEvent(event){super.prepareEvent(event),event.event=this.fragment.name,event.eventSignature=this.fragment.format(),event.decode=(data,topics)=>this.interface.decodeEventLog(this.fragment,data,topics);try{event.args=this.interface.decodeEventLog(this.fragment,event.data,event.topics)}catch(error){event.args=null,event.decodeError=error}}getEmit(event){const errors=checkResultErrors(event.args);if(errors.length)throw errors[0].error;const args=(event.args||[]).slice();return args.push(event),args}}class WildcardRunningEvent extends RunningEvent{constructor(address,contractInterface){super("*",{address:address}),defineReadOnly(this,"address",address),defineReadOnly(this,"interface",contractInterface)}prepareEvent(event){super.prepareEvent(event);try{const parsed=this.interface.parseLog(event);event.event=parsed.name,event.eventSignature=parsed.signature,event.decode=(data,topics)=>this.interface.decodeEventLog(parsed.eventFragment,data,topics),event.args=parsed.args}catch(error){}}}export class BaseContract{constructor(addressOrName,contractInterface,signerOrProvider){defineReadOnly(this,"interface",getStatic(new.target,"getInterface")(contractInterface)),null==signerOrProvider?(defineReadOnly(this,"provider",null),defineReadOnly(this,"signer",null)):Signer.isSigner(signerOrProvider)?(defineReadOnly(this,"provider",signerOrProvider.provider||null),defineReadOnly(this,"signer",signerOrProvider)):Provider.isProvider(signerOrProvider)?(defineReadOnly(this,"provider",signerOrProvider),defineReadOnly(this,"signer",null)):logger.throwArgumentError("invalid signer or provider","signerOrProvider",signerOrProvider),defineReadOnly(this,"callStatic",{}),defineReadOnly(this,"estimateGas",{}),defineReadOnly(this,"functions",{}),defineReadOnly(this,"populateTransaction",{}),defineReadOnly(this,"filters",{});{const uniqueFilters={};Object.keys(this.interface.events).forEach((eventSignature=>{const event=this.interface.events[eventSignature];defineReadOnly(this.filters,eventSignature,((...args)=>({address:this.address,topics:this.interface.encodeFilterTopics(event,args)}))),uniqueFilters[event.name]||(uniqueFilters[event.name]=[]),uniqueFilters[event.name].push(eventSignature)})),Object.keys(uniqueFilters).forEach((name=>{const filters=uniqueFilters[name];1===filters.length?defineReadOnly(this.filters,name,this.filters[filters[0]]):logger.warn(`Duplicate definition of ${name} (${filters.join(", ")})`)}))}if(defineReadOnly(this,"_runningEvents",{}),defineReadOnly(this,"_wrappedEmits",{}),null==addressOrName&&logger.throwArgumentError("invalid contract address or ENS name","addressOrName",addressOrName),defineReadOnly(this,"address",addressOrName),this.provider)defineReadOnly(this,"resolvedAddress",resolveName(this.provider,addressOrName));else try{defineReadOnly(this,"resolvedAddress",Promise.resolve(getAddress(addressOrName)))}catch(error){logger.throwError("provider is required to use ENS name as contract address",Logger.errors.UNSUPPORTED_OPERATION,{operation:"new Contract"})}this.resolvedAddress.catch((e=>{}));const uniqueNames={},uniqueSignatures={};Object.keys(this.interface.functions).forEach((signature=>{const fragment=this.interface.functions[signature];if(uniqueSignatures[signature])logger.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);else{uniqueSignatures[signature]=!0;{const name=fragment.name;uniqueNames[`%${name}`]||(uniqueNames[`%${name}`]=[]),uniqueNames[`%${name}`].push(signature)}null==this[signature]&&defineReadOnly(this,signature,buildDefault(this,fragment,!0)),null==this.functions[signature]&&defineReadOnly(this.functions,signature,buildDefault(this,fragment,!1)),null==this.callStatic[signature]&&defineReadOnly(this.callStatic,signature,buildCall(this,fragment,!0)),null==this.populateTransaction[signature]&&defineReadOnly(this.populateTransaction,signature,buildPopulate(this,fragment)),null==this.estimateGas[signature]&&defineReadOnly(this.estimateGas,signature,buildEstimate(this,fragment))}})),Object.keys(uniqueNames).forEach((name=>{const signatures=uniqueNames[name];if(signatures.length>1)return;name=name.substring(1);const signature=signatures[0];try{null==this[name]&&defineReadOnly(this,name,this[signature])}catch(e){}null==this.functions[name]&&defineReadOnly(this.functions,name,this.functions[signature]),null==this.callStatic[name]&&defineReadOnly(this.callStatic,name,this.callStatic[signature]),null==this.populateTransaction[name]&&defineReadOnly(this.populateTransaction,name,this.populateTransaction[signature]),null==this.estimateGas[name]&&defineReadOnly(this.estimateGas,name,this.estimateGas[signature])}))}static getContractAddress(transaction){return getContractAddress(transaction)}static getInterface(contractInterface){return Interface.isInterface(contractInterface)?contractInterface:new Interface(contractInterface)}deployed(){return this._deployed()}_deployed(blockTag){return this._deployedPromise||(this.deployTransaction?this._deployedPromise=this.deployTransaction.wait().then((()=>this)):this._deployedPromise=this.provider.getCode(this.address,blockTag).then((code=>("0x"===code&&logger.throwError("contract not deployed",Logger.errors.UNSUPPORTED_OPERATION,{contractAddress:this.address,operation:"getDeployed"}),this)))),this._deployedPromise}fallback(overrides){this.signer||logger.throwError("sending a transactions require a signer",Logger.errors.UNSUPPORTED_OPERATION,{operation:"sendTransaction(fallback)"});const tx=shallowCopy(overrides||{});return["from","to"].forEach((function(key){null!=tx[key]&&logger.throwError("cannot override "+key,Logger.errors.UNSUPPORTED_OPERATION,{operation:key})})),tx.to=this.resolvedAddress,this.deployed().then((()=>this.signer.sendTransaction(tx)))}connect(signerOrProvider){"string"==typeof signerOrProvider&&(signerOrProvider=new VoidSigner(signerOrProvider,this.provider));const contract=new this.constructor(this.address,this.interface,signerOrProvider);return this.deployTransaction&&defineReadOnly(contract,"deployTransaction",this.deployTransaction),contract}attach(addressOrName){return new this.constructor(addressOrName,this.interface,this.signer||this.provider)}static isIndexed(value){return Indexed.isIndexed(value)}_normalizeRunningEvent(runningEvent){return this._runningEvents[runningEvent.tag]?this._runningEvents[runningEvent.tag]:runningEvent}_getRunningEvent(eventName){if("string"==typeof eventName){if("error"===eventName)return this._normalizeRunningEvent(new ErrorRunningEvent);if("event"===eventName)return this._normalizeRunningEvent(new RunningEvent("event",null));if("*"===eventName)return this._normalizeRunningEvent(new WildcardRunningEvent(this.address,this.interface));const fragment=this.interface.getEvent(eventName);return this._normalizeRunningEvent(new FragmentRunningEvent(this.address,this.interface,fragment))}if(eventName.topics&&eventName.topics.length>0){try{const topic=eventName.topics[0];if("string"!=typeof topic)throw new Error("invalid topic");const fragment=this.interface.getEvent(topic);return this._normalizeRunningEvent(new FragmentRunningEvent(this.address,this.interface,fragment,eventName.topics))}catch(error){}const filter={address:this.address,topics:eventName.topics};return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter),filter))}return this._normalizeRunningEvent(new WildcardRunningEvent(this.address,this.interface))}_checkRunningEvents(runningEvent){if(0===runningEvent.listenerCount()){delete this._runningEvents[runningEvent.tag];const emit=this._wrappedEmits[runningEvent.tag];emit&&runningEvent.filter&&(this.provider.off(runningEvent.filter,emit),delete this._wrappedEmits[runningEvent.tag])}}_wrapEvent(runningEvent,log,listener){const event=deepCopy(log);return event.removeListener=()=>{listener&&(runningEvent.removeListener(listener),this._checkRunningEvents(runningEvent))},event.getBlock=()=>this.provider.getBlock(log.blockHash),event.getTransaction=()=>this.provider.getTransaction(log.transactionHash),event.getTransactionReceipt=()=>this.provider.getTransactionReceipt(log.transactionHash),runningEvent.prepareEvent(event),event}_addEventListener(runningEvent,listener,once){if(this.provider||logger.throwError("events require a provider or a signer with a provider",Logger.errors.UNSUPPORTED_OPERATION,{operation:"once"}),runningEvent.addListener(listener,once),this._runningEvents[runningEvent.tag]=runningEvent,!this._wrappedEmits[runningEvent.tag]){const wrappedEmit=log=>{let event=this._wrapEvent(runningEvent,log,listener);if(null==event.decodeError)try{const args=runningEvent.getEmit(event);this.emit(runningEvent.filter,...args)}catch(error){event.decodeError=error.error}null!=runningEvent.filter&&this.emit("event",event),null!=event.decodeError&&this.emit("error",event.decodeError,event)};this._wrappedEmits[runningEvent.tag]=wrappedEmit,null!=runningEvent.filter&&this.provider.on(runningEvent.filter,wrappedEmit)}}queryFilter(event,fromBlockOrBlockhash,toBlock){const runningEvent=this._getRunningEvent(event),filter=shallowCopy(runningEvent.filter);return"string"==typeof fromBlockOrBlockhash&&isHexString(fromBlockOrBlockhash,32)?(null!=toBlock&&logger.throwArgumentError("cannot specify toBlock with blockhash","toBlock",toBlock),filter.blockHash=fromBlockOrBlockhash):(filter.fromBlock=null!=fromBlockOrBlockhash?fromBlockOrBlockhash:0,filter.toBlock=null!=toBlock?toBlock:"latest"),this.provider.getLogs(filter).then((logs=>logs.map((log=>this._wrapEvent(runningEvent,log,null)))))}on(event,listener){return this._addEventListener(this._getRunningEvent(event),listener,!1),this}once(event,listener){return this._addEventListener(this._getRunningEvent(event),listener,!0),this}emit(eventName,...args){if(!this.provider)return!1;const runningEvent=this._getRunningEvent(eventName),result=runningEvent.run(args)>0;return this._checkRunningEvents(runningEvent),result}listenerCount(eventName){return this.provider?null==eventName?Object.keys(this._runningEvents).reduce(((accum,key)=>accum+this._runningEvents[key].listenerCount()),0):this._getRunningEvent(eventName).listenerCount():0}listeners(eventName){if(!this.provider)return[];if(null==eventName){const result=[];for(let tag in this._runningEvents)this._runningEvents[tag].listeners().forEach((listener=>{result.push(listener)}));return result}return this._getRunningEvent(eventName).listeners()}removeAllListeners(eventName){if(!this.provider)return this;if(null==eventName){for(const tag in this._runningEvents){const runningEvent=this._runningEvents[tag];runningEvent.removeAllListeners(),this._checkRunningEvents(runningEvent)}return this}const runningEvent=this._getRunningEvent(eventName);return runningEvent.removeAllListeners(),this._checkRunningEvents(runningEvent),this}off(eventName,listener){if(!this.provider)return this;const runningEvent=this._getRunningEvent(eventName);return runningEvent.removeListener(listener),this._checkRunningEvents(runningEvent),this}removeListener(eventName,listener){return this.off(eventName,listener)}}export class Contract extends BaseContract{}export class ContractFactory{constructor(contractInterface,bytecode,signer){let bytecodeHex=null;bytecodeHex="string"==typeof bytecode?bytecode:isBytes(bytecode)?hexlify(bytecode):bytecode&&"string"==typeof bytecode.object?bytecode.object:"!","0x"!==bytecodeHex.substring(0,2)&&(bytecodeHex="0x"+bytecodeHex),(!isHexString(bytecodeHex)||bytecodeHex.length%2)&&logger.throwArgumentError("invalid bytecode","bytecode",bytecode),signer&&!Signer.isSigner(signer)&&logger.throwArgumentError("invalid signer","signer",signer),defineReadOnly(this,"bytecode",bytecodeHex),defineReadOnly(this,"interface",getStatic(new.target,"getInterface")(contractInterface)),defineReadOnly(this,"signer",signer||null)}getDeployTransaction(...args){let tx={};if(args.length===this.interface.deploy.inputs.length+1&&"object"==typeof args[args.length-1]){tx=shallowCopy(args.pop());for(const key in tx)if(!allowedTransactionKeys[key])throw new Error("unknown transaction override "+key)}if(["data","from","to"].forEach((key=>{null!=tx[key]&&logger.throwError("cannot override "+key,Logger.errors.UNSUPPORTED_OPERATION,{operation:key})})),tx.value){BigNumber.from(tx.value).isZero()||this.interface.deploy.payable||logger.throwError("non-payable constructor cannot override value",Logger.errors.UNSUPPORTED_OPERATION,{operation:"overrides.value",value:tx.value})}return logger.checkArgumentCount(args.length,this.interface.deploy.inputs.length," in Contract constructor"),tx.data=hexlify(concat([this.bytecode,this.interface.encodeDeploy(args)])),tx}deploy(...args){return __awaiter(this,void 0,void 0,(function*(){let overrides={};args.length===this.interface.deploy.inputs.length+1&&(overrides=args.pop()),logger.checkArgumentCount(args.length,this.interface.deploy.inputs.length," in Contract constructor");const params=yield resolveAddresses(this.signer,args,this.interface.deploy.inputs);params.push(overrides);const unsignedTx=this.getDeployTransaction(...params),tx=yield this.signer.sendTransaction(unsignedTx),address=getStatic(this.constructor,"getContractAddress")(tx),contract=getStatic(this.constructor,"getContract")(address,this.interface,this.signer);return addContractWait(contract,tx),defineReadOnly(contract,"deployTransaction",tx),contract}))}attach(address){return this.constructor.getContract(address,this.interface,this.signer)}connect(signer){return new this.constructor(this.interface,this.bytecode,signer)}static fromSolidity(compilerOutput,signer){null==compilerOutput&&logger.throwError("missing compiler output",Logger.errors.MISSING_ARGUMENT,{argument:"compilerOutput"}),"string"==typeof compilerOutput&&(compilerOutput=JSON.parse(compilerOutput));const abi=compilerOutput.abi;let bytecode=null;return compilerOutput.bytecode?bytecode=compilerOutput.bytecode:compilerOutput.evm&&compilerOutput.evm.bytecode&&(bytecode=compilerOutput.evm.bytecode),new this(abi,bytecode,signer)}static getInterface(contractInterface){return Contract.getInterface(contractInterface)}static getContractAddress(tx){return getContractAddress(tx)}static getContract(address,contractInterface,signer){return new Contract(address,contractInterface,signer)}}