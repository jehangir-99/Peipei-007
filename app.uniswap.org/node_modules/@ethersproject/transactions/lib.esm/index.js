"use strict";import{getAddress}from"@ethersproject/address";import{BigNumber}from"@ethersproject/bignumber";import{arrayify,hexConcat,hexDataLength,hexDataSlice,hexlify,hexZeroPad,isBytesLike,splitSignature,stripZeros}from"@ethersproject/bytes";import{Zero}from"@ethersproject/constants";import{keccak256}from"@ethersproject/keccak256";import{checkProperties}from"@ethersproject/properties";import*as RLP from"@ethersproject/rlp";import{computePublicKey,recoverPublicKey}from"@ethersproject/signing-key";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version);export var TransactionTypes;function handleAddress(value){return"0x"===value?null:getAddress(value)}function handleNumber(value){return"0x"===value?Zero:BigNumber.from(value)}!function(TransactionTypes){TransactionTypes[TransactionTypes.legacy=0]="legacy",TransactionTypes[TransactionTypes.eip2930=1]="eip2930",TransactionTypes[TransactionTypes.eip1559=2]="eip1559"}(TransactionTypes||(TransactionTypes={}));const transactionFields=[{name:"nonce",maxLength:32,numeric:!0},{name:"gasPrice",maxLength:32,numeric:!0},{name:"gasLimit",maxLength:32,numeric:!0},{name:"to",length:20},{name:"value",maxLength:32,numeric:!0},{name:"data"}],allowedTransactionKeys={chainId:!0,data:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,type:!0,value:!0};export function computeAddress(key){const publicKey=computePublicKey(key);return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey,1)),12))}export function recoverAddress(digest,signature){return computeAddress(recoverPublicKey(arrayify(digest),signature))}function formatNumber(value,name){const result=stripZeros(BigNumber.from(value).toHexString());return result.length>32&&logger.throwArgumentError("invalid length for "+name,"transaction:"+name,value),result}function accessSetify(addr,storageKeys){return{address:getAddress(addr),storageKeys:(storageKeys||[]).map(((storageKey,index)=>(32!==hexDataLength(storageKey)&&logger.throwArgumentError("invalid access list storageKey",`accessList[${addr}:${index}]`,storageKey),storageKey.toLowerCase())))}}export function accessListify(value){if(Array.isArray(value))return value.map(((set,index)=>Array.isArray(set)?(set.length>2&&logger.throwArgumentError("access list expected to be [ address, storageKeys[] ]",`value[${index}]`,set),accessSetify(set[0],set[1])):accessSetify(set.address,set.storageKeys)));const result=Object.keys(value).map((addr=>{const storageKeys=value[addr].reduce(((accum,storageKey)=>(accum[storageKey]=!0,accum)),{});return accessSetify(addr,Object.keys(storageKeys).sort())}));return result.sort(((a,b)=>a.address.localeCompare(b.address))),result}function formatAccessList(value){return accessListify(value).map((set=>[set.address,set.storageKeys]))}function _serializeEip1559(transaction,signature){if(null!=transaction.gasPrice){const gasPrice=BigNumber.from(transaction.gasPrice),maxFeePerGas=BigNumber.from(transaction.maxFeePerGas||0);gasPrice.eq(maxFeePerGas)||logger.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas","tx",{gasPrice:gasPrice,maxFeePerGas:maxFeePerGas})}const fields=[formatNumber(transaction.chainId||0,"chainId"),formatNumber(transaction.nonce||0,"nonce"),formatNumber(transaction.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),formatNumber(transaction.maxFeePerGas||0,"maxFeePerGas"),formatNumber(transaction.gasLimit||0,"gasLimit"),null!=transaction.to?getAddress(transaction.to):"0x",formatNumber(transaction.value||0,"value"),transaction.data||"0x",formatAccessList(transaction.accessList||[])];if(signature){const sig=splitSignature(signature);fields.push(formatNumber(sig.recoveryParam,"recoveryParam")),fields.push(stripZeros(sig.r)),fields.push(stripZeros(sig.s))}return hexConcat(["0x02",RLP.encode(fields)])}function _serializeEip2930(transaction,signature){const fields=[formatNumber(transaction.chainId||0,"chainId"),formatNumber(transaction.nonce||0,"nonce"),formatNumber(transaction.gasPrice||0,"gasPrice"),formatNumber(transaction.gasLimit||0,"gasLimit"),null!=transaction.to?getAddress(transaction.to):"0x",formatNumber(transaction.value||0,"value"),transaction.data||"0x",formatAccessList(transaction.accessList||[])];if(signature){const sig=splitSignature(signature);fields.push(formatNumber(sig.recoveryParam,"recoveryParam")),fields.push(stripZeros(sig.r)),fields.push(stripZeros(sig.s))}return hexConcat(["0x01",RLP.encode(fields)])}function _serialize(transaction,signature){checkProperties(transaction,allowedTransactionKeys);const raw=[];transactionFields.forEach((function(fieldInfo){let value=transaction[fieldInfo.name]||[];const options={};fieldInfo.numeric&&(options.hexPad="left"),value=arrayify(hexlify(value,options)),fieldInfo.length&&value.length!==fieldInfo.length&&value.length>0&&logger.throwArgumentError("invalid length for "+fieldInfo.name,"transaction:"+fieldInfo.name,value),fieldInfo.maxLength&&(value=stripZeros(value),value.length>fieldInfo.maxLength&&logger.throwArgumentError("invalid length for "+fieldInfo.name,"transaction:"+fieldInfo.name,value)),raw.push(hexlify(value))}));let chainId=0;if(null!=transaction.chainId?(chainId=transaction.chainId,"number"!=typeof chainId&&logger.throwArgumentError("invalid transaction.chainId","transaction",transaction)):signature&&!isBytesLike(signature)&&signature.v>28&&(chainId=Math.floor((signature.v-35)/2)),0!==chainId&&(raw.push(hexlify(chainId)),raw.push("0x"),raw.push("0x")),!signature)return RLP.encode(raw);const sig=splitSignature(signature);let v=27+sig.recoveryParam;return 0!==chainId?(raw.pop(),raw.pop(),raw.pop(),v+=2*chainId+8,sig.v>28&&sig.v!==v&&logger.throwArgumentError("transaction.chainId/signature.v mismatch","signature",signature)):sig.v!==v&&logger.throwArgumentError("transaction.chainId/signature.v mismatch","signature",signature),raw.push(hexlify(v)),raw.push(stripZeros(arrayify(sig.r))),raw.push(stripZeros(arrayify(sig.s))),RLP.encode(raw)}export function serialize(transaction,signature){if(null==transaction.type||0===transaction.type)return null!=transaction.accessList&&logger.throwArgumentError("untyped transactions do not support accessList; include type: 1","transaction",transaction),_serialize(transaction,signature);switch(transaction.type){case 1:return _serializeEip2930(transaction,signature);case 2:return _serializeEip1559(transaction,signature)}return logger.throwError(`unsupported transaction type: ${transaction.type}`,Logger.errors.UNSUPPORTED_OPERATION,{operation:"serializeTransaction",transactionType:transaction.type})}function _parseEipSignature(tx,fields,serialize){try{const recid=handleNumber(fields[0]).toNumber();if(0!==recid&&1!==recid)throw new Error("bad recid");tx.v=recid}catch(error){logger.throwArgumentError("invalid v for transaction type: 1","v",fields[0])}tx.r=hexZeroPad(fields[1],32),tx.s=hexZeroPad(fields[2],32);try{const digest=keccak256(serialize(tx));tx.from=recoverAddress(digest,{r:tx.r,s:tx.s,recoveryParam:tx.v})}catch(error){}}function _parseEip1559(payload){const transaction=RLP.decode(payload.slice(1));9!==transaction.length&&12!==transaction.length&&logger.throwArgumentError("invalid component count for transaction type: 2","payload",hexlify(payload));const maxPriorityFeePerGas=handleNumber(transaction[2]),maxFeePerGas=handleNumber(transaction[3]),tx={type:2,chainId:handleNumber(transaction[0]).toNumber(),nonce:handleNumber(transaction[1]).toNumber(),maxPriorityFeePerGas:maxPriorityFeePerGas,maxFeePerGas:maxFeePerGas,gasPrice:null,gasLimit:handleNumber(transaction[4]),to:handleAddress(transaction[5]),value:handleNumber(transaction[6]),data:transaction[7],accessList:accessListify(transaction[8])};return 9===transaction.length||(tx.hash=keccak256(payload),_parseEipSignature(tx,transaction.slice(9),_serializeEip1559)),tx}function _parseEip2930(payload){const transaction=RLP.decode(payload.slice(1));8!==transaction.length&&11!==transaction.length&&logger.throwArgumentError("invalid component count for transaction type: 1","payload",hexlify(payload));const tx={type:1,chainId:handleNumber(transaction[0]).toNumber(),nonce:handleNumber(transaction[1]).toNumber(),gasPrice:handleNumber(transaction[2]),gasLimit:handleNumber(transaction[3]),to:handleAddress(transaction[4]),value:handleNumber(transaction[5]),data:transaction[6],accessList:accessListify(transaction[7])};return 8===transaction.length||(tx.hash=keccak256(payload),_parseEipSignature(tx,transaction.slice(8),_serializeEip2930)),tx}function _parse(rawTransaction){const transaction=RLP.decode(rawTransaction);9!==transaction.length&&6!==transaction.length&&logger.throwArgumentError("invalid raw transaction","rawTransaction",rawTransaction);const tx={nonce:handleNumber(transaction[0]).toNumber(),gasPrice:handleNumber(transaction[1]),gasLimit:handleNumber(transaction[2]),to:handleAddress(transaction[3]),value:handleNumber(transaction[4]),data:transaction[5],chainId:0};if(6===transaction.length)return tx;try{tx.v=BigNumber.from(transaction[6]).toNumber()}catch(error){return tx}if(tx.r=hexZeroPad(transaction[7],32),tx.s=hexZeroPad(transaction[8],32),BigNumber.from(tx.r).isZero()&&BigNumber.from(tx.s).isZero())tx.chainId=tx.v,tx.v=0;else{tx.chainId=Math.floor((tx.v-35)/2),tx.chainId<0&&(tx.chainId=0);let recoveryParam=tx.v-27;const raw=transaction.slice(0,6);0!==tx.chainId&&(raw.push(hexlify(tx.chainId)),raw.push("0x"),raw.push("0x"),recoveryParam-=2*tx.chainId+8);const digest=keccak256(RLP.encode(raw));try{tx.from=recoverAddress(digest,{r:hexlify(tx.r),s:hexlify(tx.s),recoveryParam:recoveryParam})}catch(error){}tx.hash=keccak256(rawTransaction)}return tx.type=null,tx}export function parse(rawTransaction){const payload=arrayify(rawTransaction);if(payload[0]>127)return _parse(payload);switch(payload[0]){case 1:return _parseEip2930(payload);case 2:return _parseEip1559(payload)}return logger.throwError(`unsupported transaction type: ${payload[0]}`,Logger.errors.UNSUPPORTED_OPERATION,{operation:"parseTransaction",transactionType:payload[0]})}