"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P((function(resolve){resolve(value)}))).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};import aes from"aes-js";import scrypt from"scrypt-js";import{getAddress}from"@ethersproject/address";import{arrayify,concat,hexlify}from"@ethersproject/bytes";import{defaultPath,entropyToMnemonic,HDNode,mnemonicToEntropy}from"@ethersproject/hdnode";import{keccak256}from"@ethersproject/keccak256";import{pbkdf2 as _pbkdf2}from"@ethersproject/pbkdf2";import{randomBytes}from"@ethersproject/random";import{Description}from"@ethersproject/properties";import{computeAddress}from"@ethersproject/transactions";import{getPassword,looseArrayify,searchPath,uuidV4,zpad}from"./utils";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version);function hasMnemonic(value){return null!=value&&value.mnemonic&&value.mnemonic.phrase}export class KeystoreAccount extends Description{isKeystoreAccount(value){return!(!value||!value._isKeystoreAccount)}}function _decrypt(data,key,ciphertext){if("aes-128-ctr"===searchPath(data,"crypto/cipher")){const iv=looseArrayify(searchPath(data,"crypto/cipherparams/iv")),counter=new aes.Counter(iv),aesCtr=new aes.ModeOfOperation.ctr(key,counter);return arrayify(aesCtr.decrypt(ciphertext))}return null}function _getAccount(data,key){const ciphertext=looseArrayify(searchPath(data,"crypto/ciphertext"));if(hexlify(keccak256(concat([key.slice(16,32),ciphertext]))).substring(2)!==searchPath(data,"crypto/mac").toLowerCase())throw new Error("invalid password");const privateKey=_decrypt(data,key.slice(0,16),ciphertext);privateKey||logger.throwError("unsupported cipher",Logger.errors.UNSUPPORTED_OPERATION,{operation:"decrypt"});const mnemonicKey=key.slice(32,64),address=computeAddress(privateKey);if(data.address){let check=data.address.toLowerCase();if("0x"!==check.substring(0,2)&&(check="0x"+check),getAddress(check)!==address)throw new Error("address mismatch")}const account={_isKeystoreAccount:!0,address:address,privateKey:hexlify(privateKey)};if("0.1"===searchPath(data,"x-ethers/version")){const mnemonicCiphertext=looseArrayify(searchPath(data,"x-ethers/mnemonicCiphertext")),mnemonicIv=looseArrayify(searchPath(data,"x-ethers/mnemonicCounter")),mnemonicCounter=new aes.Counter(mnemonicIv),mnemonicAesCtr=new aes.ModeOfOperation.ctr(mnemonicKey,mnemonicCounter),path=searchPath(data,"x-ethers/path")||defaultPath,locale=searchPath(data,"x-ethers/locale")||"en",entropy=arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));try{const mnemonic=entropyToMnemonic(entropy,locale),node=HDNode.fromMnemonic(mnemonic,null,locale).derivePath(path);if(node.privateKey!=account.privateKey)throw new Error("mnemonic mismatch");account.mnemonic=node.mnemonic}catch(error){if(error.code!==Logger.errors.INVALID_ARGUMENT||"wordlist"!==error.argument)throw error}}return new KeystoreAccount(account)}function pbkdf2Sync(passwordBytes,salt,count,dkLen,prfFunc){return arrayify(_pbkdf2(passwordBytes,salt,count,dkLen,prfFunc))}function pbkdf2(passwordBytes,salt,count,dkLen,prfFunc){return Promise.resolve(pbkdf2Sync(passwordBytes,salt,count,dkLen,prfFunc))}function _computeKdfKey(data,password,pbkdf2Func,scryptFunc,progressCallback){const passwordBytes=getPassword(password),kdf=searchPath(data,"crypto/kdf");if(kdf&&"string"==typeof kdf){const throwError=function(name,value){return logger.throwArgumentError("invalid key-derivation function parameters",name,value)};if("scrypt"===kdf.toLowerCase()){const salt=looseArrayify(searchPath(data,"crypto/kdfparams/salt")),N=parseInt(searchPath(data,"crypto/kdfparams/n")),r=parseInt(searchPath(data,"crypto/kdfparams/r")),p=parseInt(searchPath(data,"crypto/kdfparams/p"));N&&r&&p||throwError("kdf",kdf),0!=(N&N-1)&&throwError("N",N);const dkLen=parseInt(searchPath(data,"crypto/kdfparams/dklen"));return 32!==dkLen&&throwError("dklen",dkLen),scryptFunc(passwordBytes,salt,N,r,p,64,progressCallback)}if("pbkdf2"===kdf.toLowerCase()){const salt=looseArrayify(searchPath(data,"crypto/kdfparams/salt"));let prfFunc=null;const prf=searchPath(data,"crypto/kdfparams/prf");"hmac-sha256"===prf?prfFunc="sha256":"hmac-sha512"===prf?prfFunc="sha512":throwError("prf",prf);const count=parseInt(searchPath(data,"crypto/kdfparams/c")),dkLen=parseInt(searchPath(data,"crypto/kdfparams/dklen"));return 32!==dkLen&&throwError("dklen",dkLen),pbkdf2Func(passwordBytes,salt,count,dkLen,prfFunc)}}return logger.throwArgumentError("unsupported key-derivation function","kdf",kdf)}export function decryptSync(json,password){const data=JSON.parse(json);return _getAccount(data,_computeKdfKey(data,password,pbkdf2Sync,scrypt.syncScrypt))}export function decrypt(json,password,progressCallback){return __awaiter(this,void 0,void 0,(function*(){const data=JSON.parse(json);return _getAccount(data,yield _computeKdfKey(data,password,pbkdf2,scrypt.scrypt,progressCallback))}))}export function encrypt(account,password,options,progressCallback){try{if(getAddress(account.address)!==computeAddress(account.privateKey))throw new Error("address/privateKey mismatch");if(hasMnemonic(account)){const mnemonic=account.mnemonic;if(HDNode.fromMnemonic(mnemonic.phrase,null,mnemonic.locale).derivePath(mnemonic.path||defaultPath).privateKey!=account.privateKey)throw new Error("mnemonic mismatch")}}catch(e){return Promise.reject(e)}"function"!=typeof options||progressCallback||(progressCallback=options,options={}),options||(options={});const privateKey=arrayify(account.privateKey),passwordBytes=getPassword(password);let entropy=null,path=null,locale=null;if(hasMnemonic(account)){const srcMnemonic=account.mnemonic;entropy=arrayify(mnemonicToEntropy(srcMnemonic.phrase,srcMnemonic.locale||"en")),path=srcMnemonic.path||defaultPath,locale=srcMnemonic.locale||"en"}let client=options.client;client||(client="ethers.js");let salt=null;salt=options.salt?arrayify(options.salt):randomBytes(32);let iv=null;if(options.iv){if(iv=arrayify(options.iv),16!==iv.length)throw new Error("invalid iv")}else iv=randomBytes(16);let uuidRandom=null;if(options.uuid){if(uuidRandom=arrayify(options.uuid),16!==uuidRandom.length)throw new Error("invalid uuid")}else uuidRandom=randomBytes(16);let N=1<<17,r=8,p=1;return options.scrypt&&(options.scrypt.N&&(N=options.scrypt.N),options.scrypt.r&&(r=options.scrypt.r),options.scrypt.p&&(p=options.scrypt.p)),scrypt.scrypt(passwordBytes,salt,N,r,p,64,progressCallback).then((key=>{const derivedKey=(key=arrayify(key)).slice(0,16),macPrefix=key.slice(16,32),mnemonicKey=key.slice(32,64),counter=new aes.Counter(iv),aesCtr=new aes.ModeOfOperation.ctr(derivedKey,counter),ciphertext=arrayify(aesCtr.encrypt(privateKey)),mac=keccak256(concat([macPrefix,ciphertext])),data={address:account.address.substring(2).toLowerCase(),id:uuidV4(uuidRandom),version:3,crypto:{cipher:"aes-128-ctr",cipherparams:{iv:hexlify(iv).substring(2)},ciphertext:hexlify(ciphertext).substring(2),kdf:"scrypt",kdfparams:{salt:hexlify(salt).substring(2),n:N,dklen:32,p:p,r:r},mac:mac.substring(2)}};if(entropy){const mnemonicIv=randomBytes(16),mnemonicCounter=new aes.Counter(mnemonicIv),mnemonicAesCtr=new aes.ModeOfOperation.ctr(mnemonicKey,mnemonicCounter),mnemonicCiphertext=arrayify(mnemonicAesCtr.encrypt(entropy)),now=new Date,timestamp=now.getUTCFullYear()+"-"+zpad(now.getUTCMonth()+1,2)+"-"+zpad(now.getUTCDate(),2)+"T"+zpad(now.getUTCHours(),2)+"-"+zpad(now.getUTCMinutes(),2)+"-"+zpad(now.getUTCSeconds(),2)+".0Z";data["x-ethers"]={client:client,gethFilename:"UTC--"+timestamp+"--"+data.address,mnemonicCounter:hexlify(mnemonicIv).substring(2),mnemonicCiphertext:hexlify(mnemonicCiphertext).substring(2),path:path,locale:locale,version:"0.1"}}return JSON.stringify(data)}))}