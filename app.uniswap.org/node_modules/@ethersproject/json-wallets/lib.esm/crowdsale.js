"use strict";import aes from"aes-js";import{getAddress}from"@ethersproject/address";import{arrayify}from"@ethersproject/bytes";import{keccak256}from"@ethersproject/keccak256";import{pbkdf2}from"@ethersproject/pbkdf2";import{toUtf8Bytes}from"@ethersproject/strings";import{Description}from"@ethersproject/properties";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version);import{getPassword,looseArrayify,searchPath}from"./utils";export class CrowdsaleAccount extends Description{isCrowdsaleAccount(value){return!(!value||!value._isCrowdsaleAccount)}}export function decrypt(json,password){const data=JSON.parse(json);password=getPassword(password);const ethaddr=getAddress(searchPath(data,"ethaddr")),encseed=looseArrayify(searchPath(data,"encseed"));encseed&&encseed.length%16==0||logger.throwArgumentError("invalid encseed","json",json);const key=arrayify(pbkdf2(password,password,2e3,32,"sha256")).slice(0,16),iv=encseed.slice(0,16),encryptedSeed=encseed.slice(16),aesCbc=new aes.ModeOfOperation.cbc(key,iv),seed=aes.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));let seedHex="";for(let i=0;i<seed.length;i++)seedHex+=String.fromCharCode(seed[i]);const seedHexBytes=toUtf8Bytes(seedHex),privateKey=keccak256(seedHexBytes);return new CrowdsaleAccount({_isCrowdsaleAccount:!0,address:ethaddr,privateKey:privateKey})}