var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P((function(resolve){resolve(value)}))).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};import{getAddress}from"@ethersproject/address";import{BigNumber}from"@ethersproject/bignumber";import{arrayify,hexConcat,hexlify,hexZeroPad,isHexString}from"@ethersproject/bytes";import{keccak256}from"@ethersproject/keccak256";import{deepCopy,defineReadOnly,shallowCopy}from"@ethersproject/properties";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version);import{id}from"./id";const padding=new Uint8Array(32);padding.fill(0);const NegativeOne=BigNumber.from(-1),Zero=BigNumber.from(0),One=BigNumber.from(1),MaxUint256=BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");function hexPadRight(value){const bytes=arrayify(value),padOffset=bytes.length%32;return padOffset?hexConcat([bytes,padding.slice(padOffset)]):hexlify(bytes)}const hexTrue=hexZeroPad(One.toHexString(),32),hexFalse=hexZeroPad(Zero.toHexString(),32),domainFieldTypes={name:"string",version:"string",chainId:"uint256",verifyingContract:"address",salt:"bytes32"},domainFieldNames=["name","version","chainId","verifyingContract","salt"];function checkString(key){return function(value){return"string"!=typeof value&&logger.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`,`domain.${key}`,value),value}}const domainChecks={name:checkString("name"),version:checkString("version"),chainId:function(value){try{return BigNumber.from(value).toString()}catch(error){}return logger.throwArgumentError('invalid domain value for "chainId"',"domain.chainId",value)},verifyingContract:function(value){try{return getAddress(value).toLowerCase()}catch(error){}return logger.throwArgumentError('invalid domain value "verifyingContract"',"domain.verifyingContract",value)},salt:function(value){try{const bytes=arrayify(value);if(32!==bytes.length)throw new Error("bad length");return hexlify(bytes)}catch(error){}return logger.throwArgumentError('invalid domain value "salt"',"domain.salt",value)}};function getBaseEncoder(type){{const match=type.match(/^(u?)int(\d*)$/);if(match){const signed=""===match[1],width=parseInt(match[2]||"256");(width%8!=0||width>256||match[2]&&match[2]!==String(width))&&logger.throwArgumentError("invalid numeric width","type",type);const boundsUpper=MaxUint256.mask(signed?width-1:width),boundsLower=signed?boundsUpper.add(One).mul(NegativeOne):Zero;return function(value){const v=BigNumber.from(value);return(v.lt(boundsLower)||v.gt(boundsUpper))&&logger.throwArgumentError(`value out-of-bounds for ${type}`,"value",value),hexZeroPad(v.toTwos(256).toHexString(),32)}}}{const match=type.match(/^bytes(\d+)$/);if(match){const width=parseInt(match[1]);return(0===width||width>32||match[1]!==String(width))&&logger.throwArgumentError("invalid bytes width","type",type),function(value){return arrayify(value).length!==width&&logger.throwArgumentError(`invalid length for ${type}`,"value",value),hexPadRight(value)}}}switch(type){case"address":return function(value){return hexZeroPad(getAddress(value),32)};case"bool":return function(value){return value?hexTrue:hexFalse};case"bytes":return function(value){return keccak256(value)};case"string":return function(value){return id(value)}}return null}function encodeType(name,fields){return`${name}(${fields.map((({name:name,type:type})=>type+" "+name)).join(",")})`}export class TypedDataEncoder{constructor(types){defineReadOnly(this,"types",Object.freeze(deepCopy(types))),defineReadOnly(this,"_encoderCache",{}),defineReadOnly(this,"_types",{});const links={},parents={},subtypes={};Object.keys(types).forEach((type=>{links[type]={},parents[type]=[],subtypes[type]={}}));for(const name in types){const uniqueNames={};types[name].forEach((field=>{uniqueNames[field.name]&&logger.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`,"types",types),uniqueNames[field.name]=!0;const baseType=field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];baseType===name&&logger.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`,"types",types);getBaseEncoder(baseType)||(parents[baseType]||logger.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`,"types",types),parents[baseType].push(name),links[name][baseType]=!0)}))}const primaryTypes=Object.keys(parents).filter((n=>0===parents[n].length));0===primaryTypes.length?logger.throwArgumentError("missing primary type","types",types):primaryTypes.length>1&&logger.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t=>JSON.stringify(t))).join(", ")}`,"types",types),defineReadOnly(this,"primaryType",primaryTypes[0]),function checkCircular(type,found){found[type]&&logger.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`,"types",types),found[type]=!0,Object.keys(links[type]).forEach((child=>{parents[child]&&(checkCircular(child,found),Object.keys(found).forEach((subtype=>{subtypes[subtype][child]=!0})))})),delete found[type]}(this.primaryType,{});for(const name in subtypes){const st=Object.keys(subtypes[name]);st.sort(),this._types[name]=encodeType(name,types[name])+st.map((t=>encodeType(t,types[t]))).join("")}}getEncoder(type){let encoder=this._encoderCache[type];return encoder||(encoder=this._encoderCache[type]=this._getEncoder(type)),encoder}_getEncoder(type){{const encoder=getBaseEncoder(type);if(encoder)return encoder}const match=type.match(/^(.*)(\x5b(\d*)\x5d)$/);if(match){const subtype=match[1],subEncoder=this.getEncoder(subtype),length=parseInt(match[3]);return value=>{length>=0&&value.length!==length&&logger.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",value);let result=value.map(subEncoder);return this._types[subtype]&&(result=result.map(keccak256)),keccak256(hexConcat(result))}}const fields=this.types[type];if(fields){const encodedType=id(this._types[type]);return value=>{const values=fields.map((({name:name,type:type})=>{const result=this.getEncoder(type)(value[name]);return this._types[type]?keccak256(result):result}));return values.unshift(encodedType),hexConcat(values)}}return logger.throwArgumentError(`unknown type: ${type}`,"type",type)}encodeType(name){const result=this._types[name];return result||logger.throwArgumentError(`unknown type: ${JSON.stringify(name)}`,"name",name),result}encodeData(type,value){return this.getEncoder(type)(value)}hashStruct(name,value){return keccak256(this.encodeData(name,value))}encode(value){return this.encodeData(this.primaryType,value)}hash(value){return this.hashStruct(this.primaryType,value)}_visit(type,value,callback){if(getBaseEncoder(type))return callback(type,value);const match=type.match(/^(.*)(\x5b(\d*)\x5d)$/);if(match){const subtype=match[1],length=parseInt(match[3]);return length>=0&&value.length!==length&&logger.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",value),value.map((v=>this._visit(subtype,v,callback)))}const fields=this.types[type];return fields?fields.reduce(((accum,{name:name,type:type})=>(accum[name]=this._visit(type,value[name],callback),accum)),{}):logger.throwArgumentError(`unknown type: ${type}`,"type",type)}visit(value,callback){return this._visit(this.primaryType,value,callback)}static from(types){return new TypedDataEncoder(types)}static getPrimaryType(types){return TypedDataEncoder.from(types).primaryType}static hashStruct(name,types,value){return TypedDataEncoder.from(types).hashStruct(name,value)}static hashDomain(domain){const domainFields=[];for(const name in domain){const type=domainFieldTypes[name];type||logger.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`,"domain",domain),domainFields.push({name:name,type:type})}return domainFields.sort(((a,b)=>domainFieldNames.indexOf(a.name)-domainFieldNames.indexOf(b.name))),TypedDataEncoder.hashStruct("EIP712Domain",{EIP712Domain:domainFields},domain)}static encode(domain,types,value){return hexConcat(["0x1901",TypedDataEncoder.hashDomain(domain),TypedDataEncoder.from(types).hash(value)])}static hash(domain,types,value){return keccak256(TypedDataEncoder.encode(domain,types,value))}static resolveNames(domain,types,value,resolveName){return __awaiter(this,void 0,void 0,(function*(){domain=shallowCopy(domain);const ensCache={};domain.verifyingContract&&!isHexString(domain.verifyingContract,20)&&(ensCache[domain.verifyingContract]="0x");const encoder=TypedDataEncoder.from(types);encoder.visit(value,((type,value)=>("address"!==type||isHexString(value,20)||(ensCache[value]="0x"),value)));for(const name in ensCache)ensCache[name]=yield resolveName(name);return domain.verifyingContract&&ensCache[domain.verifyingContract]&&(domain.verifyingContract=ensCache[domain.verifyingContract]),value=encoder.visit(value,((type,value)=>"address"===type&&ensCache[value]?ensCache[value]:value)),{domain:domain,value:value}}))}static getPayload(domain,types,value){TypedDataEncoder.hashDomain(domain);const domainValues={},domainTypes=[];domainFieldNames.forEach((name=>{const value=domain[name];null!=value&&(domainValues[name]=domainChecks[name](value),domainTypes.push({name:name,type:domainFieldTypes[name]}))}));const encoder=TypedDataEncoder.from(types),typesWithDomain=shallowCopy(types);return typesWithDomain.EIP712Domain?logger.throwArgumentError("types must not contain EIP712Domain type","types.EIP712Domain",types):typesWithDomain.EIP712Domain=domainTypes,encoder.encode(value),{types:typesWithDomain,domain:domainValues,primaryType:encoder.primaryType,message:encoder.visit(value,((type,value)=>{if(type.match(/^bytes(\d*)/))return hexlify(arrayify(value));if(type.match(/^u?int/))return BigNumber.from(value).toString();switch(type){case"address":return value.toLowerCase();case"bool":return!!value;case"string":return"string"!=typeof value&&logger.throwArgumentError("invalid string","value",value),value}return logger.throwArgumentError("unsupported type","type",type)}))}}}