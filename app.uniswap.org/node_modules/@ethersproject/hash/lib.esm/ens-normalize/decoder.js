function flat(array,depth){null==depth&&(depth=1);const result=[],forEach=result.forEach,flatDeep=function(arr,depth){forEach.call(arr,(function(val){depth>0&&Array.isArray(val)?flatDeep(val,depth-1):result.push(val)}))};return flatDeep(array,depth),result}function fromEntries(array){const result={};for(let i=0;i<array.length;i++){const value=array[i];result[value[0]]=value[1]}return result}export function decode_arithmetic(bytes){let pos=0;function u16(){return bytes[pos++]<<8|bytes[pos++]}let symbol_count=u16(),total=1,acc=[0,1];for(let i=1;i<symbol_count;i++)acc.push(total+=u16());let skip=u16(),pos_payload=pos;pos+=skip;let read_width=0,read_buffer=0;function read_bit(){return 0==read_width&&(read_buffer=read_buffer<<8|bytes[pos++],read_width=8),read_buffer>>--read_width&1}const FULL=Math.pow(2,31),HALF=FULL>>>1,QRTR=HALF>>1,MASK=FULL-1;let register=0;for(let i=0;i<31;i++)register=register<<1|read_bit();let symbols=[],low=0,range=FULL;for(;;){let value=Math.floor(((register-low+1)*total-1)/range),start=0,end=symbol_count;for(;end-start>1;){let mid=start+end>>>1;value<acc[mid]?end=mid:start=mid}if(0==start)break;symbols.push(start);let a=low+Math.floor(range*acc[start]/total),b=low+Math.floor(range*acc[start+1]/total)-1;for(;0==((a^b)&HALF);)register=register<<1&MASK|read_bit(),a=a<<1&MASK,b=b<<1&MASK|1;for(;a&~b&QRTR;)register=register&HALF|register<<1&MASK>>>1|read_bit(),a=a<<1^HALF,b=(b^HALF)<<1|HALF|1;low=a,range=1+b-a}let offset=symbol_count-4;return symbols.map((x=>{switch(x-offset){case 3:return offset+65792+(bytes[pos_payload++]<<16|bytes[pos_payload++]<<8|bytes[pos_payload++]);case 2:return offset+256+(bytes[pos_payload++]<<8|bytes[pos_payload++]);case 1:return offset+bytes[pos_payload++];default:return x-1}}))}export function read_payload(v){let pos=0;return()=>v[pos++]}export function read_compressed_payload(bytes){return read_payload(decode_arithmetic(bytes))}export function signed(i){return 1&i?~i>>1:i>>1}function read_counts(n,next){let v=Array(n);for(let i=0;i<n;i++)v[i]=1+next();return v}function read_ascending(n,next){let v=Array(n);for(let i=0,x=-1;i<n;i++)v[i]=x+=1+next();return v}function read_deltas(n,next){let v=Array(n);for(let i=0,x=0;i<n;i++)v[i]=x+=signed(next());return v}export function read_member_array(next,lookup){let v=read_ascending(next(),next),n=next(),vX=read_ascending(n,next),vN=read_counts(n,next);for(let i=0;i<n;i++)for(let j=0;j<vN[i];j++)v.push(vX[i]+j);return lookup?v.map((x=>lookup[x])):v}export function read_mapped_map(next){let ret=[];for(;;){let w=next();if(0==w)break;ret.push(read_linear_table(w,next))}for(;;){let w=next()-1;if(w<0)break;ret.push(read_replacement_table(w,next))}return fromEntries(flat(ret))}export function read_zero_terminated_array(next){let v=[];for(;;){let i=next();if(0==i)break;v.push(i)}return v}function read_transposed(n,w,next){let m=Array(n).fill(void 0).map((()=>[]));for(let i=0;i<w;i++)read_deltas(n,next).forEach(((x,j)=>m[j].push(x)));return m}function read_linear_table(w,next){let dx=1+next(),dy=next(),vN=read_zero_terminated_array(next);return flat(read_transposed(vN.length,1+w,next).map(((v,i)=>{const x=v[0],ys=v.slice(1);return Array(vN[i]).fill(void 0).map(((_,j)=>{let j_dy=j*dy;return[x+j*dx,ys.map((y=>y+j_dy))]}))})))}function read_replacement_table(w,next){return read_transposed(1+next(),1+w,next).map((v=>[v[0],v.slice(1)]))}export function read_emoji_trie(next){let sorted=read_member_array(next).sort(((a,b)=>a-b));return function read(){let branches=[];for(;;){let keys=read_member_array(next,sorted);if(0==keys.length)break;branches.push({set:new Set(keys),node:read()})}branches.sort(((a,b)=>b.set.size-a.set.size));let temp=next(),valid=temp%3;temp=temp/3|0;let fe0f=!!(1&temp);return temp>>=1,{branches:branches,valid:valid,fe0f:fe0f,save:1==temp,check:2==temp}}()}