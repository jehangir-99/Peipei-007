"use strict";import{formatFixed,parseFixed}from"@ethersproject/bignumber";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version),names=["wei","kwei","mwei","gwei","szabo","finney","ether"];export function commify(value){const comps=String(value).split(".");(comps.length>2||!comps[0].match(/^-?[0-9]*$/)||comps[1]&&!comps[1].match(/^[0-9]*$/)||"."===value||"-."===value)&&logger.throwArgumentError("invalid value","value",value);let whole=comps[0],negative="";for("-"===whole.substring(0,1)&&(negative="-",whole=whole.substring(1));"0"===whole.substring(0,1);)whole=whole.substring(1);""===whole&&(whole="0");let suffix="";for(2===comps.length&&(suffix="."+(comps[1]||"0"));suffix.length>2&&"0"===suffix[suffix.length-1];)suffix=suffix.substring(0,suffix.length-1);const formatted=[];for(;whole.length;){if(whole.length<=3){formatted.unshift(whole);break}{const index=whole.length-3;formatted.unshift(whole.substring(index)),whole=whole.substring(0,index)}}return negative+formatted.join(",")+suffix}export function formatUnits(value,unitName){if("string"==typeof unitName){const index=names.indexOf(unitName);-1!==index&&(unitName=3*index)}return formatFixed(value,null!=unitName?unitName:18)}export function parseUnits(value,unitName){if("string"!=typeof value&&logger.throwArgumentError("value must be a string","value",value),"string"==typeof unitName){const index=names.indexOf(unitName);-1!==index&&(unitName=3*index)}return parseFixed(value,null!=unitName?unitName:18)}export function formatEther(wei){return formatUnits(wei,18)}export function parseEther(ether){return parseUnits(ether,18)}