"use strict";import{arrayify}from"@ethersproject/bytes";import{defineReadOnly}from"@ethersproject/properties";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version);import{Reader,Writer}from"./coders/abstract-coder";import{AddressCoder}from"./coders/address";import{ArrayCoder}from"./coders/array";import{BooleanCoder}from"./coders/boolean";import{BytesCoder}from"./coders/bytes";import{FixedBytesCoder}from"./coders/fixed-bytes";import{NullCoder}from"./coders/null";import{NumberCoder}from"./coders/number";import{StringCoder}from"./coders/string";import{TupleCoder}from"./coders/tuple";import{ParamType}from"./fragments";const paramTypeBytes=new RegExp(/^bytes([0-9]*)$/),paramTypeNumber=new RegExp(/^(u?int)([0-9]*)$/);export class AbiCoder{constructor(coerceFunc){defineReadOnly(this,"coerceFunc",coerceFunc||null)}_getCoder(param){switch(param.baseType){case"address":return new AddressCoder(param.name);case"bool":return new BooleanCoder(param.name);case"string":return new StringCoder(param.name);case"bytes":return new BytesCoder(param.name);case"array":return new ArrayCoder(this._getCoder(param.arrayChildren),param.arrayLength,param.name);case"tuple":return new TupleCoder((param.components||[]).map((component=>this._getCoder(component))),param.name);case"":return new NullCoder(param.name)}let match=param.type.match(paramTypeNumber);if(match){let size=parseInt(match[2]||"256");return(0===size||size>256||size%8!=0)&&logger.throwArgumentError("invalid "+match[1]+" bit length","param",param),new NumberCoder(size/8,"int"===match[1],param.name)}if(match=param.type.match(paramTypeBytes),match){let size=parseInt(match[1]);return(0===size||size>32)&&logger.throwArgumentError("invalid bytes length","param",param),new FixedBytesCoder(size,param.name)}return logger.throwArgumentError("invalid type","type",param.type)}_getWordSize(){return 32}_getReader(data,allowLoose){return new Reader(data,this._getWordSize(),this.coerceFunc,allowLoose)}_getWriter(){return new Writer(this._getWordSize())}getDefaultValue(types){const coders=types.map((type=>this._getCoder(ParamType.from(type))));return new TupleCoder(coders,"_").defaultValue()}encode(types,values){types.length!==values.length&&logger.throwError("types/values length mismatch",Logger.errors.INVALID_ARGUMENT,{count:{types:types.length,values:values.length},value:{types:types,values:values}});const coders=types.map((type=>this._getCoder(ParamType.from(type)))),coder=new TupleCoder(coders,"_"),writer=this._getWriter();return coder.encode(writer,values),writer.data}decode(types,data,loose){const coders=types.map((type=>this._getCoder(ParamType.from(type))));return new TupleCoder(coders,"_").decode(this._getReader(arrayify(data),loose))}}export const defaultAbiCoder=new AbiCoder;