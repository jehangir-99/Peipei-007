"use strict";import{Coder}from"./abstract-coder";import{pack,unpack}from"./array";export class TupleCoder extends Coder{constructor(coders,localName){let dynamic=!1;const types=[];coders.forEach((coder=>{coder.dynamic&&(dynamic=!0),types.push(coder.type)}));super("tuple","tuple("+types.join(",")+")",localName,dynamic),this.coders=coders}defaultValue(){const values=[];this.coders.forEach((coder=>{values.push(coder.defaultValue())}));const uniqueNames=this.coders.reduce(((accum,coder)=>{const name=coder.localName;return name&&(accum[name]||(accum[name]=0),accum[name]++),accum}),{});return this.coders.forEach(((coder,index)=>{let name=coder.localName;name&&1===uniqueNames[name]&&("length"===name&&(name="_length"),null==values[name]&&(values[name]=values[index]))})),Object.freeze(values)}encode(writer,value){return pack(writer,this.coders,value)}decode(reader){return reader.coerce(this.name,unpack(reader,this.coders))}}