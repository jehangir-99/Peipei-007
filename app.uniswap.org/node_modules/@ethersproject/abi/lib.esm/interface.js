"use strict";import{getAddress}from"@ethersproject/address";import{BigNumber}from"@ethersproject/bignumber";import{arrayify,concat,hexDataSlice,hexlify,hexZeroPad,isHexString}from"@ethersproject/bytes";import{id}from"@ethersproject/hash";import{keccak256}from"@ethersproject/keccak256";import{defineReadOnly,Description,getStatic}from"@ethersproject/properties";import{defaultAbiCoder}from"./abi-coder";import{checkResultErrors}from"./coders/abstract-coder";import{ConstructorFragment,EventFragment,FormatTypes,Fragment,FunctionFragment,ParamType}from"./fragments";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version);export{checkResultErrors};export class LogDescription extends Description{}export class TransactionDescription extends Description{}export class ErrorDescription extends Description{}export class Indexed extends Description{static isIndexed(value){return!(!value||!value._isIndexed)}}const BuiltinErrors={"0x08c379a0":{signature:"Error(string)",name:"Error",inputs:["string"],reason:!0},"0x4e487b71":{signature:"Panic(uint256)",name:"Panic",inputs:["uint256"]}};function wrapAccessError(property,error){const wrap=new Error(`deferred error during ABI decoding triggered accessing ${property}`);return wrap.error=error,wrap}export class Interface{constructor(fragments){let abi=[];abi="string"==typeof fragments?JSON.parse(fragments):fragments,defineReadOnly(this,"fragments",abi.map((fragment=>Fragment.from(fragment))).filter((fragment=>null!=fragment))),defineReadOnly(this,"_abiCoder",getStatic(new.target,"getAbiCoder")()),defineReadOnly(this,"functions",{}),defineReadOnly(this,"errors",{}),defineReadOnly(this,"events",{}),defineReadOnly(this,"structs",{}),this.fragments.forEach((fragment=>{let bucket=null;switch(fragment.type){case"constructor":return this.deploy?void logger.warn("duplicate definition - constructor"):void defineReadOnly(this,"deploy",fragment);case"function":bucket=this.functions;break;case"event":bucket=this.events;break;case"error":bucket=this.errors;break;default:return}let signature=fragment.format();bucket[signature]?logger.warn("duplicate definition - "+signature):bucket[signature]=fragment})),this.deploy||defineReadOnly(this,"deploy",ConstructorFragment.from({payable:!1,type:"constructor"})),defineReadOnly(this,"_isInterface",!0)}format(format){format||(format=FormatTypes.full),format===FormatTypes.sighash&&logger.throwArgumentError("interface does not support formatting sighash","format",format);const abi=this.fragments.map((fragment=>fragment.format(format)));return format===FormatTypes.json?JSON.stringify(abi.map((j=>JSON.parse(j)))):abi}static getAbiCoder(){return defaultAbiCoder}static getAddress(address){return getAddress(address)}static getSighash(fragment){return hexDataSlice(id(fragment.format()),0,4)}static getEventTopic(eventFragment){return id(eventFragment.format())}getFunction(nameOrSignatureOrSighash){if(isHexString(nameOrSignatureOrSighash)){for(const name in this.functions)if(nameOrSignatureOrSighash===this.getSighash(name))return this.functions[name];logger.throwArgumentError("no matching function","sighash",nameOrSignatureOrSighash)}if(-1===nameOrSignatureOrSighash.indexOf("(")){const name=nameOrSignatureOrSighash.trim(),matching=Object.keys(this.functions).filter((f=>f.split("(")[0]===name));return 0===matching.length?logger.throwArgumentError("no matching function","name",name):matching.length>1&&logger.throwArgumentError("multiple matching functions","name",name),this.functions[matching[0]]}const result=this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];return result||logger.throwArgumentError("no matching function","signature",nameOrSignatureOrSighash),result}getEvent(nameOrSignatureOrTopic){if(isHexString(nameOrSignatureOrTopic)){const topichash=nameOrSignatureOrTopic.toLowerCase();for(const name in this.events)if(topichash===this.getEventTopic(name))return this.events[name];logger.throwArgumentError("no matching event","topichash",topichash)}if(-1===nameOrSignatureOrTopic.indexOf("(")){const name=nameOrSignatureOrTopic.trim(),matching=Object.keys(this.events).filter((f=>f.split("(")[0]===name));return 0===matching.length?logger.throwArgumentError("no matching event","name",name):matching.length>1&&logger.throwArgumentError("multiple matching events","name",name),this.events[matching[0]]}const result=this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];return result||logger.throwArgumentError("no matching event","signature",nameOrSignatureOrTopic),result}getError(nameOrSignatureOrSighash){if(isHexString(nameOrSignatureOrSighash)){const getSighash=getStatic(this.constructor,"getSighash");for(const name in this.errors){if(nameOrSignatureOrSighash===getSighash(this.errors[name]))return this.errors[name]}logger.throwArgumentError("no matching error","sighash",nameOrSignatureOrSighash)}if(-1===nameOrSignatureOrSighash.indexOf("(")){const name=nameOrSignatureOrSighash.trim(),matching=Object.keys(this.errors).filter((f=>f.split("(")[0]===name));return 0===matching.length?logger.throwArgumentError("no matching error","name",name):matching.length>1&&logger.throwArgumentError("multiple matching errors","name",name),this.errors[matching[0]]}const result=this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];return result||logger.throwArgumentError("no matching error","signature",nameOrSignatureOrSighash),result}getSighash(fragment){if("string"==typeof fragment)try{fragment=this.getFunction(fragment)}catch(error){try{fragment=this.getError(fragment)}catch(_){throw error}}return getStatic(this.constructor,"getSighash")(fragment)}getEventTopic(eventFragment){return"string"==typeof eventFragment&&(eventFragment=this.getEvent(eventFragment)),getStatic(this.constructor,"getEventTopic")(eventFragment)}_decodeParams(params,data){return this._abiCoder.decode(params,data)}_encodeParams(params,values){return this._abiCoder.encode(params,values)}encodeDeploy(values){return this._encodeParams(this.deploy.inputs,values||[])}decodeErrorResult(fragment,data){"string"==typeof fragment&&(fragment=this.getError(fragment));const bytes=arrayify(data);return hexlify(bytes.slice(0,4))!==this.getSighash(fragment)&&logger.throwArgumentError(`data signature does not match error ${fragment.name}.`,"data",hexlify(bytes)),this._decodeParams(fragment.inputs,bytes.slice(4))}encodeErrorResult(fragment,values){return"string"==typeof fragment&&(fragment=this.getError(fragment)),hexlify(concat([this.getSighash(fragment),this._encodeParams(fragment.inputs,values||[])]))}decodeFunctionData(functionFragment,data){"string"==typeof functionFragment&&(functionFragment=this.getFunction(functionFragment));const bytes=arrayify(data);return hexlify(bytes.slice(0,4))!==this.getSighash(functionFragment)&&logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`,"data",hexlify(bytes)),this._decodeParams(functionFragment.inputs,bytes.slice(4))}encodeFunctionData(functionFragment,values){return"string"==typeof functionFragment&&(functionFragment=this.getFunction(functionFragment)),hexlify(concat([this.getSighash(functionFragment),this._encodeParams(functionFragment.inputs,values||[])]))}decodeFunctionResult(functionFragment,data){"string"==typeof functionFragment&&(functionFragment=this.getFunction(functionFragment));let bytes=arrayify(data),reason=null,message="",errorArgs=null,errorName=null,errorSignature=null;switch(bytes.length%this._abiCoder._getWordSize()){case 0:try{return this._abiCoder.decode(functionFragment.outputs,bytes)}catch(error){}break;case 4:{const selector=hexlify(bytes.slice(0,4)),builtin=BuiltinErrors[selector];if(builtin)errorArgs=this._abiCoder.decode(builtin.inputs,bytes.slice(4)),errorName=builtin.name,errorSignature=builtin.signature,builtin.reason&&(reason=errorArgs[0]),"Error"===errorName?message=`; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`:"Panic"===errorName&&(message=`; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`);else try{const error=this.getError(selector);errorArgs=this._abiCoder.decode(error.inputs,bytes.slice(4)),errorName=error.name,errorSignature=error.format()}catch(error){}break}}return logger.throwError("call revert exception"+message,Logger.errors.CALL_EXCEPTION,{method:functionFragment.format(),data:hexlify(data),errorArgs:errorArgs,errorName:errorName,errorSignature:errorSignature,reason:reason})}encodeFunctionResult(functionFragment,values){return"string"==typeof functionFragment&&(functionFragment=this.getFunction(functionFragment)),hexlify(this._abiCoder.encode(functionFragment.outputs,values||[]))}encodeFilterTopics(eventFragment,values){"string"==typeof eventFragment&&(eventFragment=this.getEvent(eventFragment)),values.length>eventFragment.inputs.length&&logger.throwError("too many arguments for "+eventFragment.format(),Logger.errors.UNEXPECTED_ARGUMENT,{argument:"values",value:values});let topics=[];eventFragment.anonymous||topics.push(this.getEventTopic(eventFragment));const encodeTopic=(param,value)=>"string"===param.type?id(value):"bytes"===param.type?keccak256(hexlify(value)):("bool"===param.type&&"boolean"==typeof value&&(value=value?"0x01":"0x00"),param.type.match(/^u?int/)&&(value=BigNumber.from(value).toHexString()),"address"===param.type&&this._abiCoder.encode(["address"],[value]),hexZeroPad(hexlify(value),32));for(values.forEach(((value,index)=>{let param=eventFragment.inputs[index];param.indexed?null==value?topics.push(null):"array"===param.baseType||"tuple"===param.baseType?logger.throwArgumentError("filtering with tuples or arrays not supported","contract."+param.name,value):Array.isArray(value)?topics.push(value.map((value=>encodeTopic(param,value)))):topics.push(encodeTopic(param,value)):null!=value&&logger.throwArgumentError("cannot filter non-indexed parameters; must be null","contract."+param.name,value)}));topics.length&&null===topics[topics.length-1];)topics.pop();return topics}encodeEventLog(eventFragment,values){"string"==typeof eventFragment&&(eventFragment=this.getEvent(eventFragment));const topics=[],dataTypes=[],dataValues=[];return eventFragment.anonymous||topics.push(this.getEventTopic(eventFragment)),values.length!==eventFragment.inputs.length&&logger.throwArgumentError("event arguments/values mismatch","values",values),eventFragment.inputs.forEach(((param,index)=>{const value=values[index];if(param.indexed)if("string"===param.type)topics.push(id(value));else if("bytes"===param.type)topics.push(keccak256(value));else{if("tuple"===param.baseType||"array"===param.baseType)throw new Error("not implemented");topics.push(this._abiCoder.encode([param.type],[value]))}else dataTypes.push(param),dataValues.push(value)})),{data:this._abiCoder.encode(dataTypes,dataValues),topics:topics}}decodeEventLog(eventFragment,data,topics){if("string"==typeof eventFragment&&(eventFragment=this.getEvent(eventFragment)),null!=topics&&!eventFragment.anonymous){let topicHash=this.getEventTopic(eventFragment);isHexString(topics[0],32)&&topics[0].toLowerCase()===topicHash||logger.throwError("fragment/topic mismatch",Logger.errors.INVALID_ARGUMENT,{argument:"topics[0]",expected:topicHash,value:topics[0]}),topics=topics.slice(1)}let indexed=[],nonIndexed=[],dynamic=[];eventFragment.inputs.forEach(((param,index)=>{param.indexed?"string"===param.type||"bytes"===param.type||"tuple"===param.baseType||"array"===param.baseType?(indexed.push(ParamType.fromObject({type:"bytes32",name:param.name})),dynamic.push(!0)):(indexed.push(param),dynamic.push(!1)):(nonIndexed.push(param),dynamic.push(!1))}));let resultIndexed=null!=topics?this._abiCoder.decode(indexed,concat(topics)):null,resultNonIndexed=this._abiCoder.decode(nonIndexed,data,!0),result=[],nonIndexedIndex=0,indexedIndex=0;eventFragment.inputs.forEach(((param,index)=>{if(param.indexed)if(null==resultIndexed)result[index]=new Indexed({_isIndexed:!0,hash:null});else if(dynamic[index])result[index]=new Indexed({_isIndexed:!0,hash:resultIndexed[indexedIndex++]});else try{result[index]=resultIndexed[indexedIndex++]}catch(error){result[index]=error}else try{result[index]=resultNonIndexed[nonIndexedIndex++]}catch(error){result[index]=error}if(param.name&&null==result[param.name]){const value=result[index];value instanceof Error?Object.defineProperty(result,param.name,{enumerable:!0,get:()=>{throw wrapAccessError(`property ${JSON.stringify(param.name)}`,value)}}):result[param.name]=value}}));for(let i=0;i<result.length;i++){const value=result[i];value instanceof Error&&Object.defineProperty(result,i,{enumerable:!0,get:()=>{throw wrapAccessError(`index ${i}`,value)}})}return Object.freeze(result)}parseTransaction(tx){let fragment=this.getFunction(tx.data.substring(0,10).toLowerCase());return fragment?new TransactionDescription({args:this._abiCoder.decode(fragment.inputs,"0x"+tx.data.substring(10)),functionFragment:fragment,name:fragment.name,signature:fragment.format(),sighash:this.getSighash(fragment),value:BigNumber.from(tx.value||"0")}):null}parseLog(log){let fragment=this.getEvent(log.topics[0]);return!fragment||fragment.anonymous?null:new LogDescription({eventFragment:fragment,name:fragment.name,signature:fragment.format(),topic:this.getEventTopic(fragment),args:this.decodeEventLog(fragment,log.data,log.topics)})}parseError(data){const hexData=hexlify(data);let fragment=this.getError(hexData.substring(0,10).toLowerCase());return fragment?new ErrorDescription({args:this._abiCoder.decode(fragment.inputs,"0x"+hexData.substring(10)),errorFragment:fragment,name:fragment.name,signature:fragment.format(),sighash:this.getSighash(fragment)}):null}static isInterface(value){return!(!value||!value._isInterface)}}