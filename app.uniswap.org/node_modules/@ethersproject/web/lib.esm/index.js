"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P((function(resolve){resolve(value)}))).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};import{decode as base64Decode,encode as base64Encode}from"@ethersproject/base64";import{hexlify,isBytesLike}from"@ethersproject/bytes";import{shallowCopy}from"@ethersproject/properties";import{toUtf8Bytes,toUtf8String}from"@ethersproject/strings";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version);import{getUrl}from"./geturl";function staller(duration){return new Promise((resolve=>{setTimeout(resolve,duration)}))}function bodyify(value,type){if(null==value)return null;if("string"==typeof value)return value;if(isBytesLike(value)){if(type&&("text"===type.split("/")[0]||"application/json"===type.split(";")[0].trim()))try{return toUtf8String(value)}catch(error){}return hexlify(value)}return value}function unpercent(value){return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi,((all,code)=>String.fromCharCode(parseInt(code,16)))))}export function _fetchData(connection,body,processFunc){const attemptLimit="object"==typeof connection&&null!=connection.throttleLimit?connection.throttleLimit:12;logger.assertArgument(attemptLimit>0&&attemptLimit%1==0,"invalid connection throttle limit","connection.throttleLimit",attemptLimit);const throttleCallback="object"==typeof connection?connection.throttleCallback:null,throttleSlotInterval="object"==typeof connection&&"number"==typeof connection.throttleSlotInterval?connection.throttleSlotInterval:100;logger.assertArgument(throttleSlotInterval>0&&throttleSlotInterval%1==0,"invalid connection throttle slot interval","connection.throttleSlotInterval",throttleSlotInterval);const errorPassThrough="object"==typeof connection&&!!connection.errorPassThrough,headers={};let url=null;const options={method:"GET"};let allow304=!1,timeout=12e4;if("string"==typeof connection)url=connection;else if("object"==typeof connection){if(null!=connection&&null!=connection.url||logger.throwArgumentError("missing URL","connection.url",connection),url=connection.url,"number"==typeof connection.timeout&&connection.timeout>0&&(timeout=connection.timeout),connection.headers)for(const key in connection.headers)headers[key.toLowerCase()]={key:key,value:String(connection.headers[key])},["if-none-match","if-modified-since"].indexOf(key.toLowerCase())>=0&&(allow304=!0);if(options.allowGzip=!!connection.allowGzip,null!=connection.user&&null!=connection.password){"https:"!==url.substring(0,6)&&!0!==connection.allowInsecureAuthentication&&logger.throwError("basic authentication requires a secure https url",Logger.errors.INVALID_ARGUMENT,{argument:"url",url:url,user:connection.user,password:"[REDACTED]"});const authorization=connection.user+":"+connection.password;headers.authorization={key:"Authorization",value:"Basic "+base64Encode(toUtf8Bytes(authorization))}}null!=connection.skipFetchSetup&&(options.skipFetchSetup=!!connection.skipFetchSetup),null!=connection.fetchOptions&&(options.fetchOptions=shallowCopy(connection.fetchOptions))}const reData=new RegExp("^data:([^;:]*)?(;base64)?,(.*)$","i"),dataMatch=url?url.match(reData):null;if(dataMatch)try{const response={statusCode:200,statusMessage:"OK",headers:{"content-type":dataMatch[1]||"text/plain"},body:dataMatch[2]?base64Decode(dataMatch[3]):unpercent(dataMatch[3])};let result=response.body;return processFunc&&(result=processFunc(response.body,response)),Promise.resolve(result)}catch(error){logger.throwError("processing response error",Logger.errors.SERVER_ERROR,{body:bodyify(dataMatch[1],dataMatch[2]),error:error,requestBody:null,requestMethod:"GET",url:url})}body&&(options.method="POST",options.body=body,null==headers["content-type"]&&(headers["content-type"]={key:"Content-Type",value:"application/octet-stream"}),null==headers["content-length"]&&(headers["content-length"]={key:"Content-Length",value:String(body.length)}));const flatHeaders={};Object.keys(headers).forEach((key=>{const header=headers[key];flatHeaders[header.key]=header.value})),options.headers=flatHeaders;const runningTimeout=function(){let timer=null;return{promise:new Promise((function(resolve,reject){timeout&&(timer=setTimeout((()=>{null!=timer&&(timer=null,reject(logger.makeError("timeout",Logger.errors.TIMEOUT,{requestBody:bodyify(options.body,flatHeaders["content-type"]),requestMethod:options.method,timeout:timeout,url:url})))}),timeout))})),cancel:function(){null!=timer&&(clearTimeout(timer),timer=null)}}}(),runningFetch=function(){return __awaiter(this,void 0,void 0,(function*(){for(let attempt=0;attempt<attemptLimit;attempt++){let response=null;try{if(response=yield getUrl(url,options),attempt<attemptLimit)if(301===response.statusCode||302===response.statusCode){const location=response.headers.location||"";if("GET"===options.method&&location.match(/^https:/)){url=response.headers.location;continue}}else if(429===response.statusCode){let tryAgain=!0;if(throttleCallback&&(tryAgain=yield throttleCallback(attempt,url)),tryAgain){let stall=0;const retryAfter=response.headers["retry-after"];stall="string"==typeof retryAfter&&retryAfter.match(/^[1-9][0-9]*$/)?1e3*parseInt(retryAfter):throttleSlotInterval*parseInt(String(Math.random()*Math.pow(2,attempt))),yield staller(stall);continue}}}catch(error){response=error.response,null==response&&(runningTimeout.cancel(),logger.throwError("missing response",Logger.errors.SERVER_ERROR,{requestBody:bodyify(options.body,flatHeaders["content-type"]),requestMethod:options.method,serverError:error,url:url}))}let body=response.body;if(allow304&&304===response.statusCode?body=null:!errorPassThrough&&(response.statusCode<200||response.statusCode>=300)&&(runningTimeout.cancel(),logger.throwError("bad response",Logger.errors.SERVER_ERROR,{status:response.statusCode,headers:response.headers,body:bodyify(body,response.headers?response.headers["content-type"]:null),requestBody:bodyify(options.body,flatHeaders["content-type"]),requestMethod:options.method,url:url})),processFunc)try{const result=yield processFunc(body,response);return runningTimeout.cancel(),result}catch(error){if(error.throttleRetry&&attempt<attemptLimit){let tryAgain=!0;if(throttleCallback&&(tryAgain=yield throttleCallback(attempt,url)),tryAgain){const timeout=throttleSlotInterval*parseInt(String(Math.random()*Math.pow(2,attempt)));yield staller(timeout);continue}}runningTimeout.cancel(),logger.throwError("processing response error",Logger.errors.SERVER_ERROR,{body:bodyify(body,response.headers?response.headers["content-type"]:null),error:error,requestBody:bodyify(options.body,flatHeaders["content-type"]),requestMethod:options.method,url:url})}return runningTimeout.cancel(),body}return logger.throwError("failed response",Logger.errors.SERVER_ERROR,{requestBody:bodyify(options.body,flatHeaders["content-type"]),requestMethod:options.method,url:url})}))}();return Promise.race([runningTimeout.promise,runningFetch])}export function fetchJson(connection,json,processFunc){let body=null;if(null!=json){body=toUtf8Bytes(json);const updated="string"==typeof connection?{url:connection}:shallowCopy(connection);if(updated.headers){0!==Object.keys(updated.headers).filter((k=>"content-type"===k.toLowerCase())).length||(updated.headers=shallowCopy(updated.headers),updated.headers["content-type"]="application/json")}else updated.headers={"content-type":"application/json"};connection=updated}return _fetchData(connection,body,((value,response)=>{let result=null;if(null!=value)try{result=JSON.parse(toUtf8String(value))}catch(error){logger.throwError("invalid JSON",Logger.errors.SERVER_ERROR,{body:value,error:error})}return processFunc&&(result=processFunc(result,response)),result}))}export function poll(func,options){return options||(options={}),null==(options=shallowCopy(options)).floor&&(options.floor=0),null==options.ceiling&&(options.ceiling=1e4),null==options.interval&&(options.interval=250),new Promise((function(resolve,reject){let timer=null,done=!1;const cancel=()=>!done&&(done=!0,timer&&clearTimeout(timer),!0);options.timeout&&(timer=setTimeout((()=>{cancel()&&reject(new Error("timeout"))}),options.timeout));const retryLimit=options.retryLimit;let attempt=0;!function check(){return func().then((function(result){if(void 0!==result)cancel()&&resolve(result);else if(options.oncePoll)options.oncePoll.once("poll",check);else if(options.onceBlock)options.onceBlock.once("block",check);else if(!done){if(attempt++,attempt>retryLimit)return void(cancel()&&reject(new Error("retry limit reached")));let timeout=options.interval*parseInt(String(Math.random()*Math.pow(2,attempt)));timeout<options.floor&&(timeout=options.floor),timeout>options.ceiling&&(timeout=options.ceiling),setTimeout(check,timeout)}return null}),(function(error){cancel()&&reject(error)}))}()}))}