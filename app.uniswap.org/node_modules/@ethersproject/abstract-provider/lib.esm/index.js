"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P((function(resolve){resolve(value)}))).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};import{BigNumber}from"@ethersproject/bignumber";import{isHexString}from"@ethersproject/bytes";import{Description,defineReadOnly,resolveProperties}from"@ethersproject/properties";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version);export class ForkEvent extends Description{static isForkEvent(value){return!(!value||!value._isForkEvent)}}export class BlockForkEvent extends ForkEvent{constructor(blockHash,expiry){isHexString(blockHash,32)||logger.throwArgumentError("invalid blockHash","blockHash",blockHash),super({_isForkEvent:!0,_isBlockForkEvent:!0,expiry:expiry||0,blockHash:blockHash})}}export class TransactionForkEvent extends ForkEvent{constructor(hash,expiry){isHexString(hash,32)||logger.throwArgumentError("invalid transaction hash","hash",hash),super({_isForkEvent:!0,_isTransactionForkEvent:!0,expiry:expiry||0,hash:hash})}}export class TransactionOrderForkEvent extends ForkEvent{constructor(beforeHash,afterHash,expiry){isHexString(beforeHash,32)||logger.throwArgumentError("invalid transaction hash","beforeHash",beforeHash),isHexString(afterHash,32)||logger.throwArgumentError("invalid transaction hash","afterHash",afterHash),super({_isForkEvent:!0,_isTransactionOrderForkEvent:!0,expiry:expiry||0,beforeHash:beforeHash,afterHash:afterHash})}}export class Provider{constructor(){logger.checkAbstract(new.target,Provider),defineReadOnly(this,"_isProvider",!0)}getFeeData(){return __awaiter(this,void 0,void 0,(function*(){const{block:block,gasPrice:gasPrice}=yield resolveProperties({block:this.getBlock("latest"),gasPrice:this.getGasPrice().catch((error=>null))});let lastBaseFeePerGas=null,maxFeePerGas=null,maxPriorityFeePerGas=null;return block&&block.baseFeePerGas&&(lastBaseFeePerGas=block.baseFeePerGas,maxPriorityFeePerGas=BigNumber.from("1500000000"),maxFeePerGas=block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas)),{lastBaseFeePerGas:lastBaseFeePerGas,maxFeePerGas:maxFeePerGas,maxPriorityFeePerGas:maxPriorityFeePerGas,gasPrice:gasPrice}}))}addListener(eventName,listener){return this.on(eventName,listener)}removeListener(eventName,listener){return this.off(eventName,listener)}static isProvider(value){return!(!value||!value._isProvider)}}