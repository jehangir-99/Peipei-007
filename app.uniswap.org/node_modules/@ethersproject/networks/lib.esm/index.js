"use strict";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version);function isRenetworkable(value){return value&&"function"==typeof value.renetwork}function ethDefaultProvider(network){const func=function(providers,options){null==options&&(options={});const providerList=[];if(providers.InfuraProvider&&"-"!==options.infura)try{providerList.push(new providers.InfuraProvider(network,options.infura))}catch(error){}if(providers.EtherscanProvider&&"-"!==options.etherscan)try{providerList.push(new providers.EtherscanProvider(network,options.etherscan))}catch(error){}if(providers.AlchemyProvider&&"-"!==options.alchemy)try{providerList.push(new providers.AlchemyProvider(network,options.alchemy))}catch(error){}if(providers.PocketProvider&&"-"!==options.pocket){const skip=["goerli","ropsten","rinkeby","sepolia"];try{const provider=new providers.PocketProvider(network,options.pocket);provider.network&&-1===skip.indexOf(provider.network.name)&&providerList.push(provider)}catch(error){}}if(providers.CloudflareProvider&&"-"!==options.cloudflare)try{providerList.push(new providers.CloudflareProvider(network))}catch(error){}if(providers.AnkrProvider&&"-"!==options.ankr)try{const skip=["ropsten"],provider=new providers.AnkrProvider(network,options.ankr);provider.network&&-1===skip.indexOf(provider.network.name)&&providerList.push(provider)}catch(error){}if(0===providerList.length)return null;if(providers.FallbackProvider){let quorum=1;return null!=options.quorum?quorum=options.quorum:"homestead"===network&&(quorum=2),new providers.FallbackProvider(providerList,quorum)}return providerList[0]};return func.renetwork=function(network){return ethDefaultProvider(network)},func}function etcDefaultProvider(url,network){const func=function(providers,options){return providers.JsonRpcProvider?new providers.JsonRpcProvider(url,network):null};return func.renetwork=function(network){return etcDefaultProvider(url,network)},func}const homestead={chainId:1,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"homestead",_defaultProvider:ethDefaultProvider("homestead")},ropsten={chainId:3,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"ropsten",_defaultProvider:ethDefaultProvider("ropsten")},classicMordor={chainId:63,name:"classicMordor",_defaultProvider:etcDefaultProvider("https://www.ethercluster.com/mordor","classicMordor")},networks={unspecified:{chainId:0,name:"unspecified"},homestead:homestead,mainnet:homestead,morden:{chainId:2,name:"morden"},ropsten:ropsten,testnet:ropsten,rinkeby:{chainId:4,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"rinkeby",_defaultProvider:ethDefaultProvider("rinkeby")},kovan:{chainId:42,name:"kovan",_defaultProvider:ethDefaultProvider("kovan")},goerli:{chainId:5,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"goerli",_defaultProvider:ethDefaultProvider("goerli")},kintsugi:{chainId:1337702,name:"kintsugi"},sepolia:{chainId:11155111,name:"sepolia",_defaultProvider:ethDefaultProvider("sepolia")},classic:{chainId:61,name:"classic",_defaultProvider:etcDefaultProvider("https://www.ethercluster.com/etc","classic")},classicMorden:{chainId:62,name:"classicMorden"},classicMordor:classicMordor,classicTestnet:classicMordor,classicKotti:{chainId:6,name:"classicKotti",_defaultProvider:etcDefaultProvider("https://www.ethercluster.com/kotti","classicKotti")},xdai:{chainId:100,name:"xdai"},matic:{chainId:137,name:"matic",_defaultProvider:ethDefaultProvider("matic")},maticmum:{chainId:80001,name:"maticmum"},optimism:{chainId:10,name:"optimism",_defaultProvider:ethDefaultProvider("optimism")},"optimism-kovan":{chainId:69,name:"optimism-kovan"},"optimism-goerli":{chainId:420,name:"optimism-goerli"},arbitrum:{chainId:42161,name:"arbitrum"},"arbitrum-rinkeby":{chainId:421611,name:"arbitrum-rinkeby"},"arbitrum-goerli":{chainId:421613,name:"arbitrum-goerli"},bnb:{chainId:56,name:"bnb"},bnbt:{chainId:97,name:"bnbt"}};export function getNetwork(network){if(null==network)return null;if("number"==typeof network){for(const name in networks){const standard=networks[name];if(standard.chainId===network)return{name:standard.name,chainId:standard.chainId,ensAddress:standard.ensAddress||null,_defaultProvider:standard._defaultProvider||null}}return{chainId:network,name:"unknown"}}if("string"==typeof network){const standard=networks[network];return null==standard?null:{name:standard.name,chainId:standard.chainId,ensAddress:standard.ensAddress,_defaultProvider:standard._defaultProvider||null}}const standard=networks[network.name];if(!standard)return"number"!=typeof network.chainId&&logger.throwArgumentError("invalid network chainId","network",network),network;0!==network.chainId&&network.chainId!==standard.chainId&&logger.throwArgumentError("network chainId mismatch","network",network);let defaultProvider=network._defaultProvider||null;return null==defaultProvider&&standard._defaultProvider&&(defaultProvider=isRenetworkable(standard._defaultProvider)?standard._defaultProvider.renetwork(network):standard._defaultProvider),{name:network.name,chainId:standard.chainId,ensAddress:network.ensAddress||standard.ensAddress||null,_defaultProvider:defaultProvider}}