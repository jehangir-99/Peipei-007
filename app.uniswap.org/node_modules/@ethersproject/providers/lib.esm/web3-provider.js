"use strict";import{deepCopy,defineReadOnly}from"@ethersproject/properties";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version);import{JsonRpcProvider}from"./json-rpc-provider";let _nextId=1;function buildWeb3LegacyFetcher(provider,sendFunc){const fetcher="Web3LegacyFetcher";return function(method,params){const request={method:method,params:params,id:_nextId++,jsonrpc:"2.0"};return new Promise(((resolve,reject)=>{this.emit("debug",{action:"request",fetcher:fetcher,request:deepCopy(request),provider:this}),sendFunc(request,((error,response)=>{if(error)return this.emit("debug",{action:"response",fetcher:fetcher,error:error,request:request,provider:this}),reject(error);if(this.emit("debug",{action:"response",fetcher:fetcher,request:request,response:response,provider:this}),response.error){const error=new Error(response.error.message);return error.code=response.error.code,error.data=response.error.data,reject(error)}resolve(response.result)}))}))}}function buildEip1193Fetcher(provider){return function(method,params){null==params&&(params=[]);const request={method:method,params:params};return this.emit("debug",{action:"request",fetcher:"Eip1193Fetcher",request:deepCopy(request),provider:this}),provider.request(request).then((response=>(this.emit("debug",{action:"response",fetcher:"Eip1193Fetcher",request:request,response:response,provider:this}),response)),(error=>{throw this.emit("debug",{action:"response",fetcher:"Eip1193Fetcher",request:request,error:error,provider:this}),error}))}}export class Web3Provider extends JsonRpcProvider{constructor(provider,network){null==provider&&logger.throwArgumentError("missing provider","provider",provider);let path=null,jsonRpcFetchFunc=null,subprovider=null;"function"==typeof provider?(path="unknown:",jsonRpcFetchFunc=provider):(path=provider.host||provider.path||"",!path&&provider.isMetaMask&&(path="metamask"),subprovider=provider,provider.request?(""===path&&(path="eip-1193:"),jsonRpcFetchFunc=buildEip1193Fetcher(provider)):provider.sendAsync?jsonRpcFetchFunc=buildWeb3LegacyFetcher(provider,provider.sendAsync.bind(provider)):provider.send?jsonRpcFetchFunc=buildWeb3LegacyFetcher(provider,provider.send.bind(provider)):logger.throwArgumentError("unsupported provider","provider",provider),path||(path="unknown:")),super(path,network),defineReadOnly(this,"jsonRpcFetchFunc",jsonRpcFetchFunc),defineReadOnly(this,"provider",subprovider)}send(method,params){return this.jsonRpcFetchFunc(method,params)}}