"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P((function(resolve){resolve(value)}))).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};import{defineReadOnly,getStatic}from"@ethersproject/properties";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version);import{JsonRpcProvider}from"./json-rpc-provider";export class StaticJsonRpcProvider extends JsonRpcProvider{detectNetwork(){const _super=Object.create(null,{detectNetwork:{get:()=>super.detectNetwork}});return __awaiter(this,void 0,void 0,(function*(){let network=this.network;return null==network&&(network=yield _super.detectNetwork.call(this),network||logger.throwError("no network detected",Logger.errors.UNKNOWN_ERROR,{}),null==this._network&&(defineReadOnly(this,"_network",network),this.emit("network",network,null))),network}))}}export class UrlJsonRpcProvider extends StaticJsonRpcProvider{constructor(network,apiKey){logger.checkAbstract(new.target,UrlJsonRpcProvider),network=getStatic(new.target,"getNetwork")(network),apiKey=getStatic(new.target,"getApiKey")(apiKey);super(getStatic(new.target,"getUrl")(network,apiKey),network),"string"==typeof apiKey?defineReadOnly(this,"apiKey",apiKey):null!=apiKey&&Object.keys(apiKey).forEach((key=>{defineReadOnly(this,key,apiKey[key])}))}_startPending(){logger.warn("WARNING: API provider does not support pending filters")}isCommunityResource(){return!1}getSigner(address){return logger.throwError("API provider does not support signing",Logger.errors.UNSUPPORTED_OPERATION,{operation:"getSigner"})}listAccounts(){return Promise.resolve([])}static getApiKey(apiKey){return apiKey}static getUrl(network,apiKey){return logger.throwError("not implemented; sub-classes must override getUrl",Logger.errors.NOT_IMPLEMENTED,{operation:"getUrl"})}}