"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P((function(resolve){resolve(value)}))).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};import{Signer}from"@ethersproject/abstract-signer";import{BigNumber}from"@ethersproject/bignumber";import{hexlify,hexValue,hexZeroPad,isHexString}from"@ethersproject/bytes";import{_TypedDataEncoder}from"@ethersproject/hash";import{checkProperties,deepCopy,defineReadOnly,getStatic,resolveProperties,shallowCopy}from"@ethersproject/properties";import{toUtf8Bytes}from"@ethersproject/strings";import{accessListify}from"@ethersproject/transactions";import{fetchJson,poll}from"@ethersproject/web";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version);import{BaseProvider}from"./base-provider";const errorGas=["call","estimateGas"];function spelunk(value,requireData){if(null==value)return null;if("string"==typeof value.message&&value.message.match("reverted")){const data=isHexString(value.data)?value.data:null;if(!requireData||data)return{message:value.message,data:data}}if("object"==typeof value){for(const key in value){const result=spelunk(value[key],requireData);if(result)return result}return null}if("string"==typeof value)try{return spelunk(JSON.parse(value),requireData)}catch(error){}return null}function checkError(method,error,params){const transaction=params.transaction||params.signedTransaction;if("call"===method){const result=spelunk(error,!0);if(result)return result.data;logger.throwError("missing revert data in call exception; Transaction reverted without a reason string",Logger.errors.CALL_EXCEPTION,{data:"0x",transaction:transaction,error:error})}if("estimateGas"===method){let result=spelunk(error.body,!1);null==result&&(result=spelunk(error,!1)),result&&logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",Logger.errors.UNPREDICTABLE_GAS_LIMIT,{reason:result.message,method:method,transaction:transaction,error:error})}let message=error.message;throw error.code===Logger.errors.SERVER_ERROR&&error.error&&"string"==typeof error.error.message?message=error.error.message:"string"==typeof error.body?message=error.body:"string"==typeof error.responseText&&(message=error.responseText),message=(message||"").toLowerCase(),message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)&&logger.throwError("insufficient funds for intrinsic transaction cost",Logger.errors.INSUFFICIENT_FUNDS,{error:error,method:method,transaction:transaction}),message.match(/nonce (is )?too low/i)&&logger.throwError("nonce has already been used",Logger.errors.NONCE_EXPIRED,{error:error,method:method,transaction:transaction}),message.match(/replacement transaction underpriced|transaction gas price.*too low/i)&&logger.throwError("replacement fee too low",Logger.errors.REPLACEMENT_UNDERPRICED,{error:error,method:method,transaction:transaction}),message.match(/only replay-protected/i)&&logger.throwError("legacy pre-eip-155 transactions not supported",Logger.errors.UNSUPPORTED_OPERATION,{error:error,method:method,transaction:transaction}),errorGas.indexOf(method)>=0&&message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)&&logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",Logger.errors.UNPREDICTABLE_GAS_LIMIT,{error:error,method:method,transaction:transaction}),error}function timer(timeout){return new Promise((function(resolve){setTimeout(resolve,timeout)}))}function getResult(payload){if(payload.error){const error=new Error(payload.error.message);throw error.code=payload.error.code,error.data=payload.error.data,error}return payload.result}function getLowerCase(value){return value?value.toLowerCase():value}const _constructorGuard={};export class JsonRpcSigner extends Signer{constructor(constructorGuard,provider,addressOrIndex){if(super(),constructorGuard!==_constructorGuard)throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");defineReadOnly(this,"provider",provider),null==addressOrIndex&&(addressOrIndex=0),"string"==typeof addressOrIndex?(defineReadOnly(this,"_address",this.provider.formatter.address(addressOrIndex)),defineReadOnly(this,"_index",null)):"number"==typeof addressOrIndex?(defineReadOnly(this,"_index",addressOrIndex),defineReadOnly(this,"_address",null)):logger.throwArgumentError("invalid address or index","addressOrIndex",addressOrIndex)}connect(provider){return logger.throwError("cannot alter JSON-RPC Signer connection",Logger.errors.UNSUPPORTED_OPERATION,{operation:"connect"})}connectUnchecked(){return new UncheckedJsonRpcSigner(_constructorGuard,this.provider,this._address||this._index)}getAddress(){return this._address?Promise.resolve(this._address):this.provider.send("eth_accounts",[]).then((accounts=>(accounts.length<=this._index&&logger.throwError("unknown account #"+this._index,Logger.errors.UNSUPPORTED_OPERATION,{operation:"getAddress"}),this.provider.formatter.address(accounts[this._index]))))}sendUncheckedTransaction(transaction){transaction=shallowCopy(transaction);const fromAddress=this.getAddress().then((address=>(address&&(address=address.toLowerCase()),address)));if(null==transaction.gasLimit){const estimate=shallowCopy(transaction);estimate.from=fromAddress,transaction.gasLimit=this.provider.estimateGas(estimate)}return null!=transaction.to&&(transaction.to=Promise.resolve(transaction.to).then((to=>__awaiter(this,void 0,void 0,(function*(){if(null==to)return null;const address=yield this.provider.resolveName(to);return null==address&&logger.throwArgumentError("provided ENS name resolves to null","tx.to",to),address}))))),resolveProperties({tx:resolveProperties(transaction),sender:fromAddress}).then((({tx:tx,sender:sender})=>{null!=tx.from?tx.from.toLowerCase()!==sender&&logger.throwArgumentError("from address mismatch","transaction",transaction):tx.from=sender;const hexTx=this.provider.constructor.hexlifyTransaction(tx,{from:!0});return this.provider.send("eth_sendTransaction",[hexTx]).then((hash=>hash),(error=>("string"==typeof error.message&&error.message.match(/user denied/i)&&logger.throwError("user rejected transaction",Logger.errors.ACTION_REJECTED,{action:"sendTransaction",transaction:tx}),checkError("sendTransaction",error,hexTx))))}))}signTransaction(transaction){return logger.throwError("signing transactions is unsupported",Logger.errors.UNSUPPORTED_OPERATION,{operation:"signTransaction"})}sendTransaction(transaction){return __awaiter(this,void 0,void 0,(function*(){const blockNumber=yield this.provider._getInternalBlockNumber(100+2*this.provider.pollingInterval),hash=yield this.sendUncheckedTransaction(transaction);try{return yield poll((()=>__awaiter(this,void 0,void 0,(function*(){const tx=yield this.provider.getTransaction(hash);if(null!==tx)return this.provider._wrapTransaction(tx,hash,blockNumber)}))),{oncePoll:this.provider})}catch(error){throw error.transactionHash=hash,error}}))}signMessage(message){return __awaiter(this,void 0,void 0,(function*(){const data="string"==typeof message?toUtf8Bytes(message):message,address=yield this.getAddress();try{return yield this.provider.send("personal_sign",[hexlify(data),address.toLowerCase()])}catch(error){throw"string"==typeof error.message&&error.message.match(/user denied/i)&&logger.throwError("user rejected signing",Logger.errors.ACTION_REJECTED,{action:"signMessage",from:address,messageData:message}),error}}))}_legacySignMessage(message){return __awaiter(this,void 0,void 0,(function*(){const data="string"==typeof message?toUtf8Bytes(message):message,address=yield this.getAddress();try{return yield this.provider.send("eth_sign",[address.toLowerCase(),hexlify(data)])}catch(error){throw"string"==typeof error.message&&error.message.match(/user denied/i)&&logger.throwError("user rejected signing",Logger.errors.ACTION_REJECTED,{action:"_legacySignMessage",from:address,messageData:message}),error}}))}_signTypedData(domain,types,value){return __awaiter(this,void 0,void 0,(function*(){const populated=yield _TypedDataEncoder.resolveNames(domain,types,value,(name=>this.provider.resolveName(name))),address=yield this.getAddress();try{return yield this.provider.send("eth_signTypedData_v4",[address.toLowerCase(),JSON.stringify(_TypedDataEncoder.getPayload(populated.domain,types,populated.value))])}catch(error){throw"string"==typeof error.message&&error.message.match(/user denied/i)&&logger.throwError("user rejected signing",Logger.errors.ACTION_REJECTED,{action:"_signTypedData",from:address,messageData:{domain:populated.domain,types:types,value:populated.value}}),error}}))}unlock(password){return __awaiter(this,void 0,void 0,(function*(){const provider=this.provider,address=yield this.getAddress();return provider.send("personal_unlockAccount",[address.toLowerCase(),password,null])}))}}class UncheckedJsonRpcSigner extends JsonRpcSigner{sendTransaction(transaction){return this.sendUncheckedTransaction(transaction).then((hash=>({hash:hash,nonce:null,gasLimit:null,gasPrice:null,data:null,value:null,chainId:null,confirmations:0,from:null,wait:confirmations=>this.provider.waitForTransaction(hash,confirmations)})))}}const allowedTransactionKeys={chainId:!0,data:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,value:!0,type:!0,accessList:!0,maxFeePerGas:!0,maxPriorityFeePerGas:!0};export class JsonRpcProvider extends BaseProvider{constructor(url,network){let networkOrReady=network;null==networkOrReady&&(networkOrReady=new Promise(((resolve,reject)=>{setTimeout((()=>{this.detectNetwork().then((network=>{resolve(network)}),(error=>{reject(error)}))}),0)}))),super(networkOrReady),url||(url=getStatic(this.constructor,"defaultUrl")()),defineReadOnly(this,"connection","string"==typeof url?Object.freeze({url:url}):Object.freeze(shallowCopy(url))),this._nextId=42}get _cache(){return null==this._eventLoopCache&&(this._eventLoopCache={}),this._eventLoopCache}static defaultUrl(){return"http://localhost:8545"}detectNetwork(){return this._cache.detectNetwork||(this._cache.detectNetwork=this._uncachedDetectNetwork(),setTimeout((()=>{this._cache.detectNetwork=null}),0)),this._cache.detectNetwork}_uncachedDetectNetwork(){return __awaiter(this,void 0,void 0,(function*(){yield timer(0);let chainId=null;try{chainId=yield this.send("eth_chainId",[])}catch(error){try{chainId=yield this.send("net_version",[])}catch(error){}}if(null!=chainId){const getNetwork=getStatic(this.constructor,"getNetwork");try{return getNetwork(BigNumber.from(chainId).toNumber())}catch(error){return logger.throwError("could not detect network",Logger.errors.NETWORK_ERROR,{chainId:chainId,event:"invalidNetwork",serverError:error})}}return logger.throwError("could not detect network",Logger.errors.NETWORK_ERROR,{event:"noNetwork"})}))}getSigner(addressOrIndex){return new JsonRpcSigner(_constructorGuard,this,addressOrIndex)}getUncheckedSigner(addressOrIndex){return this.getSigner(addressOrIndex).connectUnchecked()}listAccounts(){return this.send("eth_accounts",[]).then((accounts=>accounts.map((a=>this.formatter.address(a)))))}send(method,params){const request={method:method,params:params,id:this._nextId++,jsonrpc:"2.0"};this.emit("debug",{action:"request",request:deepCopy(request),provider:this});const cache=["eth_chainId","eth_blockNumber"].indexOf(method)>=0;if(cache&&this._cache[method])return this._cache[method];const result=fetchJson(this.connection,JSON.stringify(request),getResult).then((result=>(this.emit("debug",{action:"response",request:request,response:result,provider:this}),result)),(error=>{throw this.emit("debug",{action:"response",error:error,request:request,provider:this}),error}));return cache&&(this._cache[method]=result,setTimeout((()=>{this._cache[method]=null}),0)),result}prepareRequest(method,params){switch(method){case"getBlockNumber":return["eth_blockNumber",[]];case"getGasPrice":return["eth_gasPrice",[]];case"getBalance":return["eth_getBalance",[getLowerCase(params.address),params.blockTag]];case"getTransactionCount":return["eth_getTransactionCount",[getLowerCase(params.address),params.blockTag]];case"getCode":return["eth_getCode",[getLowerCase(params.address),params.blockTag]];case"getStorageAt":return["eth_getStorageAt",[getLowerCase(params.address),hexZeroPad(params.position,32),params.blockTag]];case"sendTransaction":return["eth_sendRawTransaction",[params.signedTransaction]];case"getBlock":return params.blockTag?["eth_getBlockByNumber",[params.blockTag,!!params.includeTransactions]]:params.blockHash?["eth_getBlockByHash",[params.blockHash,!!params.includeTransactions]]:null;case"getTransaction":return["eth_getTransactionByHash",[params.transactionHash]];case"getTransactionReceipt":return["eth_getTransactionReceipt",[params.transactionHash]];case"call":return["eth_call",[getStatic(this.constructor,"hexlifyTransaction")(params.transaction,{from:!0}),params.blockTag]];case"estimateGas":return["eth_estimateGas",[getStatic(this.constructor,"hexlifyTransaction")(params.transaction,{from:!0})]];case"getLogs":return params.filter&&null!=params.filter.address&&(params.filter.address=getLowerCase(params.filter.address)),["eth_getLogs",[params.filter]]}return null}perform(method,params){return __awaiter(this,void 0,void 0,(function*(){if("call"===method||"estimateGas"===method){const tx=params.transaction;if(tx&&null!=tx.type&&BigNumber.from(tx.type).isZero()&&null==tx.maxFeePerGas&&null==tx.maxPriorityFeePerGas){const feeData=yield this.getFeeData();null==feeData.maxFeePerGas&&null==feeData.maxPriorityFeePerGas&&((params=shallowCopy(params)).transaction=shallowCopy(tx),delete params.transaction.type)}}const args=this.prepareRequest(method,params);null==args&&logger.throwError(method+" not implemented",Logger.errors.NOT_IMPLEMENTED,{operation:method});try{return yield this.send(args[0],args[1])}catch(error){return checkError(method,error,params)}}))}_startEvent(event){"pending"===event.tag&&this._startPending(),super._startEvent(event)}_startPending(){if(null!=this._pendingFilter)return;const self=this,pendingFilter=this.send("eth_newPendingTransactionFilter",[]);this._pendingFilter=pendingFilter,pendingFilter.then((function(filterId){return function poll(){self.send("eth_getFilterChanges",[filterId]).then((function(hashes){if(self._pendingFilter!=pendingFilter)return null;let seq=Promise.resolve();return hashes.forEach((function(hash){self._emitted["t:"+hash.toLowerCase()]="pending",seq=seq.then((function(){return self.getTransaction(hash).then((function(tx){return self.emit("pending",tx),null}))}))})),seq.then((function(){return timer(1e3)}))})).then((function(){if(self._pendingFilter==pendingFilter)return setTimeout((function(){poll()}),0),null;self.send("eth_uninstallFilter",[filterId])})).catch((error=>{}))}(),filterId})).catch((error=>{}))}_stopEvent(event){"pending"===event.tag&&0===this.listenerCount("pending")&&(this._pendingFilter=null),super._stopEvent(event)}static hexlifyTransaction(transaction,allowExtra){const allowed=shallowCopy(allowedTransactionKeys);if(allowExtra)for(const key in allowExtra)allowExtra[key]&&(allowed[key]=!0);checkProperties(transaction,allowed);const result={};return["chainId","gasLimit","gasPrice","type","maxFeePerGas","maxPriorityFeePerGas","nonce","value"].forEach((function(key){if(null==transaction[key])return;const value=hexValue(BigNumber.from(transaction[key]));"gasLimit"===key&&(key="gas"),result[key]=value})),["from","to","data"].forEach((function(key){null!=transaction[key]&&(result[key]=hexlify(transaction[key]))})),transaction.accessList&&(result.accessList=accessListify(transaction.accessList)),result}}