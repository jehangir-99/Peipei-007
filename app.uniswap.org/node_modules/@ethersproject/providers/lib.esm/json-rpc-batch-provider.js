import{deepCopy}from"@ethersproject/properties";import{fetchJson}from"@ethersproject/web";import{JsonRpcProvider}from"./json-rpc-provider";export class JsonRpcBatchProvider extends JsonRpcProvider{send(method,params){const request={method:method,params:params,id:this._nextId++,jsonrpc:"2.0"};null==this._pendingBatch&&(this._pendingBatch=[]);const inflightRequest={request:request,resolve:null,reject:null},promise=new Promise(((resolve,reject)=>{inflightRequest.resolve=resolve,inflightRequest.reject=reject}));return this._pendingBatch.push(inflightRequest),this._pendingBatchAggregator||(this._pendingBatchAggregator=setTimeout((()=>{const batch=this._pendingBatch;this._pendingBatch=null,this._pendingBatchAggregator=null;const request=batch.map((inflight=>inflight.request));return this.emit("debug",{action:"requestBatch",request:deepCopy(request),provider:this}),fetchJson(this.connection,JSON.stringify(request)).then((result=>{this.emit("debug",{action:"response",request:request,response:result,provider:this}),batch.forEach(((inflightRequest,index)=>{const payload=result[index];if(payload.error){const error=new Error(payload.error.message);error.code=payload.error.code,error.data=payload.error.data,inflightRequest.reject(error)}else inflightRequest.resolve(payload.result)}))}),(error=>{this.emit("debug",{action:"response",error:error,request:request,provider:this}),batch.forEach((inflightRequest=>{inflightRequest.reject(error)}))}))}),10)),promise}}