"use strict";import{getAddress,getContractAddress}from"@ethersproject/address";import{BigNumber}from"@ethersproject/bignumber";import{hexDataLength,hexDataSlice,hexValue,hexZeroPad,isHexString}from"@ethersproject/bytes";import{AddressZero}from"@ethersproject/constants";import{shallowCopy}from"@ethersproject/properties";import{accessListify,parse as parseTransaction}from"@ethersproject/transactions";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version);export class Formatter{constructor(){this.formats=this.getDefaultFormats()}getDefaultFormats(){const formats={},address=this.address.bind(this),bigNumber=this.bigNumber.bind(this),blockTag=this.blockTag.bind(this),data=this.data.bind(this),hash=this.hash.bind(this),hex=this.hex.bind(this),number=this.number.bind(this),type=this.type.bind(this);return formats.transaction={hash:hash,type:type,accessList:Formatter.allowNull(this.accessList.bind(this),null),blockHash:Formatter.allowNull(hash,null),blockNumber:Formatter.allowNull(number,null),transactionIndex:Formatter.allowNull(number,null),confirmations:Formatter.allowNull(number,null),from:address,gasPrice:Formatter.allowNull(bigNumber),maxPriorityFeePerGas:Formatter.allowNull(bigNumber),maxFeePerGas:Formatter.allowNull(bigNumber),gasLimit:bigNumber,to:Formatter.allowNull(address,null),value:bigNumber,nonce:number,data:data,r:Formatter.allowNull(this.uint256),s:Formatter.allowNull(this.uint256),v:Formatter.allowNull(number),creates:Formatter.allowNull(address,null),raw:Formatter.allowNull(data)},formats.transactionRequest={from:Formatter.allowNull(address),nonce:Formatter.allowNull(number),gasLimit:Formatter.allowNull(bigNumber),gasPrice:Formatter.allowNull(bigNumber),maxPriorityFeePerGas:Formatter.allowNull(bigNumber),maxFeePerGas:Formatter.allowNull(bigNumber),to:Formatter.allowNull(address),value:Formatter.allowNull(bigNumber),data:Formatter.allowNull((v=>this.data(v,!0))),type:Formatter.allowNull(number),accessList:Formatter.allowNull(this.accessList.bind(this),null)},formats.receiptLog={transactionIndex:number,blockNumber:number,transactionHash:hash,address:address,topics:Formatter.arrayOf(hash),data:data,logIndex:number,blockHash:hash},formats.receipt={to:Formatter.allowNull(this.address,null),from:Formatter.allowNull(this.address,null),contractAddress:Formatter.allowNull(address,null),transactionIndex:number,root:Formatter.allowNull(hex),gasUsed:bigNumber,logsBloom:Formatter.allowNull(data),blockHash:hash,transactionHash:hash,logs:Formatter.arrayOf(this.receiptLog.bind(this)),blockNumber:number,confirmations:Formatter.allowNull(number,null),cumulativeGasUsed:bigNumber,effectiveGasPrice:Formatter.allowNull(bigNumber),status:Formatter.allowNull(number),type:type},formats.block={hash:Formatter.allowNull(hash),parentHash:hash,number:number,timestamp:number,nonce:Formatter.allowNull(hex),difficulty:this.difficulty.bind(this),gasLimit:bigNumber,gasUsed:bigNumber,miner:Formatter.allowNull(address),extraData:data,transactions:Formatter.allowNull(Formatter.arrayOf(hash)),baseFeePerGas:Formatter.allowNull(bigNumber)},formats.blockWithTransactions=shallowCopy(formats.block),formats.blockWithTransactions.transactions=Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this))),formats.filter={fromBlock:Formatter.allowNull(blockTag,void 0),toBlock:Formatter.allowNull(blockTag,void 0),blockHash:Formatter.allowNull(hash,void 0),address:Formatter.allowNull(address,void 0),topics:Formatter.allowNull(this.topics.bind(this),void 0)},formats.filterLog={blockNumber:Formatter.allowNull(number),blockHash:Formatter.allowNull(hash),transactionIndex:number,removed:Formatter.allowNull(this.boolean.bind(this)),address:address,data:Formatter.allowFalsish(data,"0x"),topics:Formatter.arrayOf(hash),transactionHash:hash,logIndex:number},formats}accessList(accessList){return accessListify(accessList||[])}number(number){return"0x"===number?0:BigNumber.from(number).toNumber()}type(number){return"0x"===number||null==number?0:BigNumber.from(number).toNumber()}bigNumber(value){return BigNumber.from(value)}boolean(value){if("boolean"==typeof value)return value;if("string"==typeof value){if("true"===(value=value.toLowerCase()))return!0;if("false"===value)return!1}throw new Error("invalid boolean - "+value)}hex(value,strict){return"string"==typeof value&&(strict||"0x"===value.substring(0,2)||(value="0x"+value),isHexString(value))?value.toLowerCase():logger.throwArgumentError("invalid hash","value",value)}data(value,strict){const result=this.hex(value,strict);if(result.length%2!=0)throw new Error("invalid data; odd-length - "+value);return result}address(value){return getAddress(value)}callAddress(value){if(!isHexString(value,32))return null;const address=getAddress(hexDataSlice(value,12));return address===AddressZero?null:address}contractAddress(value){return getContractAddress(value)}blockTag(blockTag){if(null==blockTag)return"latest";if("earliest"===blockTag)return"0x0";switch(blockTag){case"earliest":return"0x0";case"latest":case"pending":case"safe":case"finalized":return blockTag}if("number"==typeof blockTag||isHexString(blockTag))return hexValue(blockTag);throw new Error("invalid blockTag")}hash(value,strict){const result=this.hex(value,strict);return 32!==hexDataLength(result)?logger.throwArgumentError("invalid hash","value",value):result}difficulty(value){if(null==value)return null;const v=BigNumber.from(value);try{return v.toNumber()}catch(error){}return null}uint256(value){if(!isHexString(value))throw new Error("invalid uint256");return hexZeroPad(value,32)}_block(value,format){null!=value.author&&null==value.miner&&(value.miner=value.author);const difficulty=null!=value._difficulty?value._difficulty:value.difficulty,result=Formatter.check(format,value);return result._difficulty=null==difficulty?null:BigNumber.from(difficulty),result}block(value){return this._block(value,this.formats.block)}blockWithTransactions(value){return this._block(value,this.formats.blockWithTransactions)}transactionRequest(value){return Formatter.check(this.formats.transactionRequest,value)}transactionResponse(transaction){null!=transaction.gas&&null==transaction.gasLimit&&(transaction.gasLimit=transaction.gas),transaction.to&&BigNumber.from(transaction.to).isZero()&&(transaction.to="0x0000000000000000000000000000000000000000"),null!=transaction.input&&null==transaction.data&&(transaction.data=transaction.input),null==transaction.to&&null==transaction.creates&&(transaction.creates=this.contractAddress(transaction)),1!==transaction.type&&2!==transaction.type||null!=transaction.accessList||(transaction.accessList=[]);const result=Formatter.check(this.formats.transaction,transaction);if(null!=transaction.chainId){let chainId=transaction.chainId;isHexString(chainId)&&(chainId=BigNumber.from(chainId).toNumber()),result.chainId=chainId}else{let chainId=transaction.networkId;null==chainId&&null==result.v&&(chainId=transaction.chainId),isHexString(chainId)&&(chainId=BigNumber.from(chainId).toNumber()),"number"!=typeof chainId&&null!=result.v&&(chainId=(result.v-35)/2,chainId<0&&(chainId=0),chainId=parseInt(chainId)),"number"!=typeof chainId&&(chainId=0),result.chainId=chainId}return result.blockHash&&"x"===result.blockHash.replace(/0/g,"")&&(result.blockHash=null),result}transaction(value){return parseTransaction(value)}receiptLog(value){return Formatter.check(this.formats.receiptLog,value)}receipt(value){const result=Formatter.check(this.formats.receipt,value);if(null!=result.root)if(result.root.length<=4){const value=BigNumber.from(result.root).toNumber();0===value||1===value?(null!=result.status&&result.status!==value&&logger.throwArgumentError("alt-root-status/status mismatch","value",{root:result.root,status:result.status}),result.status=value,delete result.root):logger.throwArgumentError("invalid alt-root-status","value.root",result.root)}else 66!==result.root.length&&logger.throwArgumentError("invalid root hash","value.root",result.root);return null!=result.status&&(result.byzantium=!0),result}topics(value){return Array.isArray(value)?value.map((v=>this.topics(v))):null!=value?this.hash(value,!0):null}filter(value){return Formatter.check(this.formats.filter,value)}filterLog(value){return Formatter.check(this.formats.filterLog,value)}static check(format,object){const result={};for(const key in format)try{const value=format[key](object[key]);void 0!==value&&(result[key]=value)}catch(error){throw error.checkKey=key,error.checkValue=object[key],error}return result}static allowNull(format,nullValue){return function(value){return null==value?nullValue:format(value)}}static allowFalsish(format,replaceValue){return function(value){return value?format(value):replaceValue}}static arrayOf(format){return function(array){if(!Array.isArray(array))throw new Error("not an array");const result=[];return array.forEach((function(value){result.push(format(value))})),result}}}export function isCommunityResourcable(value){return value&&"function"==typeof value.isCommunityResource}export function isCommunityResource(value){return isCommunityResourcable(value)&&value.isCommunityResource()}let throttleMessage=!1;export function showThrottleMessage(){throttleMessage||(throttleMessage=!0,console.log("========= NOTICE ========="),console.log("Request-Rate Exceeded  (this message will not be repeated)"),console.log(""),console.log("The default API keys for each service are provided as a highly-throttled,"),console.log("community resource for low-traffic projects and early prototyping."),console.log(""),console.log("While your application will continue to function, we highly recommended"),console.log("signing up for your own API keys to improve performance, increase your"),console.log("request rate/limit and enable other perks, such as metrics and advanced APIs."),console.log(""),console.log("For more details: https://docs.ethers.io/api-keys/"),console.log("=========================="))}