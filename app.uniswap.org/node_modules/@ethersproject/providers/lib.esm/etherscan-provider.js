"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P((function(resolve){resolve(value)}))).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};import{hexlify,hexValue,isHexString}from"@ethersproject/bytes";import{deepCopy,defineReadOnly}from"@ethersproject/properties";import{accessListify}from"@ethersproject/transactions";import{fetchJson}from"@ethersproject/web";import{showThrottleMessage}from"./formatter";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version);import{BaseProvider}from"./base-provider";function getTransactionPostData(transaction){const result={};for(let key in transaction){if(null==transaction[key])continue;let value=transaction[key];"type"===key&&0===value||(value={type:!0,gasLimit:!0,gasPrice:!0,maxFeePerGs:!0,maxPriorityFeePerGas:!0,nonce:!0,value:!0}[key]?hexValue(hexlify(value)):"accessList"===key?"["+accessListify(value).map((set=>`{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`)).join(",")+"]":hexlify(value),result[key]=value)}return result}function getResult(result){if(0==result.status&&("No records found"===result.message||"No transactions found"===result.message))return result.result;if(1!=result.status||"string"!=typeof result.message||!result.message.match(/^OK/)){const error=new Error("invalid response");throw error.result=JSON.stringify(result),(result.result||"").toLowerCase().indexOf("rate limit")>=0&&(error.throttleRetry=!0),error}return result.result}function getJsonResult(result){if(result&&0==result.status&&"NOTOK"==result.message&&(result.result||"").toLowerCase().indexOf("rate limit")>=0){const error=new Error("throttled response");throw error.result=JSON.stringify(result),error.throttleRetry=!0,error}if("2.0"!=result.jsonrpc){const error=new Error("invalid response");throw error.result=JSON.stringify(result),error}if(result.error){const error=new Error(result.error.message||"unknown error");throw result.error.code&&(error.code=result.error.code),result.error.data&&(error.data=result.error.data),error}return result.result}function checkLogTag(blockTag){if("pending"===blockTag)throw new Error("pending not supported");return"latest"===blockTag?blockTag:parseInt(blockTag.substring(2),16)}function checkError(method,error,transaction){if("call"===method&&error.code===Logger.errors.SERVER_ERROR){const e=error.error;if(e&&(e.message.match(/reverted/i)||e.message.match(/VM execution error/i))){let data=e.data;if(data&&(data="0x"+data.replace(/^.*0x/i,"")),isHexString(data))return data;logger.throwError("missing revert data in call exception",Logger.errors.CALL_EXCEPTION,{error:error,data:"0x"})}}let message=error.message;throw error.code===Logger.errors.SERVER_ERROR&&(error.error&&"string"==typeof error.error.message?message=error.error.message:"string"==typeof error.body?message=error.body:"string"==typeof error.responseText&&(message=error.responseText)),message=(message||"").toLowerCase(),message.match(/insufficient funds/)&&logger.throwError("insufficient funds for intrinsic transaction cost",Logger.errors.INSUFFICIENT_FUNDS,{error:error,method:method,transaction:transaction}),message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)&&logger.throwError("nonce has already been used",Logger.errors.NONCE_EXPIRED,{error:error,method:method,transaction:transaction}),message.match(/another transaction with same nonce/)&&logger.throwError("replacement fee too low",Logger.errors.REPLACEMENT_UNDERPRICED,{error:error,method:method,transaction:transaction}),message.match(/execution failed due to an exception|execution reverted/)&&logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",Logger.errors.UNPREDICTABLE_GAS_LIMIT,{error:error,method:method,transaction:transaction}),error}export class EtherscanProvider extends BaseProvider{constructor(network,apiKey){super(network),defineReadOnly(this,"baseUrl",this.getBaseUrl()),defineReadOnly(this,"apiKey",apiKey||null)}getBaseUrl(){switch(this.network?this.network.name:"invalid"){case"homestead":return"https://api.etherscan.io";case"goerli":return"https://api-goerli.etherscan.io";case"sepolia":return"https://api-sepolia.etherscan.io";case"matic":return"https://api.polygonscan.com";case"maticmum":return"https://api-testnet.polygonscan.com";case"arbitrum":return"https://api.arbiscan.io";case"arbitrum-goerli":return"https://api-goerli.arbiscan.io";case"optimism":return"https://api-optimistic.etherscan.io";case"optimism-goerli":return"https://api-goerli-optimistic.etherscan.io"}return logger.throwArgumentError("unsupported network","network",this.network.name)}getUrl(module,params){const query=Object.keys(params).reduce(((accum,key)=>{const value=params[key];return null!=value&&(accum+=`&${key}=${value}`),accum}),""),apiKey=this.apiKey?`&apikey=${this.apiKey}`:"";return`${this.baseUrl}/api?module=${module}${query}${apiKey}`}getPostUrl(){return`${this.baseUrl}/api`}getPostData(module,params){return params.module=module,params.apikey=this.apiKey,params}fetch(module,params,post){return __awaiter(this,void 0,void 0,(function*(){const url=post?this.getPostUrl():this.getUrl(module,params),payload=post?this.getPostData(module,params):null,procFunc="proxy"===module?getJsonResult:getResult;this.emit("debug",{action:"request",request:url,provider:this});const connection={url:url,throttleSlotInterval:1e3,throttleCallback:(attempt,url)=>(this.isCommunityResource()&&showThrottleMessage(),Promise.resolve(!0))};let payloadStr=null;payload&&(connection.headers={"content-type":"application/x-www-form-urlencoded; charset=UTF-8"},payloadStr=Object.keys(payload).map((key=>`${key}=${payload[key]}`)).join("&"));const result=yield fetchJson(connection,payloadStr,procFunc||getJsonResult);return this.emit("debug",{action:"response",request:url,response:deepCopy(result),provider:this}),result}))}detectNetwork(){return __awaiter(this,void 0,void 0,(function*(){return this.network}))}perform(method,params){const _super=Object.create(null,{perform:{get:()=>super.perform}});return __awaiter(this,void 0,void 0,(function*(){switch(method){case"getBlockNumber":return this.fetch("proxy",{action:"eth_blockNumber"});case"getGasPrice":return this.fetch("proxy",{action:"eth_gasPrice"});case"getBalance":return this.fetch("account",{action:"balance",address:params.address,tag:params.blockTag});case"getTransactionCount":return this.fetch("proxy",{action:"eth_getTransactionCount",address:params.address,tag:params.blockTag});case"getCode":return this.fetch("proxy",{action:"eth_getCode",address:params.address,tag:params.blockTag});case"getStorageAt":return this.fetch("proxy",{action:"eth_getStorageAt",address:params.address,position:params.position,tag:params.blockTag});case"sendTransaction":return this.fetch("proxy",{action:"eth_sendRawTransaction",hex:params.signedTransaction},!0).catch((error=>checkError("sendTransaction",error,params.signedTransaction)));case"getBlock":if(params.blockTag)return this.fetch("proxy",{action:"eth_getBlockByNumber",tag:params.blockTag,boolean:params.includeTransactions?"true":"false"});throw new Error("getBlock by blockHash not implemented");case"getTransaction":return this.fetch("proxy",{action:"eth_getTransactionByHash",txhash:params.transactionHash});case"getTransactionReceipt":return this.fetch("proxy",{action:"eth_getTransactionReceipt",txhash:params.transactionHash});case"call":{if("latest"!==params.blockTag)throw new Error("EtherscanProvider does not support blockTag for call");const postData=getTransactionPostData(params.transaction);postData.module="proxy",postData.action="eth_call";try{return yield this.fetch("proxy",postData,!0)}catch(error){return checkError("call",error,params.transaction)}}case"estimateGas":{const postData=getTransactionPostData(params.transaction);postData.module="proxy",postData.action="eth_estimateGas";try{return yield this.fetch("proxy",postData,!0)}catch(error){return checkError("estimateGas",error,params.transaction)}}case"getLogs":{const args={action:"getLogs"};if(params.filter.fromBlock&&(args.fromBlock=checkLogTag(params.filter.fromBlock)),params.filter.toBlock&&(args.toBlock=checkLogTag(params.filter.toBlock)),params.filter.address&&(args.address=params.filter.address),params.filter.topics&&params.filter.topics.length>0&&(params.filter.topics.length>1&&logger.throwError("unsupported topic count",Logger.errors.UNSUPPORTED_OPERATION,{topics:params.filter.topics}),1===params.filter.topics.length)){const topic0=params.filter.topics[0];"string"==typeof topic0&&66===topic0.length||logger.throwError("unsupported topic format",Logger.errors.UNSUPPORTED_OPERATION,{topic0:topic0}),args.topic0=topic0}const logs=yield this.fetch("logs",args);let blocks={};for(let i=0;i<logs.length;i++){const log=logs[i];if(null==log.blockHash){if(null==blocks[log.blockNumber]){const block=yield this.getBlock(log.blockNumber);block&&(blocks[log.blockNumber]=block.hash)}log.blockHash=blocks[log.blockNumber]}}return logs}case"getEtherPrice":return"homestead"!==this.network.name?0:parseFloat((yield this.fetch("stats",{action:"ethprice"})).ethusd)}return _super.perform.call(this,method,params)}))}getHistory(addressOrName,startBlock,endBlock){return __awaiter(this,void 0,void 0,(function*(){const params={action:"txlist",address:yield this.resolveName(addressOrName),startblock:null==startBlock?0:startBlock,endblock:null==endBlock?99999999:endBlock,sort:"asc"};return(yield this.fetch("account",params)).map((tx=>{["contractAddress","to"].forEach((function(key){""==tx[key]&&delete tx[key]})),null==tx.creates&&null!=tx.contractAddress&&(tx.creates=tx.contractAddress);const item=this.formatter.transactionResponse(tx);return tx.timeStamp&&(item.timestamp=parseInt(tx.timeStamp)),item}))}))}isCommunityResource(){return null==this.apiKey}}