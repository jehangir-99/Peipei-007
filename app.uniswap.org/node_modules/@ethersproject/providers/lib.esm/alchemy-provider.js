"use strict";import{defineReadOnly}from"@ethersproject/properties";import{showThrottleMessage}from"./formatter";import{WebSocketProvider}from"./websocket-provider";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version);import{UrlJsonRpcProvider}from"./url-json-rpc-provider";const defaultApiKey="_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";export class AlchemyWebSocketProvider extends WebSocketProvider{constructor(network,apiKey){const provider=new AlchemyProvider(network,apiKey);super(provider.connection.url.replace(/^http/i,"ws").replace(".alchemyapi.",".ws.alchemyapi."),provider.network),defineReadOnly(this,"apiKey",provider.apiKey)}isCommunityResource(){return this.apiKey===defaultApiKey}}export class AlchemyProvider extends UrlJsonRpcProvider{static getWebSocketProvider(network,apiKey){return new AlchemyWebSocketProvider(network,apiKey)}static getApiKey(apiKey){return null==apiKey?defaultApiKey:(apiKey&&"string"!=typeof apiKey&&logger.throwArgumentError("invalid apiKey","apiKey",apiKey),apiKey)}static getUrl(network,apiKey){let host=null;switch(network.name){case"homestead":host="eth-mainnet.alchemyapi.io/v2/";break;case"goerli":host="eth-goerli.g.alchemy.com/v2/";break;case"matic":host="polygon-mainnet.g.alchemy.com/v2/";break;case"maticmum":host="polygon-mumbai.g.alchemy.com/v2/";break;case"arbitrum":host="arb-mainnet.g.alchemy.com/v2/";break;case"arbitrum-goerli":host="arb-goerli.g.alchemy.com/v2/";break;case"optimism":host="opt-mainnet.g.alchemy.com/v2/";break;case"optimism-goerli":host="opt-goerli.g.alchemy.com/v2/";break;default:logger.throwArgumentError("unsupported network","network",arguments[0])}return{allowGzip:!0,url:"https://"+host+apiKey,throttleCallback:(attempt,url)=>(apiKey===defaultApiKey&&showThrottleMessage(),Promise.resolve(!0))}}isCommunityResource(){return this.apiKey===defaultApiKey}}