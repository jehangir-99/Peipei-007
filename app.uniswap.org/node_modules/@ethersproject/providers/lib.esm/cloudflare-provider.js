"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P((function(resolve){resolve(value)}))).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};import{UrlJsonRpcProvider}from"./url-json-rpc-provider";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version);export class CloudflareProvider extends UrlJsonRpcProvider{static getApiKey(apiKey){return null!=apiKey&&logger.throwArgumentError("apiKey not supported for cloudflare","apiKey",apiKey),null}static getUrl(network,apiKey){let host=null;if("homestead"===network.name)host="https://cloudflare-eth.com/";else logger.throwArgumentError("unsupported network","network",arguments[0]);return host}perform(method,params){const _super=Object.create(null,{perform:{get:()=>super.perform}});return __awaiter(this,void 0,void 0,(function*(){if("getBlockNumber"===method){return(yield _super.perform.call(this,"getBlock",{blockTag:"latest"})).number}return _super.perform.call(this,method,params)}))}}