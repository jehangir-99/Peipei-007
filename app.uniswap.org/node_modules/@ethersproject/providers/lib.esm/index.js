"use strict";import{Provider}from"@ethersproject/abstract-provider";import{getNetwork}from"@ethersproject/networks";import{BaseProvider,Resolver}from"./base-provider";import{AlchemyProvider,AlchemyWebSocketProvider}from"./alchemy-provider";import{AnkrProvider}from"./ankr-provider";import{CloudflareProvider}from"./cloudflare-provider";import{EtherscanProvider}from"./etherscan-provider";import{FallbackProvider}from"./fallback-provider";import{IpcProvider}from"./ipc-provider";import{InfuraProvider,InfuraWebSocketProvider}from"./infura-provider";import{JsonRpcProvider,JsonRpcSigner}from"./json-rpc-provider";import{JsonRpcBatchProvider}from"./json-rpc-batch-provider";import{NodesmithProvider}from"./nodesmith-provider";import{PocketProvider}from"./pocket-provider";import{StaticJsonRpcProvider,UrlJsonRpcProvider}from"./url-json-rpc-provider";import{Web3Provider}from"./web3-provider";import{WebSocketProvider}from"./websocket-provider";import{Formatter,isCommunityResourcable,isCommunityResource,showThrottleMessage}from"./formatter";import{Logger}from"@ethersproject/logger";import{version}from"./_version";const logger=new Logger(version);function getDefaultProvider(network,options){if(null==network&&(network="homestead"),"string"==typeof network){const match=network.match(/^(ws|http)s?:/i);if(match)switch(match[1].toLowerCase()){case"http":case"https":return new JsonRpcProvider(network);case"ws":case"wss":return new WebSocketProvider(network);default:logger.throwArgumentError("unsupported URL scheme","network",network)}}const n=getNetwork(network);return n&&n._defaultProvider||logger.throwError("unsupported getDefaultProvider network",Logger.errors.NETWORK_ERROR,{operation:"getDefaultProvider",network:network}),n._defaultProvider({FallbackProvider:FallbackProvider,AlchemyProvider:AlchemyProvider,AnkrProvider:AnkrProvider,CloudflareProvider:CloudflareProvider,EtherscanProvider:EtherscanProvider,InfuraProvider:InfuraProvider,JsonRpcProvider:JsonRpcProvider,NodesmithProvider:NodesmithProvider,PocketProvider:PocketProvider,Web3Provider:Web3Provider,IpcProvider:IpcProvider},options)}export{Provider,BaseProvider,Resolver,UrlJsonRpcProvider,FallbackProvider,AlchemyProvider,AlchemyWebSocketProvider,AnkrProvider,CloudflareProvider,EtherscanProvider,InfuraProvider,InfuraWebSocketProvider,JsonRpcProvider,JsonRpcBatchProvider,NodesmithProvider,PocketProvider,StaticJsonRpcProvider,Web3Provider,WebSocketProvider,IpcProvider,JsonRpcSigner,getDefaultProvider,getNetwork,isCommunityResource,isCommunityResourcable,showThrottleMessage,Formatter};