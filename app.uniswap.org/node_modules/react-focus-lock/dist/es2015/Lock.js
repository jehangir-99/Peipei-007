import _extends from"@babel/runtime/helpers/esm/extends";import*as React from"react";import{node,bool,string,any,arrayOf,oneOfType,object,func}from"prop-types";import*as constants from"focus-lock/constants";import{useMergeRefs}from"use-callback-ref";import{useEffect}from"react";import{hiddenGuard}from"./FocusGuard";import{mediumFocus,mediumBlur,mediumSidecar}from"./medium";var emptyArray=[],FocusLock=React.forwardRef((function(props,parentRef){var _extends2,_React$useState=React.useState(),realObserved=_React$useState[0],setObserved=_React$useState[1],observed=React.useRef(),isActive=React.useRef(!1),originalFocusedElement=React.useRef(null),children=props.children,disabled=props.disabled,noFocusGuards=props.noFocusGuards,persistentFocus=props.persistentFocus,crossFrame=props.crossFrame,autoFocus=props.autoFocus,allowTextSelection=props.allowTextSelection,group=props.group,className=props.className,whiteList=props.whiteList,hasPositiveIndices=props.hasPositiveIndices,_props$shards=props.shards,shards=void 0===_props$shards?emptyArray:_props$shards,_props$as=props.as,Container=void 0===_props$as?"div":_props$as,_props$lockProps=props.lockProps,containerProps=void 0===_props$lockProps?{}:_props$lockProps,SideCar=props.sideCar,shouldReturnFocus=props.returnFocus,focusOptions=props.focusOptions,onActivationCallback=props.onActivation,onDeactivationCallback=props.onDeactivation,id=React.useState({})[0],onActivation=React.useCallback((function(){originalFocusedElement.current=originalFocusedElement.current||document&&document.activeElement,observed.current&&onActivationCallback&&onActivationCallback(observed.current),isActive.current=!0}),[onActivationCallback]),onDeactivation=React.useCallback((function(){isActive.current=!1,onDeactivationCallback&&onDeactivationCallback(observed.current)}),[onDeactivationCallback]);useEffect((function(){disabled||(originalFocusedElement.current=null)}),[]);var returnFocus=React.useCallback((function(allowDefer){var returnFocusTo=originalFocusedElement.current;if(returnFocusTo&&returnFocusTo.focus){var howToReturnFocus="function"==typeof shouldReturnFocus?shouldReturnFocus(returnFocusTo):shouldReturnFocus;if(howToReturnFocus){var returnFocusOptions="object"==typeof howToReturnFocus?howToReturnFocus:void 0;originalFocusedElement.current=null,allowDefer?Promise.resolve().then((function(){return returnFocusTo.focus(returnFocusOptions)})):returnFocusTo.focus(returnFocusOptions)}}}),[shouldReturnFocus]),onFocus=React.useCallback((function(event){isActive.current&&mediumFocus.useMedium(event)}),[]),onBlur=mediumBlur.useMedium,setObserveNode=React.useCallback((function(newObserved){observed.current!==newObserved&&(observed.current=newObserved,setObserved(newObserved))}),[]);"production"!==process.env.NODE_ENV&&(void 0!==allowTextSelection&&console.warn("React-Focus-Lock: allowTextSelection is deprecated and enabled by default"),React.useEffect((function(){observed.current||"string"==typeof Container||console.error("FocusLock: could not obtain ref to internal node")}),[]));var lockProps=_extends(((_extends2={})[constants.FOCUS_DISABLED]=disabled&&"disabled",_extends2[constants.FOCUS_GROUP]=group,_extends2),containerProps),hasLeadingGuards=!0!==noFocusGuards,hasTailingGuards=hasLeadingGuards&&"tail"!==noFocusGuards,mergedRef=useMergeRefs([parentRef,setObserveNode]);return React.createElement(React.Fragment,null,hasLeadingGuards&&[React.createElement("div",{key:"guard-first","data-focus-guard":!0,tabIndex:disabled?-1:0,style:hiddenGuard}),hasPositiveIndices?React.createElement("div",{key:"guard-nearest","data-focus-guard":!0,tabIndex:disabled?-1:1,style:hiddenGuard}):null],!disabled&&React.createElement(SideCar,{id:id,sideCar:mediumSidecar,observed:realObserved,disabled:disabled,persistentFocus:persistentFocus,crossFrame:crossFrame,autoFocus:autoFocus,whiteList:whiteList,shards:shards,onActivation:onActivation,onDeactivation:onDeactivation,returnFocus:returnFocus,focusOptions:focusOptions}),React.createElement(Container,_extends({ref:mergedRef},lockProps,{className:className,onBlur:onBlur,onFocus:onFocus}),children),hasTailingGuards&&React.createElement("div",{"data-focus-guard":!0,tabIndex:disabled?-1:0,style:hiddenGuard}))}));FocusLock.propTypes="production"!==process.env.NODE_ENV?{children:node,disabled:bool,returnFocus:oneOfType([bool,object,func]),focusOptions:object,noFocusGuards:bool,hasPositiveIndices:bool,allowTextSelection:bool,autoFocus:bool,persistentFocus:bool,crossFrame:bool,group:string,className:string,whiteList:func,shards:arrayOf(any),as:oneOfType([string,func,object]),lockProps:object,onActivation:func,onDeactivation:func,sideCar:any.isRequired}:{},FocusLock.defaultProps={children:void 0,disabled:!1,returnFocus:!1,focusOptions:void 0,noFocusGuards:!1,autoFocus:!0,persistentFocus:!1,crossFrame:!0,hasPositiveIndices:void 0,allowTextSelection:void 0,group:void 0,className:void 0,whiteList:void 0,shards:void 0,as:"div",lockProps:{},onActivation:void 0,onDeactivation:void 0};export default FocusLock;