import{defaults,noop,time}from"@motionone/utils";import{stopAnimation}from"./stop-animation.es.js";const createAnimation=factory=>factory(),withControls=(animationFactory,options,duration=defaults.duration)=>new Proxy({animations:animationFactory.map(createAnimation).filter(Boolean),duration:duration,options:options},controls),getActiveAnimation=state=>state.animations[0],controls={get:(target,key)=>{const activeAnimation=getActiveAnimation(target);switch(key){case"duration":return target.duration;case"currentTime":return time.s((null==activeAnimation?void 0:activeAnimation[key])||0);case"playbackRate":case"playState":return null==activeAnimation?void 0:activeAnimation[key];case"finished":return target.finished||(target.finished=Promise.all(target.animations.map(selectFinished)).catch(noop)),target.finished;case"stop":return()=>{target.animations.forEach((animation=>stopAnimation(animation)))};case"forEachNative":return callback=>{target.animations.forEach((animation=>callback(animation,target)))};default:return void 0===(null==activeAnimation?void 0:activeAnimation[key])?void 0:()=>target.animations.forEach((animation=>animation[key]()))}},set:(target,key,value)=>{switch(key){case"currentTime":value=time.ms(value);case"playbackRate":for(let i=0;i<target.animations.length;i++)target.animations[i][key]=value;return!0}return!1}},selectFinished=animation=>animation.finished;export{controls,withControls};