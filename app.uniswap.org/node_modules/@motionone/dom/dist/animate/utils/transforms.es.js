import{noopReturn,addUniqueItem}from"@motionone/utils";import{getAnimationData}from"../data.es.js";const axes=["","X","Y","Z"],order=["translate","scale","rotate","skew"],transformAlias={x:"translateX",y:"translateY",z:"translateZ"},rotation={syntax:"<angle>",initialValue:"0deg",toDefaultUnit:v=>v+"deg"},baseTransformProperties={translate:{syntax:"<length-percentage>",initialValue:"0px",toDefaultUnit:v=>v+"px"},rotate:rotation,scale:{syntax:"<number>",initialValue:1,toDefaultUnit:noopReturn},skew:rotation},transformDefinitions=new Map,asTransformCssVar=name=>`--motion-${name}`,transforms=["x","y","z"];order.forEach((name=>{axes.forEach((axis=>{transforms.push(name+axis),transformDefinitions.set(asTransformCssVar(name+axis),baseTransformProperties[name])}))}));const compareTransformOrder=(a,b)=>transforms.indexOf(a)-transforms.indexOf(b),transformLookup=new Set(transforms),isTransform=name=>transformLookup.has(name),addTransformToElement=(element,name)=>{transformAlias[name]&&(name=transformAlias[name]);const{transforms:transforms}=getAnimationData(element);addUniqueItem(transforms,name),element.style.transform=buildTransformTemplate(transforms)},buildTransformTemplate=transforms=>transforms.sort(compareTransformOrder).reduce(transformListToString,"").trim(),transformListToString=(template,name)=>`${template} ${name}(var(${asTransformCssVar(name)}))`;export{addTransformToElement,asTransformCssVar,axes,buildTransformTemplate,compareTransformOrder,isTransform,transformAlias,transformDefinitions};