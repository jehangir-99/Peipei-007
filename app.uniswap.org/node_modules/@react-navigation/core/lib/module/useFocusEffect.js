import*as React from"react";import useNavigation from"./useNavigation";export default function useFocusEffect(effect){const navigation=useNavigation();if(void 0!==arguments[1]){const message="You passed a second argument to 'useFocusEffect', but it only accepts one argument. If you want to pass a dependency array, you can use 'React.useCallback':\n\nuseFocusEffect(\n  React.useCallback(() => {\n    // Your code here\n  }, [depA, depB])\n);\n\nSee usage guide: https://reactnavigation.org/docs/use-focus-effect";console.error(message)}React.useEffect((()=>{let cleanup,isFocused=!1;const callback=()=>{const destroy=effect();if(void 0===destroy||"function"==typeof destroy)return destroy;if("production"!==process.env.NODE_ENV){let message="An effect function must not return anything besides a function, which is used for clean-up.";null===destroy?message+=" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).":"function"==typeof destroy.then?message+="\n\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseFocusEffect(\n  React.useCallback() => {\n    async function fetchData() {\n      // You can await here\n      const response = await MyAPI.getData(someId);\n      // ...\n    }\n\n    fetchData();\n  }, [someId])\n);\n\nSee usage guide: https://reactnavigation.org/docs/use-focus-effect":message+=` You returned '${JSON.stringify(destroy)}'.`,console.error(message)}};navigation.isFocused()&&(cleanup=callback(),isFocused=!0);const unsubscribeFocus=navigation.addListener("focus",(()=>{isFocused||(void 0!==cleanup&&cleanup(),cleanup=callback(),isFocused=!0)})),unsubscribeBlur=navigation.addListener("blur",(()=>{void 0!==cleanup&&cleanup(),cleanup=void 0,isFocused=!1}));return()=>{void 0!==cleanup&&cleanup(),unsubscribeFocus(),unsubscribeBlur()}}),[effect,navigation])}