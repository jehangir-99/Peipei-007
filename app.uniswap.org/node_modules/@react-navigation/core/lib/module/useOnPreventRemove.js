import*as React from"react";import NavigationBuilderContext from"./NavigationBuilderContext";import NavigationRouteContext from"./NavigationRouteContext";const VISITED_ROUTE_KEYS=Symbol("VISITED_ROUTE_KEYS");export const shouldPreventRemove=(emitter,beforeRemoveListeners,currentRoutes,nextRoutes,action)=>{var _action$VISITED_ROUTE;const nextRouteKeys=nextRoutes.map((route=>route.key)),removedRoutes=currentRoutes.filter((route=>!nextRouteKeys.includes(route.key))).reverse(),visitedRouteKeys=null!==(_action$VISITED_ROUTE=action[VISITED_ROUTE_KEYS])&&void 0!==_action$VISITED_ROUTE?_action$VISITED_ROUTE:new Set,beforeRemoveAction={...action,[VISITED_ROUTE_KEYS]:visitedRouteKeys};for(const route of removedRoutes){var _beforeRemoveListener;if(visitedRouteKeys.has(route.key))continue;if(null===(_beforeRemoveListener=beforeRemoveListeners[route.key])||void 0===_beforeRemoveListener?void 0:_beforeRemoveListener.call(beforeRemoveListeners,beforeRemoveAction))return!0;visitedRouteKeys.add(route.key);if(emitter.emit({type:"beforeRemove",target:route.key,data:{action:beforeRemoveAction},canPreventDefault:!0}).defaultPrevented)return!0}return!1};export default function useOnPreventRemove(_ref){let{getState:getState,emitter:emitter,beforeRemoveListeners:beforeRemoveListeners}=_ref;const{addKeyedListener:addKeyedListener}=React.useContext(NavigationBuilderContext),route=React.useContext(NavigationRouteContext),routeKey=null==route?void 0:route.key;React.useEffect((()=>{if(routeKey)return null==addKeyedListener?void 0:addKeyedListener("beforeRemove",routeKey,(action=>{const state=getState();return shouldPreventRemove(emitter,beforeRemoveListeners,state.routes,[],action)}))}),[addKeyedListener,beforeRemoveListeners,emitter,getState,routeKey])}