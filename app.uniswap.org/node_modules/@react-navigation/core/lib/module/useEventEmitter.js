import*as React from"react";export default function useEventEmitter(listen){const listenRef=React.useRef(listen);React.useEffect((()=>{listenRef.current=listen}));const listeners=React.useRef({}),create=React.useCallback((target=>{const removeListener=(type,callback)=>{const callbacks=listeners.current[type]?listeners.current[type][target]:void 0;if(!callbacks)return;const index=callbacks.indexOf(callback);index>-1&&callbacks.splice(index,1)};return{addListener:(type,callback)=>{listeners.current[type]=listeners.current[type]||{},listeners.current[type][target]=listeners.current[type][target]||[],listeners.current[type][target].push(callback);let removed=!1;return()=>{removed||(removed=!0,removeListener(type,callback))}},removeListener:removeListener}}),[]),emit=React.useCallback((_ref=>{var _items$target,_listenRef$current;let{type:type,data:data,target:target,canPreventDefault:canPreventDefault}=_ref;const items=listeners.current[type]||{},callbacks=void 0!==target?null===(_items$target=items[target])||void 0===_items$target?void 0:_items$target.slice():[].concat(...Object.keys(items).map((t=>items[t]))).filter(((cb,i,self)=>self.lastIndexOf(cb)===i)),event={get type(){return type}};if(void 0!==target&&Object.defineProperty(event,"target",{enumerable:!0,get:()=>target}),void 0!==data&&Object.defineProperty(event,"data",{enumerable:!0,get:()=>data}),canPreventDefault){let defaultPrevented=!1;Object.defineProperties(event,{defaultPrevented:{enumerable:!0,get:()=>defaultPrevented},preventDefault:{enumerable:!0,value(){defaultPrevented=!0}}})}return null===(_listenRef$current=listenRef.current)||void 0===_listenRef$current||_listenRef$current.call(listenRef,event),null==callbacks||callbacks.forEach((cb=>cb(event))),event}),[]);return React.useMemo((()=>({create:create,emit:emit})),[create,emit])}