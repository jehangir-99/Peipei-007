export async function disconnect(config,parameters={}){let connector;if(parameters.connector)connector=parameters.connector;else{const{connections:connections,current:current}=config.state,connection=connections.get(current);connector=connection?.connector}const connections=config.state.connections;connector&&(await connector.disconnect(),connector.emitter.off("change",config._internal.events.change),connector.emitter.off("disconnect",config._internal.events.disconnect),connector.emitter.on("connect",config._internal.events.connect),connections.delete(connector.uid)),config.setState((x=>{if(0===connections.size)return{...x,connections:new Map,current:null,status:"disconnected"};const nextConnection=connections.values().next().value;return{...x,connections:new Map(connections),current:nextConnection.connector.uid}}));{const current=config.state.current;if(!current)return;const connector=config.state.connections.get(current)?.connector;if(!connector)return;await(config.storage?.setItem("recentConnectorId",connector.id))}}