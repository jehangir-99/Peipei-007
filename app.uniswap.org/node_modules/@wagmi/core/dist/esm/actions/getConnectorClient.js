import{createClient,custom}from"viem";import{getAddress,parseAccount}from"viem/utils";import{ConnectorAccountNotFoundError,ConnectorNotConnectedError}from"../errors/config.js";import{}from"../types/utils.js";export async function getConnectorClient(config,parameters={}){let connection;if(parameters.connector){const{connector:connector}=parameters,[accounts,chainId]=await Promise.all([connector.getAccounts(),connector.getChainId()]);connection={accounts:accounts,chainId:chainId,connector:connector}}else connection=config.state.connections.get(config.state.current);if(!connection)throw new ConnectorNotConnectedError;const chainId=parameters.chainId??connection.chainId,connector=connection.connector;if(connector.getClient)return connector.getClient({chainId:chainId});const account=parseAccount(parameters.account??connection.accounts[0]);account.address=getAddress(account.address);const chain=config.chains.find((chain=>chain.id===chainId)),provider=await connection.connector.getProvider({chainId:chainId});if(parameters.account&&!connection.accounts.includes(account.address))throw new ConnectorAccountNotFoundError({address:account.address,connector:connector});return createClient({account:account,chain:chain,name:"Connector Client",transport:opts=>custom(provider)({...opts,retryCount:0})})}