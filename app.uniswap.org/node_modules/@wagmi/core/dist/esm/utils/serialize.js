function getReferenceKey(keys,cutoff){return keys.slice(0,cutoff).join(".")||"."}function getCutoff(array,value){const{length:length}=array;for(let index=0;index<length;++index)if(array[index]===value)return index+1;return 0}function createReplacer(replacer,circularReplacer){const hasReplacer="function"==typeof replacer,hasCircularReplacer="function"==typeof circularReplacer,cache=[],keys=[];return function(key,value){if("object"==typeof value)if(cache.length){const thisCutoff=getCutoff(cache,this);0===thisCutoff?cache[cache.length]=this:(cache.splice(thisCutoff),keys.splice(thisCutoff)),keys[keys.length]=key;const valueCutoff=getCutoff(cache,value);if(0!==valueCutoff)return hasCircularReplacer?circularReplacer.call(this,key,value,getReferenceKey(keys,valueCutoff)):`[ref=${getReferenceKey(keys,valueCutoff)}]`}else cache[0]=value,keys[0]=key;return hasReplacer?replacer.call(this,key,value):value}}export function serialize(value,replacer,indent,circularReplacer){return JSON.stringify(value,createReplacer(((key,value_)=>{let value=value_;return"bigint"==typeof value&&(value={__type:"bigint",value:value_.toString()}),value instanceof Map&&(value={__type:"Map",value:Array.from(value_.entries())}),replacer?.(key,value)??value}),circularReplacer),indent??void 0)}