"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.JsonRpcEngine=void 0;const safe_event_emitter_1=__importDefault(require("@metamask/safe-event-emitter")),eth_rpc_errors_1=require("eth-rpc-errors");class JsonRpcEngine extends safe_event_emitter_1.default{constructor(){super(),this._middleware=[]}push(middleware){this._middleware.push(middleware)}handle(req,cb){if(cb&&"function"!=typeof cb)throw new Error('"callback" must be a function if provided.');return Array.isArray(req)?cb?this._handleBatch(req,cb):this._handleBatch(req):cb?this._handle(req,cb):this._promiseHandle(req)}asMiddleware(){return async(req,res,next,end)=>{try{const[middlewareError,isComplete,returnHandlers]=await JsonRpcEngine._runAllMiddleware(req,res,this._middleware);return isComplete?(await JsonRpcEngine._runReturnHandlers(returnHandlers),end(middlewareError)):next((async handlerCallback=>{try{await JsonRpcEngine._runReturnHandlers(returnHandlers)}catch(error){return handlerCallback(error)}return handlerCallback()}))}catch(error){return end(error)}}}async _handleBatch(reqs,cb){try{const responses=await Promise.all(reqs.map(this._promiseHandle.bind(this)));return cb?cb(null,responses):responses}catch(error){if(cb)return cb(error);throw error}}_promiseHandle(req){return new Promise((resolve=>{this._handle(req,((_err,res)=>{resolve(res)}))}))}async _handle(callerReq,cb){if(!callerReq||Array.isArray(callerReq)||"object"!=typeof callerReq){const error=new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest,"Requests must be plain objects. Received: "+typeof callerReq,{request:callerReq});return cb(error,{id:void 0,jsonrpc:"2.0",error:error})}if("string"!=typeof callerReq.method){const error=new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest,"Must specify a string method. Received: "+typeof callerReq.method,{request:callerReq});return cb(error,{id:callerReq.id,jsonrpc:"2.0",error:error})}const req=Object.assign({},callerReq),res={id:req.id,jsonrpc:req.jsonrpc};let error=null;try{await this._processRequest(req,res)}catch(_error){error=_error}return error&&(delete res.result,res.error||(res.error=eth_rpc_errors_1.serializeError(error))),cb(error,res)}async _processRequest(req,res){const[error,isComplete,returnHandlers]=await JsonRpcEngine._runAllMiddleware(req,res,this._middleware);if(JsonRpcEngine._checkForCompletion(req,res,isComplete),await JsonRpcEngine._runReturnHandlers(returnHandlers),error)throw error}static async _runAllMiddleware(req,res,middlewareStack){const returnHandlers=[];let error=null,isComplete=!1;for(const middleware of middlewareStack)if([error,isComplete]=await JsonRpcEngine._runMiddleware(req,res,middleware,returnHandlers),isComplete)break;return[error,isComplete,returnHandlers.reverse()]}static _runMiddleware(req,res,middleware,returnHandlers){return new Promise((resolve=>{const end=err=>{const error=err||res.error;error&&(res.error=eth_rpc_errors_1.serializeError(error)),resolve([error,!0])},next=returnHandler=>{res.error?end(res.error):(returnHandler&&("function"!=typeof returnHandler&&end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal,`JsonRpcEngine: "next" return handlers must be functions. Received "${typeof returnHandler}" for request:\n${jsonify(req)}`,{request:req})),returnHandlers.push(returnHandler)),resolve([null,!1]))};try{middleware(req,res,next,end)}catch(error){end(error)}}))}static async _runReturnHandlers(handlers){for(const handler of handlers)await new Promise(((resolve,reject)=>{handler((err=>err?reject(err):resolve()))}))}static _checkForCompletion(req,res,isComplete){if(!("result"in res)&&!("error"in res))throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal,`JsonRpcEngine: Response has no error or result for request:\n${jsonify(req)}`,{request:req});if(!isComplete)throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal,`JsonRpcEngine: Nothing ended request:\n${jsonify(req)}`,{request:req})}}function jsonify(request){return JSON.stringify(request,null,2)}exports.JsonRpcEngine=JsonRpcEngine;