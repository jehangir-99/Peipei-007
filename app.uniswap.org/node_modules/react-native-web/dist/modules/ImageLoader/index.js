var dataUriPattern=/^data:/;export class ImageUriCache{static has(uri){var entries=ImageUriCache._entries;return dataUriPattern.test(uri)||Boolean(entries[uri])}static add(uri){var entries=ImageUriCache._entries,lastUsedTimestamp=Date.now();entries[uri]?(entries[uri].lastUsedTimestamp=lastUsedTimestamp,entries[uri].refCount+=1):entries[uri]={lastUsedTimestamp:lastUsedTimestamp,refCount:1}}static remove(uri){var entries=ImageUriCache._entries;entries[uri]&&(entries[uri].refCount-=1),ImageUriCache._cleanUpIfNeeded()}static _cleanUpIfNeeded(){var leastRecentlyUsedKey,leastRecentlyUsedEntry,entries=ImageUriCache._entries,imageUris=Object.keys(entries);imageUris.length+1>ImageUriCache._maximumEntries&&(imageUris.forEach((uri=>{var entry=entries[uri];(!leastRecentlyUsedEntry||entry.lastUsedTimestamp<leastRecentlyUsedEntry.lastUsedTimestamp)&&0===entry.refCount&&(leastRecentlyUsedKey=uri,leastRecentlyUsedEntry=entry)})),leastRecentlyUsedKey&&delete entries[leastRecentlyUsedKey])}}ImageUriCache._maximumEntries=256,ImageUriCache._entries={};var id=0,requests={},ImageLoader={abort(requestId){var image=requests[""+requestId];image&&(image.onerror=null,image.onload=null,image=null,delete requests[""+requestId])},getSize(uri,success,failure){var complete=!1,interval=setInterval(callback,16),requestId=ImageLoader.load(uri,callback,(function(){"function"==typeof failure&&failure();ImageLoader.abort(requestId),clearInterval(interval)}));function callback(){var image=requests[""+requestId];if(image){var naturalHeight=image.naturalHeight,naturalWidth=image.naturalWidth;naturalHeight&&naturalWidth&&(success(naturalWidth,naturalHeight),complete=!0)}complete&&(ImageLoader.abort(requestId),clearInterval(interval))}},has:uri=>ImageUriCache.has(uri),load(uri,onLoad,onError){id+=1;var image=new window.Image;return image.onerror=onError,image.onload=e=>{var onDecode=()=>onLoad({nativeEvent:e});"function"==typeof image.decode?image.decode().then(onDecode,onDecode):setTimeout(onDecode,0)},image.src=uri,requests[""+id]=image,id},prefetch:uri=>new Promise(((resolve,reject)=>{ImageLoader.load(uri,(()=>{ImageUriCache.add(uri),ImageUriCache.remove(uri),resolve()}),reject)})),queryCache(uris){var result={};return uris.forEach((u=>{ImageUriCache.has(u)&&(result[u]="disk/memory")})),Promise.resolve(result)}};export default ImageLoader;