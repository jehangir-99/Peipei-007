import*as React from"react";import*as ResponderSystem from"./ResponderSystem";var emptyObject={},idCounter=0;function useStable(getInitialValue){var ref=React.useRef(null);return null==ref.current&&(ref.current=getInitialValue()),ref.current}export default function useResponderEvents(hostRef,config){void 0===config&&(config=emptyObject);var id=useStable((()=>idCounter++)),isAttachedRef=React.useRef(!1);React.useEffect((()=>(ResponderSystem.attachListeners(),()=>{ResponderSystem.removeNode(id)})),[id]),React.useEffect((()=>{var _config=config,onMoveShouldSetResponder=_config.onMoveShouldSetResponder,onMoveShouldSetResponderCapture=_config.onMoveShouldSetResponderCapture,onScrollShouldSetResponder=_config.onScrollShouldSetResponder,onScrollShouldSetResponderCapture=_config.onScrollShouldSetResponderCapture,onSelectionChangeShouldSetResponder=_config.onSelectionChangeShouldSetResponder,onSelectionChangeShouldSetResponderCapture=_config.onSelectionChangeShouldSetResponderCapture,onStartShouldSetResponder=_config.onStartShouldSetResponder,onStartShouldSetResponderCapture=_config.onStartShouldSetResponderCapture,requiresResponderSystem=null!=onMoveShouldSetResponder||null!=onMoveShouldSetResponderCapture||null!=onScrollShouldSetResponder||null!=onScrollShouldSetResponderCapture||null!=onSelectionChangeShouldSetResponder||null!=onSelectionChangeShouldSetResponderCapture||null!=onStartShouldSetResponder||null!=onStartShouldSetResponderCapture,node=hostRef.current;requiresResponderSystem?(ResponderSystem.addNode(id,node,config),isAttachedRef.current=!0):isAttachedRef.current&&(ResponderSystem.removeNode(id),isAttachedRef.current=!1)}),[config,hostRef,id]),React.useDebugValue({isResponder:hostRef.current===ResponderSystem.getResponderNode()}),React.useDebugValue(config)}