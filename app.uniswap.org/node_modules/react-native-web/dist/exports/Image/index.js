import _objectSpread from"@babel/runtime/helpers/objectSpread2";import _extends from"@babel/runtime/helpers/extends";import _objectWithoutPropertiesLoose from"@babel/runtime/helpers/objectWithoutPropertiesLoose";var _excluded=["aria-label","blurRadius","defaultSource","draggable","onError","onLayout","onLoad","onLoadEnd","onLoadStart","pointerEvents","source","style"];import*as React from"react";import createElement from"../createElement";import{getAssetByID}from"../../modules/AssetRegistry";import{createBoxShadowValue}from"../StyleSheet/preprocess";import ImageLoader from"../../modules/ImageLoader";import PixelRatio from"../PixelRatio";import StyleSheet from"../StyleSheet";import TextAncestorContext from"../Text/TextAncestorContext";import View from"../View";import{warnOnce}from"../../modules/warnOnce";var ERRORED="ERRORED",LOADED="LOADED",LOADING="LOADING",IDLE="IDLE",_filterId=0,svgDataUriPattern=/^(data:image\/svg\+xml;utf8,)(.*)/;function createTintColorSVG(tintColor,id){return tintColor&&null!=id?React.createElement("svg",{style:{position:"absolute",height:0,visibility:"hidden",width:0}},React.createElement("defs",null,React.createElement("filter",{id:"tint-"+id,suppressHydrationWarning:!0},React.createElement("feFlood",{floodColor:""+tintColor,key:tintColor}),React.createElement("feComposite",{in2:"SourceAlpha",operator:"atop"})))):null}function extractNonStandardStyleProps(style,blurRadius,filterId,tintColorProp){var flatStyle=StyleSheet.flatten(style),filter=flatStyle.filter,resizeMode=flatStyle.resizeMode,shadowOffset=flatStyle.shadowOffset,tintColor=flatStyle.tintColor;flatStyle.resizeMode&&warnOnce("Image.style.resizeMode","Image: style.resizeMode is deprecated. Please use props.resizeMode."),flatStyle.tintColor&&warnOnce("Image.style.tintColor","Image: style.tintColor is deprecated. Please use props.tintColor.");var filters=[],_filter=null;if(filter&&filters.push(filter),blurRadius&&filters.push("blur("+blurRadius+"px)"),shadowOffset){var shadowString=createBoxShadowValue(flatStyle);shadowString&&filters.push("drop-shadow("+shadowString+")")}return(tintColorProp||tintColor)&&null!=filterId&&filters.push("url(#tint-"+filterId+")"),filters.length>0&&(_filter=filters.join(" ")),[resizeMode,_filter,tintColor]}function resolveAssetDimensions(source){if("number"==typeof source){var _getAssetByID=getAssetByID(source);return{height:_getAssetByID.height,width:_getAssetByID.width}}if(null!=source&&!Array.isArray(source)&&"object"==typeof source)return{height:source.height,width:source.width}}function resolveAssetUri(source){var uri=null;if("number"==typeof source){var asset=getAssetByID(source);if(null==asset)throw new Error('Image: asset with ID "'+source+'" could not be found. Please check the image source or packager.');var scale=asset.scales[0];if(asset.scales.length>1){var preferredScale=PixelRatio.get();scale=asset.scales.reduce(((prev,curr)=>Math.abs(curr-preferredScale)<Math.abs(prev-preferredScale)?curr:prev))}var scaleSuffix=1!==scale?"@"+scale+"x":"";uri=asset?asset.httpServerLocation+"/"+asset.name+scaleSuffix+"."+asset.type:""}else"string"==typeof source?uri=source:source&&"string"==typeof source.uri&&(uri=source.uri);if(uri){var match=uri.match(svgDataUriPattern);if(match){var prefix=match[1],svg=match[2];return""+prefix+encodeURIComponent(svg)}}return uri}var Image=React.forwardRef(((props,ref)=>{var ariaLabel=props["aria-label"],blurRadius=props.blurRadius,defaultSource=props.defaultSource,draggable=props.draggable,onError=props.onError,onLayout=props.onLayout,onLoad=props.onLoad,onLoadEnd=props.onLoadEnd,onLoadStart=props.onLoadStart,pointerEvents=props.pointerEvents,source=props.source,style=props.style,rest=_objectWithoutPropertiesLoose(props,_excluded);if("production"!==process.env.NODE_ENV&&props.children)throw new Error("The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.");var _React$useState=React.useState((()=>{var uri=resolveAssetUri(source);if(null!=uri&&ImageLoader.has(uri))return LOADED;return IDLE})),state=_React$useState[0],updateState=_React$useState[1],_React$useState2=React.useState({}),layout=_React$useState2[0],updateLayout=_React$useState2[1],hasTextAncestor=React.useContext(TextAncestorContext),hiddenImageRef=React.useRef(null),filterRef=React.useRef(_filterId++),requestRef=React.useRef(null),shouldDisplaySource=state===LOADED||state===LOADING&&null==defaultSource,_extractNonStandardSt=extractNonStandardStyleProps(style,blurRadius,filterRef.current,props.tintColor),_resizeMode=_extractNonStandardSt[0],filter=_extractNonStandardSt[1],_tintColor=_extractNonStandardSt[2],resizeMode=props.resizeMode||_resizeMode||"cover",tintColor=props.tintColor||_tintColor,selectedSource=shouldDisplaySource?source:defaultSource,displayImageUri=resolveAssetUri(selectedSource),imageSizeStyle=resolveAssetDimensions(selectedSource),backgroundImage=displayImageUri?'url("'+displayImageUri+'")':null,backgroundSize=function(){if(null!=hiddenImageRef.current&&("center"===resizeMode||"repeat"===resizeMode)){var _hiddenImageRef$curre=hiddenImageRef.current,naturalHeight=_hiddenImageRef$curre.naturalHeight,naturalWidth=_hiddenImageRef$curre.naturalWidth,_height3=layout.height,_width3=layout.width;if(naturalHeight&&naturalWidth&&_height3&&_width3){var scaleFactor=Math.min(1,_width3/naturalWidth,_height3/naturalHeight);return Math.ceil(scaleFactor*naturalWidth)+"px "+Math.ceil(scaleFactor*naturalHeight)+"px"}}}(),hiddenImage=displayImageUri?createElement("img",{alt:ariaLabel||"",style:styles.accessibilityImage$raw,draggable:draggable||!1,ref:hiddenImageRef,src:displayImageUri}):null;var uri=resolveAssetUri(source);return React.useEffect((()=>{function abortPendingRequest(){null!=requestRef.current&&(ImageLoader.abort(requestRef.current),requestRef.current=null)}return abortPendingRequest(),null!=uri&&(updateState(LOADING),onLoadStart&&onLoadStart(),requestRef.current=ImageLoader.load(uri,(function(e){updateState(LOADED),onLoad&&onLoad(e),onLoadEnd&&onLoadEnd()}),(function(){updateState(ERRORED),onError&&onError({nativeEvent:{error:"Failed to load resource "+uri+" (404)"}}),onLoadEnd&&onLoadEnd()}))),abortPendingRequest}),[uri,requestRef,updateState,onError,onLoad,onLoadEnd,onLoadStart]),React.createElement(View,_extends({},rest,{"aria-label":ariaLabel,onLayout:function(e){if("center"===resizeMode||"repeat"===resizeMode||onLayout){var _layout=e.nativeEvent.layout;onLayout&&onLayout(e),updateLayout(_layout)}},pointerEvents:pointerEvents,ref:ref,style:[styles.root,hasTextAncestor&&styles.inline,imageSizeStyle,style,styles.undo,{boxShadow:null}]}),React.createElement(View,{style:[styles.image,resizeModeStyles[resizeMode],{backgroundImage:backgroundImage,filter:filter},null!=backgroundSize&&{backgroundSize:backgroundSize}],suppressHydrationWarning:!0}),hiddenImage,createTintColorSVG(tintColor,filterRef.current))}));Image.displayName="Image";var ImageWithStatics=Image;ImageWithStatics.getSize=function(uri,success,failure){ImageLoader.getSize(uri,success,failure)},ImageWithStatics.prefetch=function(uri){return ImageLoader.prefetch(uri)},ImageWithStatics.queryCache=function(uris){return ImageLoader.queryCache(uris)};var styles=StyleSheet.create({root:{flexBasis:"auto",overflow:"hidden",zIndex:0},inline:{display:"inline-flex"},undo:{blurRadius:null,shadowColor:null,shadowOpacity:null,shadowOffset:null,shadowRadius:null,tintColor:null,overlayColor:null,resizeMode:null},image:_objectSpread(_objectSpread({},StyleSheet.absoluteFillObject),{},{backgroundColor:"transparent",backgroundPosition:"center",backgroundRepeat:"no-repeat",backgroundSize:"cover",height:"100%",width:"100%",zIndex:-1}),accessibilityImage$raw:_objectSpread(_objectSpread({},StyleSheet.absoluteFillObject),{},{height:"100%",opacity:0,width:"100%",zIndex:-1})}),resizeModeStyles=StyleSheet.create({center:{backgroundSize:"auto"},contain:{backgroundSize:"contain"},cover:{backgroundSize:"cover"},none:{backgroundPosition:"0",backgroundSize:"auto"},repeat:{backgroundPosition:"0",backgroundRepeat:"repeat",backgroundSize:"auto"},stretch:{backgroundSize:"100% 100%"}});export default ImageWithStatics;