import invariant from"fbjs/lib/invariant";import canUseDOM from"../../modules/canUseDom";var initialURL=canUseDOM?window.location.href:"";class Linking{constructor(){this._eventCallbacks={}}_dispatchEvent(event){for(var _len=arguments.length,data=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)data[_key-1]=arguments[_key];var listeners=this._eventCallbacks[event];null!=listeners&&Array.isArray(listeners)&&listeners.map((listener=>{listener(...data)}))}addEventListener(eventType,callback){var _this=this;return _this._eventCallbacks[eventType]||(_this._eventCallbacks[eventType]=[callback]),_this._eventCallbacks[eventType].push(callback),{remove(){var filteredCallbacks=_this._eventCallbacks[eventType].filter((c=>c.toString()!==callback.toString()));_this._eventCallbacks[eventType]=filteredCallbacks}}}removeEventListener(eventType,callback){console.error("Linking.removeEventListener('"+eventType+"', ...): Method has been deprecated. Please instead use `remove()` on the subscription returned by `Linking.addEventListener`.");var filteredCallbacks=this._eventCallbacks[eventType].filter((c=>c.toString()!==callback.toString()));this._eventCallbacks[eventType]=filteredCallbacks}canOpenURL(){return Promise.resolve(!0)}getInitialURL(){return Promise.resolve(initialURL)}openURL(url,target){1===arguments.length&&(target="_blank");try{return open(url,target),this._dispatchEvent("onOpen",url),Promise.resolve()}catch(e){return Promise.reject(e)}}_validateURL(url){invariant("string"==typeof url,"Invalid URL: should be a string. Was: "+url),invariant(url,"Invalid URL: cannot be empty")}}var open=(url,target)=>{if(canUseDOM){var urlToOpen=new URL(url,window.location).toString();0===urlToOpen.indexOf("tel:")?window.location=urlToOpen:window.open(urlToOpen,target,"noopener")}};export default new Linking;