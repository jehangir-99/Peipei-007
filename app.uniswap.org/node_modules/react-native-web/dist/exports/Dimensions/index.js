import invariant from"fbjs/lib/invariant";import canUseDOM from"../../modules/canUseDom";var dimensions={window:{fontScale:1,height:0,scale:1,width:0},screen:{fontScale:1,height:0,scale:1,width:0}},listeners={},shouldInit=canUseDOM;function update(){if(canUseDOM){var height,width,win=window;if(win.visualViewport){var visualViewport=win.visualViewport;height=Math.round(visualViewport.height*visualViewport.scale),width=Math.round(visualViewport.width*visualViewport.scale)}else{var docEl=win.document.documentElement;height=docEl.clientHeight,width=docEl.clientWidth}dimensions.window={fontScale:1,height:height,scale:win.devicePixelRatio||1,width:width},dimensions.screen={fontScale:1,height:win.screen.height,scale:win.devicePixelRatio||1,width:win.screen.width}}}function handleResize(){update(),Array.isArray(listeners.change)&&listeners.change.forEach((handler=>handler(dimensions)))}export default class Dimensions{static get(dimension){return shouldInit&&(shouldInit=!1,update()),invariant(dimensions[dimension],"No dimension set for key "+dimension),dimensions[dimension]}static set(initialDimensions){initialDimensions&&(canUseDOM?invariant(!1,"Dimensions cannot be set in the browser"):(null!=initialDimensions.screen&&(dimensions.screen=initialDimensions.screen),null!=initialDimensions.window&&(dimensions.window=initialDimensions.window)))}static addEventListener(type,handler){return listeners[type]=listeners[type]||[],listeners[type].push(handler),{remove:()=>{this.removeEventListener(type,handler)}}}static removeEventListener(type,handler){Array.isArray(listeners[type])&&(listeners[type]=listeners[type].filter((_handler=>_handler!==handler)))}}canUseDOM&&(window.visualViewport?window.visualViewport.addEventListener("resize",handleResize,!1):window.addEventListener("resize",handleResize,!1));