import*as React from"react";import createElement from"../createElement";import*as forwardedProps from"../../modules/forwardedProps";import pick from"../../modules/pick";import useElementLayout from"../../modules/useElementLayout";import useLayoutEffect from"../../modules/useLayoutEffect";import useMergeRefs from"../../modules/useMergeRefs";import usePlatformMethods from"../../modules/usePlatformMethods";import useResponderEvents from"../../modules/useResponderEvents";import{getLocaleDirection,useLocaleContext}from"../../modules/useLocale";import StyleSheet from"../StyleSheet";import TextInputState from"../../modules/TextInputState";import{warnOnce}from"../../modules/warnOnce";var isSelectionStale=(node,selection)=>{var selectionEnd=node.selectionEnd,selectionStart=node.selectionStart,start=selection.start,end=selection.end;return start!==selectionStart||end!==selectionEnd},setSelection=(node,selection)=>{if(isSelectionStale(node,selection)){var start=selection.start,end=selection.end;try{node.setSelectionRange(start,end||start)}catch(e){}}},forwardPropsList=Object.assign({},forwardedProps.defaultProps,forwardedProps.accessibilityProps,forwardedProps.clickProps,forwardedProps.focusProps,forwardedProps.keyboardProps,forwardedProps.mouseProps,forwardedProps.touchProps,forwardedProps.styleProps,{autoCapitalize:!0,autoComplete:!0,autoCorrect:!0,autoFocus:!0,defaultValue:!0,disabled:!0,lang:!0,maxLength:!0,onChange:!0,onScroll:!0,placeholder:!0,pointerEvents:!0,readOnly:!0,rows:!0,spellCheck:!0,value:!0,type:!0}),pickProps=props=>pick(props,forwardPropsList);function isEventComposing(nativeEvent){return nativeEvent.isComposing||229===nativeEvent.keyCode}var focusTimeout=null,TextInput=React.forwardRef(((props,forwardedRef)=>{var type,_inputMode,_props$autoCapitalize=props.autoCapitalize,autoCapitalize=void 0===_props$autoCapitalize?"sentences":_props$autoCapitalize,autoComplete=props.autoComplete,autoCompleteType=props.autoCompleteType,_props$autoCorrect=props.autoCorrect,autoCorrect=void 0===_props$autoCorrect||_props$autoCorrect,blurOnSubmit=props.blurOnSubmit,caretHidden=props.caretHidden,clearTextOnFocus=props.clearTextOnFocus,dir=props.dir,editable=props.editable,enterKeyHint=props.enterKeyHint,inputMode=props.inputMode,keyboardType=props.keyboardType,_props$multiline=props.multiline,multiline=void 0!==_props$multiline&&_props$multiline,numberOfLines=props.numberOfLines,onBlur=props.onBlur,onChange=props.onChange,onChangeText=props.onChangeText,onContentSizeChange=props.onContentSizeChange,onFocus=props.onFocus,onKeyPress=props.onKeyPress,onLayout=props.onLayout,onMoveShouldSetResponder=props.onMoveShouldSetResponder,onMoveShouldSetResponderCapture=props.onMoveShouldSetResponderCapture,onResponderEnd=props.onResponderEnd,onResponderGrant=props.onResponderGrant,onResponderMove=props.onResponderMove,onResponderReject=props.onResponderReject,onResponderRelease=props.onResponderRelease,onResponderStart=props.onResponderStart,onResponderTerminate=props.onResponderTerminate,onResponderTerminationRequest=props.onResponderTerminationRequest,onScrollShouldSetResponder=props.onScrollShouldSetResponder,onScrollShouldSetResponderCapture=props.onScrollShouldSetResponderCapture,onSelectionChange=props.onSelectionChange,onSelectionChangeShouldSetResponder=props.onSelectionChangeShouldSetResponder,onSelectionChangeShouldSetResponderCapture=props.onSelectionChangeShouldSetResponderCapture,onStartShouldSetResponder=props.onStartShouldSetResponder,onStartShouldSetResponderCapture=props.onStartShouldSetResponderCapture,onSubmitEditing=props.onSubmitEditing,placeholderTextColor=props.placeholderTextColor,_props$readOnly=props.readOnly,readOnly=void 0!==_props$readOnly&&_props$readOnly,returnKeyType=props.returnKeyType,rows=props.rows,_props$secureTextEntr=props.secureTextEntry,secureTextEntry=void 0!==_props$secureTextEntr&&_props$secureTextEntr,selection=props.selection,selectTextOnFocus=props.selectTextOnFocus,spellCheck=props.spellCheck;if(null!=inputMode)_inputMode=inputMode,type="email"===inputMode?"email":"tel"===inputMode?"tel":"search"===inputMode?"search":"url"===inputMode?"url":"text";else if(null!=keyboardType)switch(warnOnce("keyboardType","keyboardType is deprecated. Use inputMode."),keyboardType){case"email-address":type="email";break;case"number-pad":case"numeric":_inputMode="numeric";break;case"decimal-pad":_inputMode="decimal";break;case"phone-pad":type="tel";break;case"search":case"web-search":type="search";break;case"url":type="url";break;default:type="text"}secureTextEntry&&(type="password");var dimensions=React.useRef({height:null,width:null}),hostRef=React.useRef(null),prevSelection=React.useRef(null),prevSecureTextEntry=React.useRef(!1);React.useEffect((()=>{hostRef.current&&prevSelection.current&&setSelection(hostRef.current,prevSelection.current),prevSecureTextEntry.current=secureTextEntry}),[secureTextEntry]);var handleContentSizeChange=React.useCallback((hostNode=>{if(multiline&&onContentSizeChange&&null!=hostNode){var newHeight=hostNode.scrollHeight,newWidth=hostNode.scrollWidth;newHeight===dimensions.current.height&&newWidth===dimensions.current.width||(dimensions.current.height=newHeight,dimensions.current.width=newWidth,onContentSizeChange({nativeEvent:{contentSize:{height:dimensions.current.height,width:dimensions.current.width}}}))}}),[multiline,onContentSizeChange]),imperativeRef=React.useMemo((()=>hostNode=>{null!=hostNode&&(hostNode.clear=function(){null!=hostNode&&(hostNode.value="")},hostNode.isFocused=function(){return null!=hostNode&&TextInputState.currentlyFocusedField()===hostNode},handleContentSizeChange(hostNode))}),[handleContentSizeChange]);useLayoutEffect((()=>{var node=hostRef.current;null!=node&&null!=selection&&setSelection(node,selection),document.activeElement===node&&(TextInputState._currentlyFocusedNode=node)}),[hostRef,selection]);var component=multiline?"textarea":"input";useElementLayout(hostRef,onLayout),useResponderEvents(hostRef,{onMoveShouldSetResponder:onMoveShouldSetResponder,onMoveShouldSetResponderCapture:onMoveShouldSetResponderCapture,onResponderEnd:onResponderEnd,onResponderGrant:onResponderGrant,onResponderMove:onResponderMove,onResponderReject:onResponderReject,onResponderRelease:onResponderRelease,onResponderStart:onResponderStart,onResponderTerminate:onResponderTerminate,onResponderTerminationRequest:onResponderTerminationRequest,onScrollShouldSetResponder:onScrollShouldSetResponder,onScrollShouldSetResponderCapture:onScrollShouldSetResponderCapture,onSelectionChangeShouldSetResponder:onSelectionChangeShouldSetResponder,onSelectionChangeShouldSetResponderCapture:onSelectionChangeShouldSetResponderCapture,onStartShouldSetResponder:onStartShouldSetResponder,onStartShouldSetResponderCapture:onStartShouldSetResponderCapture});var contextDirection=useLocaleContext().direction,supportedProps=pickProps(props);supportedProps.autoCapitalize=autoCapitalize,supportedProps.autoComplete=autoComplete||autoCompleteType||"on",supportedProps.autoCorrect=autoCorrect?"on":"off",supportedProps.dir=void 0!==dir?dir:"auto",null!=returnKeyType&&warnOnce("returnKeyType","returnKeyType is deprecated. Use enterKeyHint."),supportedProps.enterKeyHint=enterKeyHint||returnKeyType,supportedProps.inputMode=_inputMode,supportedProps.onBlur=function(e){TextInputState._currentlyFocusedNode=null,onBlur&&(e.nativeEvent.text=e.target.value,onBlur(e))},supportedProps.onChange=function(e){var hostNode=e.target,text=hostNode.value;e.nativeEvent.text=text,handleContentSizeChange(hostNode),onChange&&onChange(e),onChangeText&&onChangeText(text)},supportedProps.onFocus=function(e){var hostNode=e.target;onFocus&&(e.nativeEvent.text=hostNode.value,onFocus(e)),null!=hostNode&&(TextInputState._currentlyFocusedNode=hostNode,clearTextOnFocus&&(hostNode.value=""),selectTextOnFocus&&(null!=focusTimeout&&clearTimeout(focusTimeout),focusTimeout=setTimeout((()=>{null!=hostNode&&hostNode.select()}),0)))},supportedProps.onKeyDown=function(e){var hostNode=e.target;e.stopPropagation();var shouldBlurOnSubmit=null==blurOnSubmit?!multiline:blurOnSubmit,nativeEvent=e.nativeEvent,isComposing=isEventComposing(nativeEvent);onKeyPress&&onKeyPress(e),"Enter"!==e.key||e.shiftKey||isComposing||e.isDefaultPrevented()||(!blurOnSubmit&&multiline||!onSubmitEditing||(e.preventDefault(),nativeEvent.text=e.target.value,onSubmitEditing(e)),shouldBlurOnSubmit&&null!=hostNode&&setTimeout((()=>hostNode.blur()),0))},supportedProps.onSelect=function(e){try{var _e$target=e.target,_selection={start:_e$target.selectionStart,end:_e$target.selectionEnd};onSelectionChange&&(e.nativeEvent.selection=_selection,e.nativeEvent.text=e.target.value,onSelectionChange(e)),prevSecureTextEntry.current===secureTextEntry&&(prevSelection.current=_selection)}catch(e){}},null!=editable&&warnOnce("editable","editable is deprecated. Use readOnly."),supportedProps.readOnly=!0===readOnly||!1===editable,null!=numberOfLines&&warnOnce("numberOfLines","TextInput numberOfLines is deprecated. Use rows."),supportedProps.rows=multiline?null!=rows?rows:numberOfLines:1,supportedProps.spellCheck=null!=spellCheck?spellCheck:autoCorrect,supportedProps.style=[{"--placeholderTextColor":placeholderTextColor},styles.textinput$raw,styles.placeholder,props.style,caretHidden&&styles.caretHidden],supportedProps.type=multiline?void 0:type;var platformMethodsRef=usePlatformMethods(supportedProps),setRef=useMergeRefs(hostRef,platformMethodsRef,imperativeRef,forwardedRef);supportedProps.ref=setRef;var langDirection=null!=props.lang?getLocaleDirection(props.lang):null,componentDirection=props.dir||langDirection;return createElement(component,supportedProps,{writingDirection:componentDirection||contextDirection})}));TextInput.displayName="TextInput",TextInput.State=TextInputState;var styles=StyleSheet.create({textinput$raw:{MozAppearance:"textfield",WebkitAppearance:"none",backgroundColor:"transparent",border:"0 solid black",borderRadius:0,boxSizing:"border-box",font:"14px System",margin:0,padding:0,resize:"none"},placeholder:{placeholderTextColor:"var(--placeholderTextColor)"},caretHidden:{caretColor:"transparent"}});export default TextInput;