import _objectSpread from"@babel/runtime/helpers/objectSpread2";import _extends from"@babel/runtime/helpers/extends";import _objectWithoutPropertiesLoose from"@babel/runtime/helpers/objectWithoutPropertiesLoose";var _excluded=["contentContainerStyle","horizontal","onContentSizeChange","refreshControl","stickyHeaderIndices","pagingEnabled","forwardedRef","keyboardDismissMode","onScroll","centerContent"];import Dimensions from"../Dimensions";import dismissKeyboard from"../../modules/dismissKeyboard";import invariant from"fbjs/lib/invariant";import mergeRefs from"../../modules/mergeRefs";import Platform from"../Platform";import ScrollViewBase from"./ScrollViewBase";import StyleSheet from"../StyleSheet";import TextInputState from"../../modules/TextInputState";import UIManager from"../UIManager";import View from"../View";import React from"react";import warning from"fbjs/lib/warning";var emptyObject={},IS_ANIMATING_TOUCH_START_THRESHOLD_MS=16;class ScrollView extends React.Component{constructor(){super(...arguments),this._scrollNodeRef=null,this._innerViewRef=null,this.isTouching=!1,this.lastMomentumScrollBeginTime=0,this.lastMomentumScrollEndTime=0,this.observedScrollSinceBecomingResponder=!1,this.becameResponderWhileAnimating=!1,this.scrollResponderHandleScrollShouldSetResponder=()=>this.isTouching,this.scrollResponderHandleStartShouldSetResponderCapture=e=>this.scrollResponderIsAnimating(),this.scrollResponderHandleTerminationRequest=()=>!this.observedScrollSinceBecomingResponder,this.scrollResponderHandleTouchEnd=e=>{var nativeEvent=e.nativeEvent;this.isTouching=0!==nativeEvent.touches.length,this.props.onTouchEnd&&this.props.onTouchEnd(e)},this.scrollResponderHandleResponderRelease=e=>{this.props.onResponderRelease&&this.props.onResponderRelease(e);var currentlyFocusedTextInput=TextInputState.currentlyFocusedField();this.props.keyboardShouldPersistTaps||null==currentlyFocusedTextInput||e.target===currentlyFocusedTextInput||this.observedScrollSinceBecomingResponder||this.becameResponderWhileAnimating||(this.props.onScrollResponderKeyboardDismissed&&this.props.onScrollResponderKeyboardDismissed(e),TextInputState.blurTextInput(currentlyFocusedTextInput))},this.scrollResponderHandleScroll=e=>{this.observedScrollSinceBecomingResponder=!0,this.props.onScroll&&this.props.onScroll(e)},this.scrollResponderHandleResponderGrant=e=>{this.observedScrollSinceBecomingResponder=!1,this.props.onResponderGrant&&this.props.onResponderGrant(e),this.becameResponderWhileAnimating=this.scrollResponderIsAnimating()},this.scrollResponderHandleScrollBeginDrag=e=>{this.props.onScrollBeginDrag&&this.props.onScrollBeginDrag(e)},this.scrollResponderHandleScrollEndDrag=e=>{this.props.onScrollEndDrag&&this.props.onScrollEndDrag(e)},this.scrollResponderHandleMomentumScrollBegin=e=>{this.lastMomentumScrollBeginTime=Date.now(),this.props.onMomentumScrollBegin&&this.props.onMomentumScrollBegin(e)},this.scrollResponderHandleMomentumScrollEnd=e=>{this.lastMomentumScrollEndTime=Date.now(),this.props.onMomentumScrollEnd&&this.props.onMomentumScrollEnd(e)},this.scrollResponderHandleTouchStart=e=>{this.isTouching=!0,this.props.onTouchStart&&this.props.onTouchStart(e)},this.scrollResponderHandleTouchMove=e=>{this.props.onTouchMove&&this.props.onTouchMove(e)},this.scrollResponderIsAnimating=()=>Date.now()-this.lastMomentumScrollEndTime<IS_ANIMATING_TOUCH_START_THRESHOLD_MS||this.lastMomentumScrollEndTime<this.lastMomentumScrollBeginTime,this.scrollResponderScrollTo=(x,y,animated)=>{if("number"==typeof x)console.warn("`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.");else{var _ref=x||emptyObject;x=_ref.x,y=_ref.y,animated=_ref.animated}var node=this.getScrollableNode(),left=x||0,top=y||0;null!=node&&("function"==typeof node.scroll?node.scroll({top:top,left:left,behavior:animated?"smooth":"auto"}):(node.scrollLeft=left,node.scrollTop=top))},this.scrollResponderZoomTo=(rect,animated)=>{"ios"!==Platform.OS&&invariant("zoomToRect is not implemented")},this.scrollResponderScrollNativeHandleToKeyboard=(nodeHandle,additionalOffset,preventNegativeScrollOffset)=>{this.additionalScrollOffset=additionalOffset||0,this.preventNegativeScrollOffset=!!preventNegativeScrollOffset,UIManager.measureLayout(nodeHandle,this.getInnerViewNode(),this.scrollResponderTextInputFocusError,this.scrollResponderInputMeasureAndScrollToKeyboard)},this.scrollResponderInputMeasureAndScrollToKeyboard=(left,top,width,height)=>{var keyboardScreenY=Dimensions.get("window").height;this.keyboardWillOpenTo&&(keyboardScreenY=this.keyboardWillOpenTo.endCoordinates.screenY);var scrollOffsetY=top-keyboardScreenY+height+this.additionalScrollOffset;this.preventNegativeScrollOffset&&(scrollOffsetY=Math.max(0,scrollOffsetY)),this.scrollResponderScrollTo({x:0,y:scrollOffsetY,animated:!0}),this.additionalOffset=0,this.preventNegativeScrollOffset=!1},this.scrollResponderKeyboardWillShow=e=>{this.keyboardWillOpenTo=e,this.props.onKeyboardWillShow&&this.props.onKeyboardWillShow(e)},this.scrollResponderKeyboardWillHide=e=>{this.keyboardWillOpenTo=null,this.props.onKeyboardWillHide&&this.props.onKeyboardWillHide(e)},this.scrollResponderKeyboardDidShow=e=>{e&&(this.keyboardWillOpenTo=e),this.props.onKeyboardDidShow&&this.props.onKeyboardDidShow(e)},this.scrollResponderKeyboardDidHide=e=>{this.keyboardWillOpenTo=null,this.props.onKeyboardDidHide&&this.props.onKeyboardDidHide(e)},this.flashScrollIndicators=()=>{this.scrollResponderFlashScrollIndicators()},this.getScrollResponder=()=>this,this.getScrollableNode=()=>this._scrollNodeRef,this.getInnerViewRef=()=>this._innerViewRef,this.getInnerViewNode=()=>this._innerViewRef,this.getNativeScrollRef=()=>this._scrollNodeRef,this.scrollTo=(y,x,animated)=>{if("number"==typeof y)console.warn("`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, animated: true})` instead.");else{var _ref2=y||emptyObject;x=_ref2.x,y=_ref2.y,animated=_ref2.animated}this.scrollResponderScrollTo({x:x||0,y:y||0,animated:!1!==animated})},this.scrollToEnd=options=>{var animated=!1!==(options&&options.animated),horizontal=this.props.horizontal,scrollResponderNode=this.getScrollableNode(),x=horizontal?scrollResponderNode.scrollWidth:0,y=horizontal?0:scrollResponderNode.scrollHeight;this.scrollResponderScrollTo({x:x,y:y,animated:animated})},this._handleContentOnLayout=e=>{var _e$nativeEvent$layout=e.nativeEvent.layout,width=_e$nativeEvent$layout.width,height=_e$nativeEvent$layout.height;this.props.onContentSizeChange(width,height)},this._handleScroll=e=>{"production"!==process.env.NODE_ENV&&this.props.onScroll&&null==this.props.scrollEventThrottle&&console.log("You specified `onScroll` on a <ScrollView> but not `scrollEventThrottle`. You will only receive one event. Using `16` you get all the events but be aware that it may cause frame drops, use a bigger number if you don't need as much precision."),"on-drag"===this.props.keyboardDismissMode&&dismissKeyboard(),this.scrollResponderHandleScroll(e)},this._setInnerViewRef=node=>{this._innerViewRef=node},this._setScrollNodeRef=node=>{this._scrollNodeRef=node,null!=node&&(node.getScrollResponder=this.getScrollResponder,node.getInnerViewNode=this.getInnerViewNode,node.getInnerViewRef=this.getInnerViewRef,node.getNativeScrollRef=this.getNativeScrollRef,node.getScrollableNode=this.getScrollableNode,node.scrollTo=this.scrollTo,node.scrollToEnd=this.scrollToEnd,node.flashScrollIndicators=this.flashScrollIndicators,node.scrollResponderZoomTo=this.scrollResponderZoomTo,node.scrollResponderScrollNativeHandleToKeyboard=this.scrollResponderScrollNativeHandleToKeyboard),mergeRefs(this.props.forwardedRef)(node)}}scrollResponderHandleStartShouldSetResponder(){return!1}scrollResponderHandleResponderReject(){warning(!1,"ScrollView doesn't take rejection well - scrolls anyway")}scrollResponderFlashScrollIndicators(){}scrollResponderTextInputFocusError(e){console.error("Error measuring text field: ",e)}render(){var _this$props=this.props,contentContainerStyle=_this$props.contentContainerStyle,horizontal=_this$props.horizontal,onContentSizeChange=_this$props.onContentSizeChange,refreshControl=_this$props.refreshControl,stickyHeaderIndices=_this$props.stickyHeaderIndices,pagingEnabled=_this$props.pagingEnabled,centerContent=(_this$props.forwardedRef,_this$props.keyboardDismissMode,_this$props.onScroll,_this$props.centerContent),other=_objectWithoutPropertiesLoose(_this$props,_excluded);if("production"!==process.env.NODE_ENV&&this.props.style){var style=StyleSheet.flatten(this.props.style),childLayoutProps=["alignItems","justifyContent"].filter((prop=>style&&void 0!==style[prop]));invariant(0===childLayoutProps.length,"ScrollView child layout ("+JSON.stringify(childLayoutProps)+") must be applied through the contentContainerStyle prop.")}var contentSizeChangeProps={};onContentSizeChange&&(contentSizeChangeProps={onLayout:this._handleContentOnLayout});var hasStickyHeaderIndices=!horizontal&&Array.isArray(stickyHeaderIndices),children=hasStickyHeaderIndices||pagingEnabled?React.Children.map(this.props.children,((child,i)=>{var isSticky=hasStickyHeaderIndices&&stickyHeaderIndices.indexOf(i)>-1;return null!=child&&(isSticky||pagingEnabled)?React.createElement(View,{style:[isSticky&&styles.stickyHeader,pagingEnabled&&styles.pagingEnabledChild]},child):child})):this.props.children,contentContainer=React.createElement(View,_extends({},contentSizeChangeProps,{children:children,collapsable:!1,ref:this._setInnerViewRef,style:[horizontal&&styles.contentContainerHorizontal,centerContent&&styles.contentContainerCenterContent,contentContainerStyle]})),baseStyle=horizontal?styles.baseHorizontal:styles.baseVertical,pagingEnabledStyle=horizontal?styles.pagingEnabledHorizontal:styles.pagingEnabledVertical,props=_objectSpread(_objectSpread({},other),{},{style:[baseStyle,pagingEnabled&&pagingEnabledStyle,this.props.style],onTouchStart:this.scrollResponderHandleTouchStart,onTouchMove:this.scrollResponderHandleTouchMove,onTouchEnd:this.scrollResponderHandleTouchEnd,onScrollBeginDrag:this.scrollResponderHandleScrollBeginDrag,onScrollEndDrag:this.scrollResponderHandleScrollEndDrag,onMomentumScrollBegin:this.scrollResponderHandleMomentumScrollBegin,onMomentumScrollEnd:this.scrollResponderHandleMomentumScrollEnd,onStartShouldSetResponder:this.scrollResponderHandleStartShouldSetResponder,onStartShouldSetResponderCapture:this.scrollResponderHandleStartShouldSetResponderCapture,onScrollShouldSetResponder:this.scrollResponderHandleScrollShouldSetResponder,onScroll:this._handleScroll,onResponderGrant:this.scrollResponderHandleResponderGrant,onResponderTerminationRequest:this.scrollResponderHandleTerminationRequest,onResponderTerminate:this.scrollResponderHandleTerminate,onResponderRelease:this.scrollResponderHandleResponderRelease,onResponderReject:this.scrollResponderHandleResponderReject}),ScrollViewClass=ScrollViewBase;invariant(void 0!==ScrollViewClass,"ScrollViewClass must not be undefined");var scrollView=React.createElement(ScrollViewClass,_extends({},props,{ref:this._setScrollNodeRef}),contentContainer);return refreshControl?React.cloneElement(refreshControl,{style:props.style},scrollView):scrollView}}var commonStyle={flexGrow:1,flexShrink:1,transform:"translateZ(0)",WebkitOverflowScrolling:"touch"},styles=StyleSheet.create({baseVertical:_objectSpread(_objectSpread({},commonStyle),{},{flexDirection:"column",overflowX:"hidden",overflowY:"auto"}),baseHorizontal:_objectSpread(_objectSpread({},commonStyle),{},{flexDirection:"row",overflowX:"auto",overflowY:"hidden"}),contentContainerHorizontal:{flexDirection:"row"},contentContainerCenterContent:{justifyContent:"center",flexGrow:1},stickyHeader:{position:"sticky",top:0,zIndex:10},pagingEnabledHorizontal:{scrollSnapType:"x mandatory"},pagingEnabledVertical:{scrollSnapType:"y mandatory"},pagingEnabledChild:{scrollSnapAlign:"start"}}),ForwardedScrollView=React.forwardRef(((props,forwardedRef)=>React.createElement(ScrollView,_extends({},props,{forwardedRef:forwardedRef}))));ForwardedScrollView.displayName="ScrollView";export default ForwardedScrollView;