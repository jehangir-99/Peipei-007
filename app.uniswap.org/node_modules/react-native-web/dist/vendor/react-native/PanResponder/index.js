"use strict";import InteractionManager from"../../../exports/InteractionManager";import TouchHistoryMath from"../TouchHistoryMath";var currentCentroidXOfTouchesChangedAfter=TouchHistoryMath.currentCentroidXOfTouchesChangedAfter,currentCentroidYOfTouchesChangedAfter=TouchHistoryMath.currentCentroidYOfTouchesChangedAfter,previousCentroidXOfTouchesChangedAfter=TouchHistoryMath.previousCentroidXOfTouchesChangedAfter,previousCentroidYOfTouchesChangedAfter=TouchHistoryMath.previousCentroidYOfTouchesChangedAfter,currentCentroidX=TouchHistoryMath.currentCentroidX,currentCentroidY=TouchHistoryMath.currentCentroidY,PanResponder={_initializeGestureState(gestureState){gestureState.moveX=0,gestureState.moveY=0,gestureState.x0=0,gestureState.y0=0,gestureState.dx=0,gestureState.dy=0,gestureState.vx=0,gestureState.vy=0,gestureState.numberActiveTouches=0,gestureState._accountsForMovesUpTo=0},_updateGestureStateOnMove(gestureState,touchHistory){gestureState.numberActiveTouches=touchHistory.numberActiveTouches,gestureState.moveX=currentCentroidXOfTouchesChangedAfter(touchHistory,gestureState._accountsForMovesUpTo),gestureState.moveY=currentCentroidYOfTouchesChangedAfter(touchHistory,gestureState._accountsForMovesUpTo);var movedAfter=gestureState._accountsForMovesUpTo,prevX=previousCentroidXOfTouchesChangedAfter(touchHistory,movedAfter),x=currentCentroidXOfTouchesChangedAfter(touchHistory,movedAfter),prevY=previousCentroidYOfTouchesChangedAfter(touchHistory,movedAfter),y=currentCentroidYOfTouchesChangedAfter(touchHistory,movedAfter),nextDX=gestureState.dx+(x-prevX),nextDY=gestureState.dy+(y-prevY),dt=touchHistory.mostRecentTimeStamp-gestureState._accountsForMovesUpTo;gestureState.vx=(nextDX-gestureState.dx)/dt,gestureState.vy=(nextDY-gestureState.dy)/dt,gestureState.dx=nextDX,gestureState.dy=nextDY,gestureState._accountsForMovesUpTo=touchHistory.mostRecentTimeStamp},create(config){var interactionState={handle:null,shouldCancelClick:!1,timeout:null},gestureState={stateID:Math.random(),moveX:0,moveY:0,x0:0,y0:0,dx:0,dy:0,vx:0,vy:0,numberActiveTouches:0,_accountsForMovesUpTo:0};return{panHandlers:{onStartShouldSetResponder:event=>null!=config.onStartShouldSetPanResponder&&config.onStartShouldSetPanResponder(event,gestureState),onMoveShouldSetResponder:event=>null!=config.onMoveShouldSetPanResponder&&config.onMoveShouldSetPanResponder(event,gestureState),onStartShouldSetResponderCapture:event=>(1===event.nativeEvent.touches.length&&PanResponder._initializeGestureState(gestureState),gestureState.numberActiveTouches=event.touchHistory.numberActiveTouches,null!=config.onStartShouldSetPanResponderCapture&&config.onStartShouldSetPanResponderCapture(event,gestureState)),onMoveShouldSetResponderCapture(event){var touchHistory=event.touchHistory;return gestureState._accountsForMovesUpTo!==touchHistory.mostRecentTimeStamp&&(PanResponder._updateGestureStateOnMove(gestureState,touchHistory),!!config.onMoveShouldSetPanResponderCapture&&config.onMoveShouldSetPanResponderCapture(event,gestureState))},onResponderGrant:event=>(interactionState.handle||(interactionState.handle=InteractionManager.createInteractionHandle()),interactionState.timeout&&clearInteractionTimeout(interactionState),interactionState.shouldCancelClick=!0,gestureState.x0=currentCentroidX(event.touchHistory),gestureState.y0=currentCentroidY(event.touchHistory),gestureState.dx=0,gestureState.dy=0,config.onPanResponderGrant&&config.onPanResponderGrant(event,gestureState),null==config.onShouldBlockNativeResponder||config.onShouldBlockNativeResponder(event,gestureState)),onResponderReject(event){clearInteractionHandle(interactionState,config.onPanResponderReject,event,gestureState)},onResponderRelease(event){clearInteractionHandle(interactionState,config.onPanResponderRelease,event,gestureState),setInteractionTimeout(interactionState),PanResponder._initializeGestureState(gestureState)},onResponderStart(event){var touchHistory=event.touchHistory;gestureState.numberActiveTouches=touchHistory.numberActiveTouches,config.onPanResponderStart&&config.onPanResponderStart(event,gestureState)},onResponderMove(event){var touchHistory=event.touchHistory;gestureState._accountsForMovesUpTo!==touchHistory.mostRecentTimeStamp&&(PanResponder._updateGestureStateOnMove(gestureState,touchHistory),config.onPanResponderMove&&config.onPanResponderMove(event,gestureState))},onResponderEnd(event){var touchHistory=event.touchHistory;gestureState.numberActiveTouches=touchHistory.numberActiveTouches,clearInteractionHandle(interactionState,config.onPanResponderEnd,event,gestureState)},onResponderTerminate(event){clearInteractionHandle(interactionState,config.onPanResponderTerminate,event,gestureState),setInteractionTimeout(interactionState),PanResponder._initializeGestureState(gestureState)},onResponderTerminationRequest:event=>null==config.onPanResponderTerminationRequest||config.onPanResponderTerminationRequest(event,gestureState),onClickCapture:event=>{!0===interactionState.shouldCancelClick&&(event.stopPropagation(),event.preventDefault())}},getInteractionHandle:()=>interactionState.handle}}};function clearInteractionHandle(interactionState,callback,event,gestureState){interactionState.handle&&(InteractionManager.clearInteractionHandle(interactionState.handle),interactionState.handle=null),callback&&callback(event,gestureState)}function clearInteractionTimeout(interactionState){clearTimeout(interactionState.timeout)}function setInteractionTimeout(interactionState){interactionState.timeout=setTimeout((()=>{interactionState.shouldCancelClick=!1}),250)}export default PanResponder;