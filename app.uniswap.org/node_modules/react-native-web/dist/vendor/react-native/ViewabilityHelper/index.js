"use strict";import _objectSpread from"@babel/runtime/helpers/objectSpread2";import _createForOfIteratorHelperLoose from"@babel/runtime/helpers/createForOfIteratorHelperLoose";import invariant from"fbjs/lib/invariant";class ViewabilityHelper{constructor(config){void 0===config&&(config={viewAreaCoveragePercentThreshold:0}),this._hasInteracted=!1,this._timers=new Set,this._viewableIndices=[],this._viewableItems=new Map,this._config=config}dispose(){this._timers.forEach(clearTimeout)}computeViewableItems(props,scrollOffset,viewportHeight,getFrameMetrics,renderRange){var itemCount=props.getItemCount(props.data),_this$_config=this._config,itemVisiblePercentThreshold=_this$_config.itemVisiblePercentThreshold,viewAreaCoveragePercentThreshold=_this$_config.viewAreaCoveragePercentThreshold,viewAreaMode=null!=viewAreaCoveragePercentThreshold,viewablePercentThreshold=viewAreaMode?viewAreaCoveragePercentThreshold:itemVisiblePercentThreshold;invariant(null!=viewablePercentThreshold&&null!=itemVisiblePercentThreshold!=(null!=viewAreaCoveragePercentThreshold),"Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold");var viewableIndices=[];if(0===itemCount)return viewableIndices;var firstVisible=-1,_ref=renderRange||{first:0,last:itemCount-1},first=_ref.first,last=_ref.last;if(last>=itemCount)return console.warn("Invalid render range computing viewability "+JSON.stringify({renderRange:renderRange,itemCount:itemCount})),[];for(var idx=first;idx<=last;idx++){var metrics=getFrameMetrics(idx,props);if(metrics){var top=metrics.offset-scrollOffset,bottom=top+metrics.length;if(top<viewportHeight&&bottom>0)firstVisible=idx,_isViewable(viewAreaMode,viewablePercentThreshold,top,bottom,viewportHeight,metrics.length)&&viewableIndices.push(idx);else if(firstVisible>=0)break}}return viewableIndices}onUpdate(props,scrollOffset,viewportHeight,getFrameMetrics,createViewToken,onViewableItemsChanged,renderRange){var itemCount=props.getItemCount(props.data);if((!this._config.waitForInteraction||this._hasInteracted)&&0!==itemCount&&getFrameMetrics(0,props)){var viewableIndices=[];if(itemCount&&(viewableIndices=this.computeViewableItems(props,scrollOffset,viewportHeight,getFrameMetrics,renderRange)),this._viewableIndices.length!==viewableIndices.length||!this._viewableIndices.every(((v,ii)=>v===viewableIndices[ii])))if(this._viewableIndices=viewableIndices,this._config.minimumViewTime){var handle=setTimeout((()=>{this._timers.delete(handle),this._onUpdateSync(props,viewableIndices,onViewableItemsChanged,createViewToken)}),this._config.minimumViewTime);this._timers.add(handle)}else this._onUpdateSync(props,viewableIndices,onViewableItemsChanged,createViewToken)}}resetViewableIndices(){this._viewableIndices=[]}recordInteraction(){this._hasInteracted=!0}_onUpdateSync(props,viewableIndicesToCheck,onViewableItemsChanged,createViewToken){viewableIndicesToCheck=viewableIndicesToCheck.filter((ii=>this._viewableIndices.includes(ii)));for(var _step,prevItems=this._viewableItems,nextItems=new Map(viewableIndicesToCheck.map((ii=>{var viewable=createViewToken(ii,!0,props);return[viewable.key,viewable]}))),changed=[],_iterator=_createForOfIteratorHelperLoose(nextItems);!(_step=_iterator()).done;){var _step$value=_step.value,key=_step$value[0],viewable=_step$value[1];prevItems.has(key)||changed.push(viewable)}for(var _step2,_iterator2=_createForOfIteratorHelperLoose(prevItems);!(_step2=_iterator2()).done;){var _step2$value=_step2.value,_key=_step2$value[0],_viewable=_step2$value[1];nextItems.has(_key)||changed.push(_objectSpread(_objectSpread({},_viewable),{},{isViewable:!1}))}changed.length>0&&(this._viewableItems=nextItems,onViewableItemsChanged({viewableItems:Array.from(nextItems.values()),changed:changed,viewabilityConfig:this._config}))}}function _isViewable(viewAreaMode,viewablePercentThreshold,top,bottom,viewportHeight,itemLength){if(_isEntirelyVisible(top,bottom,viewportHeight))return!0;var pixels=_getPixelsVisible(top,bottom,viewportHeight);return 100*(viewAreaMode?pixels/viewportHeight:pixels/itemLength)>=viewablePercentThreshold}function _getPixelsVisible(top,bottom,viewportHeight){var visibleHeight=Math.min(bottom,viewportHeight)-Math.max(top,0);return Math.max(0,visibleHeight)}function _isEntirelyVisible(top,bottom,viewportHeight){return top>=0&&bottom<=viewportHeight&&bottom>top}export default ViewabilityHelper;