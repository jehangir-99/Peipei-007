import _extends from"@babel/runtime/helpers/extends";import _objectWithoutPropertiesLoose from"@babel/runtime/helpers/objectWithoutPropertiesLoose";import _objectSpread from"@babel/runtime/helpers/objectSpread2";var _excluded=["numColumns","columnWrapperStyle","removeClippedSubviews","strictMode"];import View from"../../../exports/View";import StyleSheet from"../../../exports/StyleSheet";import deepDiffer from"../deepDiffer";import Platform from"../../../exports/Platform";import invariant from"fbjs/lib/invariant";import*as React from"react";import VirtualizedList from"../VirtualizedList";import{keyExtractor as defaultKeyExtractor}from"../VirtualizeUtils";import memoizeOne from"memoize-one";function removeClippedSubviewsOrDefault(removeClippedSubviews){return null!=removeClippedSubviews?removeClippedSubviews:"android"===Platform.OS}function numColumnsOrDefault(numColumns){return null!=numColumns?numColumns:1}function isArrayLike(data){return"number"==typeof Object(data).length}class FlatList extends React.PureComponent{scrollToEnd(params){this._listRef&&this._listRef.scrollToEnd(params)}scrollToIndex(params){this._listRef&&this._listRef.scrollToIndex(params)}scrollToItem(params){this._listRef&&this._listRef.scrollToItem(params)}scrollToOffset(params){this._listRef&&this._listRef.scrollToOffset(params)}recordInteraction(){this._listRef&&this._listRef.recordInteraction()}flashScrollIndicators(){this._listRef&&this._listRef.flashScrollIndicators()}getScrollResponder(){if(this._listRef)return this._listRef.getScrollResponder()}getNativeScrollRef(){if(this._listRef)return this._listRef.getScrollRef()}getScrollableNode(){if(this._listRef)return this._listRef.getScrollableNode()}constructor(_props){super(_props),this._virtualizedListPairs=[],this._captureRef=ref=>{this._listRef=ref},this._getItem=(data,index)=>{var numColumns=numColumnsOrDefault(this.props.numColumns);if(numColumns>1){for(var ret=[],kk=0;kk<numColumns;kk++){var itemIndex=index*numColumns+kk;if(itemIndex<data.length){var _item=data[itemIndex];ret.push(_item)}}return ret}return data[index]},this._getItemCount=data=>{if(null!=data&&isArrayLike(data)){var numColumns=numColumnsOrDefault(this.props.numColumns);return numColumns>1?Math.ceil(data.length/numColumns):data.length}return 0},this._keyExtractor=(items,index)=>{var _this$props$keyExtrac,numColumns=numColumnsOrDefault(this.props.numColumns),keyExtractor=null!==(_this$props$keyExtrac=this.props.keyExtractor)&&void 0!==_this$props$keyExtrac?_this$props$keyExtrac:defaultKeyExtractor;return numColumns>1?(invariant(Array.isArray(items),"FlatList: Encountered internal consistency error, expected each item to consist of an array with 1-%s columns; instead, received a single item.",numColumns),items.map(((item,kk)=>keyExtractor(item,index*numColumns+kk))).join(":")):keyExtractor(items,index)},this._renderer=(ListItemComponent,renderItem,columnWrapperStyle,numColumns,extraData)=>{var cols=numColumnsOrDefault(numColumns),render=props=>ListItemComponent?React.createElement(ListItemComponent,props):renderItem?renderItem(props):null,renderProp=info=>{if(cols>1){var _item2=info.item,_index=info.index;return invariant(Array.isArray(_item2),"Expected array of items with numColumns > 1"),React.createElement(View,{style:[styles.row,columnWrapperStyle]},_item2.map(((it,kk)=>{var element=render({item:it,index:_index*cols+kk,separators:info.separators});return null!=element?React.createElement(React.Fragment,{key:kk},element):null})))}return render(info)};return ListItemComponent?{ListItemComponent:renderProp}:{renderItem:renderProp}},this._memoizedRenderer=memoizeOne(this._renderer),this._checkProps(this.props),this.props.viewabilityConfigCallbackPairs?this._virtualizedListPairs=this.props.viewabilityConfigCallbackPairs.map((pair=>({viewabilityConfig:pair.viewabilityConfig,onViewableItemsChanged:this._createOnViewableItemsChanged(pair.onViewableItemsChanged)}))):this.props.onViewableItemsChanged&&this._virtualizedListPairs.push({viewabilityConfig:this.props.viewabilityConfig,onViewableItemsChanged:this._createOnViewableItemsChanged(this.props.onViewableItemsChanged)})}componentDidUpdate(prevProps){invariant(prevProps.numColumns===this.props.numColumns,"Changing numColumns on the fly is not supported. Change the key prop on FlatList when changing the number of columns to force a fresh render of the component."),invariant(prevProps.onViewableItemsChanged===this.props.onViewableItemsChanged,"Changing onViewableItemsChanged on the fly is not supported"),invariant(!deepDiffer(prevProps.viewabilityConfig,this.props.viewabilityConfig),"Changing viewabilityConfig on the fly is not supported"),invariant(prevProps.viewabilityConfigCallbackPairs===this.props.viewabilityConfigCallbackPairs,"Changing viewabilityConfigCallbackPairs on the fly is not supported"),this._checkProps(this.props)}_checkProps(props){var getItem=props.getItem,getItemCount=props.getItemCount,horizontal=props.horizontal,columnWrapperStyle=props.columnWrapperStyle,onViewableItemsChanged=props.onViewableItemsChanged,viewabilityConfigCallbackPairs=props.viewabilityConfigCallbackPairs,numColumns=numColumnsOrDefault(this.props.numColumns);invariant(!getItem&&!getItemCount,"FlatList does not support custom data formats."),numColumns>1?invariant(!horizontal,"numColumns does not support horizontal."):invariant(!columnWrapperStyle,"columnWrapperStyle not supported for single column lists"),invariant(!(onViewableItemsChanged&&viewabilityConfigCallbackPairs),"FlatList does not support setting both onViewableItemsChanged and viewabilityConfigCallbackPairs.")}_pushMultiColumnViewable(arr,v){var _this$props$keyExtrac2,numColumns=numColumnsOrDefault(this.props.numColumns),keyExtractor=null!==(_this$props$keyExtrac2=this.props.keyExtractor)&&void 0!==_this$props$keyExtrac2?_this$props$keyExtrac2:defaultKeyExtractor;v.item.forEach(((item,ii)=>{invariant(null!=v.index,"Missing index!");var index=v.index*numColumns+ii;arr.push(_objectSpread(_objectSpread({},v),{},{item:item,key:keyExtractor(item,index),index:index}))}))}_createOnViewableItemsChanged(onViewableItemsChanged){return info=>{var numColumns=numColumnsOrDefault(this.props.numColumns);if(onViewableItemsChanged)if(numColumns>1){var changed=[],viewableItems=[];info.viewableItems.forEach((v=>this._pushMultiColumnViewable(viewableItems,v))),info.changed.forEach((v=>this._pushMultiColumnViewable(changed,v))),onViewableItemsChanged({viewableItems:viewableItems,changed:changed})}else onViewableItemsChanged(info)}}render(){var _this$props=this.props,numColumns=_this$props.numColumns,columnWrapperStyle=_this$props.columnWrapperStyle,_removeClippedSubviews=_this$props.removeClippedSubviews,_this$props$strictMod=_this$props.strictMode,strictMode=void 0!==_this$props$strictMod&&_this$props$strictMod,restProps=_objectWithoutPropertiesLoose(_this$props,_excluded),renderer=strictMode?this._memoizedRenderer:this._renderer;return React.createElement(VirtualizedList,_extends({},restProps,{getItem:this._getItem,getItemCount:this._getItemCount,keyExtractor:this._keyExtractor,ref:this._captureRef,viewabilityConfigCallbackPairs:this._virtualizedListPairs,removeClippedSubviews:removeClippedSubviewsOrDefault(_removeClippedSubviews)},renderer(this.props.ListItemComponent,this.props.renderItem,columnWrapperStyle,numColumns,this.props.extraData)))}}var styles=StyleSheet.create({row:{flexDirection:"row"}});export default FlatList;