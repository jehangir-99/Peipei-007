"use strict";export function elementsThatOverlapOffsets(offsets,props,getFrameMetrics,zoomScale){void 0===zoomScale&&(zoomScale=1);for(var itemCount=props.getItemCount(props.data),result=[],offsetIndex=0;offsetIndex<offsets.length;offsetIndex++)for(var currentOffset=offsets[offsetIndex],left=0,right=itemCount-1;left<=right;){var mid=left+(right-left>>>1),frame=getFrameMetrics(mid,props),scaledOffsetStart=frame.offset*zoomScale,scaledOffsetEnd=(frame.offset+frame.length)*zoomScale;if(0===mid&&currentOffset<scaledOffsetStart||0!==mid&&currentOffset<=scaledOffsetStart)right=mid-1;else{if(!(currentOffset>scaledOffsetEnd)){result[offsetIndex]=mid;break}left=mid+1}}return result}export function newRangeCount(prev,next){return next.last-next.first+1-Math.max(0,1+Math.min(next.last,prev.last)-Math.max(next.first,prev.first))}export function computeWindowedRenderLimits(props,maxToRenderPerBatch,windowSize,prev,getFrameMetricsApprox,scrollMetrics){var itemCount=props.getItemCount(props.data);if(0===itemCount)return{first:0,last:-1};var offset=scrollMetrics.offset,velocity=scrollMetrics.velocity,visibleLength=scrollMetrics.visibleLength,_scrollMetrics$zoomSc=scrollMetrics.zoomScale,zoomScale=void 0===_scrollMetrics$zoomSc?1:_scrollMetrics$zoomSc,visibleBegin=Math.max(0,offset),visibleEnd=visibleBegin+visibleLength,overscanLength=(windowSize-1)*visibleLength,fillPreference=velocity>1?"after":velocity<-1?"before":"none",overscanBegin=Math.max(0,visibleBegin-.5*overscanLength),overscanEnd=Math.max(0,visibleEnd+.5*overscanLength);if(getFrameMetricsApprox(itemCount-1,props).offset*zoomScale<overscanBegin)return{first:Math.max(0,itemCount-1-maxToRenderPerBatch),last:itemCount-1};var _elementsThatOverlapO=elementsThatOverlapOffsets([overscanBegin,visibleBegin,visibleEnd,overscanEnd],props,getFrameMetricsApprox,zoomScale),overscanFirst=_elementsThatOverlapO[0],first=_elementsThatOverlapO[1],last=_elementsThatOverlapO[2],overscanLast=_elementsThatOverlapO[3];overscanFirst=null==overscanFirst?0:overscanFirst,overscanLast=null==overscanLast?itemCount-1:overscanLast;for(var visible={first:first=null==first?Math.max(0,overscanFirst):first,last:last=null==last?Math.min(overscanLast,first+maxToRenderPerBatch-1):last},newCellCount=newRangeCount(prev,visible);!(first<=overscanFirst&&last>=overscanLast);){var maxNewCells=newCellCount>=maxToRenderPerBatch,firstWillAddMore=first<=prev.first||first>prev.last,firstShouldIncrement=first>overscanFirst&&(!maxNewCells||!firstWillAddMore),lastWillAddMore=last>=prev.last||last<prev.first,lastShouldIncrement=last<overscanLast&&(!maxNewCells||!lastWillAddMore);if(maxNewCells&&!firstShouldIncrement&&!lastShouldIncrement)break;!firstShouldIncrement||"after"===fillPreference&&lastShouldIncrement&&lastWillAddMore||(firstWillAddMore&&newCellCount++,first--),!lastShouldIncrement||"before"===fillPreference&&firstShouldIncrement&&firstWillAddMore||(lastWillAddMore&&newCellCount++,last++)}if(!(last>=first&&first>=0&&last<itemCount&&first>=overscanFirst&&last<=overscanLast&&first<=visible.first&&last>=visible.last))throw new Error("Bad window calculation "+JSON.stringify({first:first,last:last,itemCount:itemCount,overscanFirst:overscanFirst,overscanLast:overscanLast,visible:visible}));return{first:first,last:last}}export function keyExtractor(item,index){return"object"==typeof item&&null!=(null==item?void 0:item.key)?item.key:"object"==typeof item&&null!=(null==item?void 0:item.id)?item.id:String(index)}