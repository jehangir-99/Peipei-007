import _extends from"@babel/runtime/helpers/extends";import _objectSpread from"@babel/runtime/helpers/objectSpread2";import View from"../../../exports/View";import StyleSheet from"../../../exports/StyleSheet";import{VirtualizedListCellContextProvider}from"./VirtualizedListContext.js";import invariant from"fbjs/lib/invariant";import*as React from"react";export default class CellRenderer extends React.Component{constructor(){super(...arguments),this.state={separatorProps:{highlighted:!1,leadingItem:this.props.item}},this._separators={highlight:()=>{var _this$props=this.props,cellKey=_this$props.cellKey,prevCellKey=_this$props.prevCellKey;this.props.onUpdateSeparators([cellKey,prevCellKey],{highlighted:!0})},unhighlight:()=>{var _this$props2=this.props,cellKey=_this$props2.cellKey,prevCellKey=_this$props2.prevCellKey;this.props.onUpdateSeparators([cellKey,prevCellKey],{highlighted:!1})},updateProps:(select,newProps)=>{var _this$props3=this.props,cellKey=_this$props3.cellKey,prevCellKey=_this$props3.prevCellKey;this.props.onUpdateSeparators(["leading"===select?prevCellKey:cellKey],newProps)}},this._onLayout=nativeEvent=>{this.props.onCellLayout&&this.props.onCellLayout(nativeEvent,this.props.cellKey,this.props.index)}}static getDerivedStateFromProps(props,prevState){return{separatorProps:_objectSpread(_objectSpread({},prevState.separatorProps),{},{leadingItem:props.item})}}updateSeparatorProps(newProps){this.setState((state=>({separatorProps:_objectSpread(_objectSpread({},state.separatorProps),newProps)})))}componentWillUnmount(){this.props.onUnmount(this.props.cellKey)}_renderElement(renderItem,ListItemComponent,item,index){return renderItem&&ListItemComponent&&console.warn("VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take precedence over renderItem."),ListItemComponent?React.createElement(ListItemComponent,{item:item,index:index,separators:this._separators}):renderItem?renderItem({item:item,index:index,separators:this._separators}):void invariant(!1,"VirtualizedList: Either ListItemComponent or renderItem props are required but none were found.")}render(){var _this$props4=this.props,CellRendererComponent=_this$props4.CellRendererComponent,ItemSeparatorComponent=_this$props4.ItemSeparatorComponent,ListItemComponent=_this$props4.ListItemComponent,cellKey=_this$props4.cellKey,horizontal=_this$props4.horizontal,item=_this$props4.item,index=_this$props4.index,inversionStyle=_this$props4.inversionStyle,onCellFocusCapture=_this$props4.onCellFocusCapture,onCellLayout=_this$props4.onCellLayout,renderItem=_this$props4.renderItem,element=this._renderElement(renderItem,ListItemComponent,item,index),itemSeparator=React.isValidElement(ItemSeparatorComponent)?ItemSeparatorComponent:ItemSeparatorComponent&&React.createElement(ItemSeparatorComponent,this.state.separatorProps),cellStyle=inversionStyle?horizontal?[styles.rowReverse,inversionStyle]:[styles.columnReverse,inversionStyle]:horizontal?[styles.row,inversionStyle]:inversionStyle,result=CellRendererComponent?React.createElement(CellRendererComponent,_extends({cellKey:cellKey,index:index,item:item,style:cellStyle,onFocusCapture:onCellFocusCapture},onCellLayout&&{onLayout:this._onLayout}),element,itemSeparator):React.createElement(View,_extends({style:cellStyle,onFocusCapture:onCellFocusCapture},onCellLayout&&{onLayout:this._onLayout}),element,itemSeparator);return React.createElement(VirtualizedListCellContextProvider,{cellKey:this.props.cellKey},result)}}var styles=StyleSheet.create({row:{flexDirection:"row"},rowReverse:{flexDirection:"row-reverse"},columnReverse:{flexDirection:"column-reverse"}});