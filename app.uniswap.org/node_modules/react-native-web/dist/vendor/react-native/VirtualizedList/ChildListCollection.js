import _createForOfIteratorHelperLoose from"@babel/runtime/helpers/createForOfIteratorHelperLoose";import invariant from"fbjs/lib/invariant";export default class ChildListCollection{constructor(){this._cellKeyToChildren=new Map,this._childrenToCellKey=new Map}add(list,cellKey){var _this$_cellKeyToChild;invariant(!this._childrenToCellKey.has(list),"Trying to add already present child list");var cellLists=null!==(_this$_cellKeyToChild=this._cellKeyToChildren.get(cellKey))&&void 0!==_this$_cellKeyToChild?_this$_cellKeyToChild:new Set;cellLists.add(list),this._cellKeyToChildren.set(cellKey,cellLists),this._childrenToCellKey.set(list,cellKey)}remove(list){var cellKey=this._childrenToCellKey.get(list);invariant(null!=cellKey,"Trying to remove non-present child list"),this._childrenToCellKey.delete(list);var cellLists=this._cellKeyToChildren.get(cellKey);invariant(cellLists,"_cellKeyToChildren should contain cellKey"),cellLists.delete(list),0===cellLists.size&&this._cellKeyToChildren.delete(cellKey)}forEach(fn){for(var _step,_iterator=_createForOfIteratorHelperLoose(this._cellKeyToChildren.values());!(_step=_iterator()).done;)for(var _step2,listSet=_step.value,_iterator2=_createForOfIteratorHelperLoose(listSet);!(_step2=_iterator2()).done;){fn(_step2.value)}}forEachInCell(cellKey,fn){for(var _this$_cellKeyToChild2,_step3,listSet=null!==(_this$_cellKeyToChild2=this._cellKeyToChildren.get(cellKey))&&void 0!==_this$_cellKeyToChild2?_this$_cellKeyToChild2:[],_iterator3=_createForOfIteratorHelperLoose(listSet);!(_step3=_iterator3()).done;){fn(_step3.value)}}anyInCell(cellKey,fn){for(var _this$_cellKeyToChild3,_step4,listSet=null!==(_this$_cellKeyToChild3=this._cellKeyToChildren.get(cellKey))&&void 0!==_this$_cellKeyToChild3?_this$_cellKeyToChild3:[],_iterator4=_createForOfIteratorHelperLoose(listSet);!(_step4=_iterator4()).done;){if(fn(_step4.value))return!0}return!1}size(){return this._childrenToCellKey.size}}