"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.WalletLinkRelay=void 0;const error_1=require("../../core/error"),type_1=require("../../core/type"),util_1=require("../../core/util"),DiagnosticLogger_1=require("../../provider/DiagnosticLogger"),RelayAbstract_1=require("../RelayAbstract"),Session_1=require("../Session"),WalletLinkConnection_1=require("./connection/WalletLinkConnection"),Web3Response_1=require("./type/Web3Response"),WalletLinkRelayUI_1=require("./ui/WalletLinkRelayUI");class WalletLinkRelay extends RelayAbstract_1.RelayAbstract{constructor(options){var _a;super(),this.accountsCallback=null,this.chainCallbackParams={chainId:"",jsonRpcUrl:""},this.chainCallback=null,this.dappDefaultChain=1,this.appName="",this.appLogoUrl=null,this.linkedUpdated=linked=>{var _a;this.isLinked=linked;const cachedAddresses=this.storage.getItem(RelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY);if(linked&&(this.session.linked=linked),this.isUnlinkedErrorState=!1,cachedAddresses){const addresses=cachedAddresses.split(" "),wasConnectedViaStandalone="true"===this.storage.getItem("IsStandaloneSigning");if(""!==addresses[0]&&!linked&&this.session.linked&&!wasConnectedViaStandalone){this.isUnlinkedErrorState=!0;const sessionIdHash=this.getSessionIdHash();null===(_a=this.diagnostic)||void 0===_a||_a.log(DiagnosticLogger_1.EVENTS.UNLINKED_ERROR_STATE,{sessionIdHash:sessionIdHash})}}},this.metadataUpdated=(key,value)=>{this.storage.setItem(key,value)},this.chainUpdated=(chainId,jsonRpcUrl)=>{this.chainCallbackParams.chainId===chainId&&this.chainCallbackParams.jsonRpcUrl===jsonRpcUrl||(this.chainCallbackParams={chainId:chainId,jsonRpcUrl:jsonRpcUrl},this.chainCallback&&this.chainCallback(chainId,jsonRpcUrl))},this.accountUpdated=selectedAddress=>{this.accountsCallback&&this.accountsCallback([selectedAddress]),WalletLinkRelay.accountRequestCallbackIds.size>0&&(Array.from(WalletLinkRelay.accountRequestCallbackIds.values()).forEach((id=>{const message={type:"WEB3_RESPONSE",id:id,response:{method:"requestEthereumAccounts",result:[selectedAddress]}};this.invokeCallback(Object.assign(Object.assign({},message),{id:id}))})),WalletLinkRelay.accountRequestCallbackIds.clear())},this.connectedUpdated=connected=>{this.ui.setConnected(connected)},this.resetAndReload=this.resetAndReload.bind(this),this.linkAPIUrl=options.linkAPIUrl,this.storage=options.storage,this.options=options;const{session:session,ui:ui,connection:connection}=this.subscribe();this._session=session,this.connection=connection,this.relayEventManager=options.relayEventManager,this.diagnostic=options.diagnosticLogger,this._reloadOnDisconnect=null===(_a=options.reloadOnDisconnect)||void 0===_a||_a,this.ui=ui}subscribe(){const session=Session_1.Session.load(this.storage)||new Session_1.Session(this.storage).save(),{linkAPIUrl:linkAPIUrl,diagnostic:diagnostic}=this,connection=new WalletLinkConnection_1.WalletLinkConnection({session:session,linkAPIUrl:linkAPIUrl,diagnostic:diagnostic,listener:this}),{version:version,darkMode:darkMode}=this.options,ui=this.options.uiConstructor({linkAPIUrl:linkAPIUrl,version:version,darkMode:darkMode,session:session});return connection.connect(),{session:session,ui:ui,connection:connection}}attachUI(){this.ui.attach()}resetAndReload(){Promise.race([this.connection.setSessionMetadata("__destroyed","1"),new Promise((resolve=>setTimeout((()=>resolve(null)),1e3)))]).then((()=>{var _a,_b;const isStandalone=this.ui.isStandalone();null===(_a=this.diagnostic)||void 0===_a||_a.log(DiagnosticLogger_1.EVENTS.SESSION_STATE_CHANGE,{method:"relay::resetAndReload",sessionMetadataChange:"__destroyed, 1",sessionIdHash:this.getSessionIdHash()}),this.connection.destroy();const storedSession=Session_1.Session.load(this.storage);if((null==storedSession?void 0:storedSession.id)===this._session.id?this.storage.clear():storedSession&&(null===(_b=this.diagnostic)||void 0===_b||_b.log(DiagnosticLogger_1.EVENTS.SKIPPED_CLEARING_SESSION,{sessionIdHash:this.getSessionIdHash(),storedSessionIdHash:Session_1.Session.hash(storedSession.id)})),this._reloadOnDisconnect)return void this.ui.reloadUI();this.accountsCallback&&this.accountsCallback([],!0);const{session:session,ui:ui,connection:connection}=this.subscribe();this._session=session,this.connection=connection,this.ui=ui,isStandalone&&this.ui.setStandalone&&this.ui.setStandalone(!0),this.attachUI()})).catch((err=>{var _a;null===(_a=this.diagnostic)||void 0===_a||_a.log(DiagnosticLogger_1.EVENTS.FAILURE,{method:"relay::resetAndReload",message:`failed to reset and reload with ${err}`,sessionIdHash:this.getSessionIdHash()})}))}setAppInfo(appName,appLogoUrl){this.appName=appName,this.appLogoUrl=appLogoUrl}getStorageItem(key){return this.storage.getItem(key)}get session(){return this._session}setStorageItem(key,value){this.storage.setItem(key,value)}signEthereumMessage(message,address,addPrefix,typedDataJson){return this.sendRequest({method:"signEthereumMessage",params:{message:(0,util_1.hexStringFromBuffer)(message,!0),address:address,addPrefix:addPrefix,typedDataJson:typedDataJson||null}})}ethereumAddressFromSignedMessage(message,signature,addPrefix){return this.sendRequest({method:"ethereumAddressFromSignedMessage",params:{message:(0,util_1.hexStringFromBuffer)(message,!0),signature:(0,util_1.hexStringFromBuffer)(signature,!0),addPrefix:addPrefix}})}signEthereumTransaction(params){return this.sendRequest({method:"signEthereumTransaction",params:{fromAddress:params.fromAddress,toAddress:params.toAddress,weiValue:(0,util_1.bigIntStringFromBN)(params.weiValue),data:(0,util_1.hexStringFromBuffer)(params.data,!0),nonce:params.nonce,gasPriceInWei:params.gasPriceInWei?(0,util_1.bigIntStringFromBN)(params.gasPriceInWei):null,maxFeePerGas:params.gasPriceInWei?(0,util_1.bigIntStringFromBN)(params.gasPriceInWei):null,maxPriorityFeePerGas:params.gasPriceInWei?(0,util_1.bigIntStringFromBN)(params.gasPriceInWei):null,gasLimit:params.gasLimit?(0,util_1.bigIntStringFromBN)(params.gasLimit):null,chainId:params.chainId,shouldSubmit:!1}})}signAndSubmitEthereumTransaction(params){return this.sendRequest({method:"signEthereumTransaction",params:{fromAddress:params.fromAddress,toAddress:params.toAddress,weiValue:(0,util_1.bigIntStringFromBN)(params.weiValue),data:(0,util_1.hexStringFromBuffer)(params.data,!0),nonce:params.nonce,gasPriceInWei:params.gasPriceInWei?(0,util_1.bigIntStringFromBN)(params.gasPriceInWei):null,maxFeePerGas:params.maxFeePerGas?(0,util_1.bigIntStringFromBN)(params.maxFeePerGas):null,maxPriorityFeePerGas:params.maxPriorityFeePerGas?(0,util_1.bigIntStringFromBN)(params.maxPriorityFeePerGas):null,gasLimit:params.gasLimit?(0,util_1.bigIntStringFromBN)(params.gasLimit):null,chainId:params.chainId,shouldSubmit:!0}})}submitEthereumTransaction(signedTransaction,chainId){return this.sendRequest({method:"submitEthereumTransaction",params:{signedTransaction:(0,util_1.hexStringFromBuffer)(signedTransaction,!0),chainId:chainId}})}scanQRCode(regExp){return this.sendRequest({method:"scanQRCode",params:{regExp:regExp}})}getQRCodeUrl(){return(0,util_1.createQrUrl)(this._session.id,this._session.secret,this.linkAPIUrl,!1,this.options.version,this.dappDefaultChain)}genericRequest(data,action){return this.sendRequest({method:"generic",params:{action:action,data:data}})}sendGenericMessage(request){return this.sendRequest(request)}sendRequest(request){let hideSnackbarItem=null;const id=(0,util_1.randomBytesHex)(8),cancel=error=>{this.publishWeb3RequestCanceledEvent(id),this.handleErrorResponse(id,request.method,error),null==hideSnackbarItem||hideSnackbarItem()};return{promise:new Promise(((resolve,reject)=>{this.ui.isStandalone()||(hideSnackbarItem=this.ui.showConnecting({isUnlinkedErrorState:this.isUnlinkedErrorState,onCancel:cancel,onResetConnection:this.resetAndReload})),this.relayEventManager.callbacks.set(id,(response=>{if(null==hideSnackbarItem||hideSnackbarItem(),(0,Web3Response_1.isErrorResponse)(response))return reject(new Error(response.errorMessage));resolve(response)})),this.ui.isStandalone()?this.sendRequestStandalone(id,request):this.publishWeb3RequestEvent(id,request)})),cancel:cancel}}setConnectDisabled(disabled){this.ui.setConnectDisabled(disabled)}setAccountsCallback(accountsCallback){this.accountsCallback=accountsCallback}setChainCallback(chainCallback){this.chainCallback=chainCallback}setDappDefaultChainCallback(chainId){this.dappDefaultChain=chainId,this.ui instanceof WalletLinkRelayUI_1.WalletLinkRelayUI&&this.ui.setChainId(chainId)}publishWeb3RequestEvent(id,request){var _a;const message={type:"WEB3_REQUEST",id:id,request:request},storedSession=Session_1.Session.load(this.storage);null===(_a=this.diagnostic)||void 0===_a||_a.log(DiagnosticLogger_1.EVENTS.WEB3_REQUEST,{eventId:message.id,method:`relay::${request.method}`,sessionIdHash:this.getSessionIdHash(),storedSessionIdHash:storedSession?Session_1.Session.hash(storedSession.id):"",isSessionMismatched:((null==storedSession?void 0:storedSession.id)!==this._session.id).toString()}),this.publishEvent("Web3Request",message,!0).then((_=>{var _a;null===(_a=this.diagnostic)||void 0===_a||_a.log(DiagnosticLogger_1.EVENTS.WEB3_REQUEST_PUBLISHED,{eventId:message.id,method:`relay::${request.method}`,sessionIdHash:this.getSessionIdHash(),storedSessionIdHash:storedSession?Session_1.Session.hash(storedSession.id):"",isSessionMismatched:((null==storedSession?void 0:storedSession.id)!==this._session.id).toString()})})).catch((err=>{this.handleWeb3ResponseMessage({type:"WEB3_RESPONSE",id:message.id,response:{method:request.method,errorMessage:err.message}})}))}publishWeb3RequestCanceledEvent(id){const message={type:"WEB3_REQUEST_CANCELED",id:id};this.publishEvent("Web3RequestCanceled",message,!1).then()}publishEvent(event,message,callWebhook){return this.connection.publishEvent(event,message,callWebhook)}handleWeb3ResponseMessage(message){var _a;const{response:response}=message;if(null===(_a=this.diagnostic)||void 0===_a||_a.log(DiagnosticLogger_1.EVENTS.WEB3_RESPONSE,{eventId:message.id,method:`relay::${response.method}`,sessionIdHash:this.getSessionIdHash()}),"requestEthereumAccounts"===response.method)return WalletLinkRelay.accountRequestCallbackIds.forEach((id=>this.invokeCallback(Object.assign(Object.assign({},message),{id:id})))),void WalletLinkRelay.accountRequestCallbackIds.clear();this.invokeCallback(message)}handleErrorResponse(id,method,error,errorCode){var _a;const errorMessage=null!==(_a=null==error?void 0:error.message)&&void 0!==_a?_a:(0,error_1.getMessageFromCode)(errorCode);this.handleWeb3ResponseMessage({type:"WEB3_RESPONSE",id:id,response:{method:method,errorMessage:errorMessage,errorCode:errorCode}})}invokeCallback(message){const callback=this.relayEventManager.callbacks.get(message.id);callback&&(callback(message.response),this.relayEventManager.callbacks.delete(message.id))}requestEthereumAccounts(){const request={method:"requestEthereumAccounts",params:{appName:this.appName,appLogoUrl:this.appLogoUrl||null}},id=(0,util_1.randomBytesHex)(8),cancel=error=>{this.publishWeb3RequestCanceledEvent(id),this.handleErrorResponse(id,request.method,error)};return{promise:new Promise(((resolve,reject)=>{if(this.relayEventManager.callbacks.set(id,(response=>{if(this.ui.hideRequestEthereumAccounts(),(0,Web3Response_1.isErrorResponse)(response))return reject(new Error(response.errorMessage));resolve(response)})),this.ui.inlineAccountsResponse()){const onAccounts=accounts=>{this.handleWeb3ResponseMessage({type:"WEB3_RESPONSE",id:id,response:{method:"requestEthereumAccounts",result:accounts}})};this.ui.requestEthereumAccounts({onCancel:cancel,onAccounts:onAccounts})}else{const err=error_1.standardErrors.provider.userRejectedRequest("User denied account authorization");this.ui.requestEthereumAccounts({onCancel:()=>cancel(err)})}WalletLinkRelay.accountRequestCallbackIds.add(id),this.ui.inlineAccountsResponse()||this.ui.isStandalone()||this.publishWeb3RequestEvent(id,request)})),cancel:cancel}}selectProvider(providerOptions){const request_method="selectProvider",id=(0,util_1.randomBytesHex)(8);return{cancel:error=>{this.publishWeb3RequestCanceledEvent(id),this.handleErrorResponse(id,request_method,error)},promise:new Promise(((resolve,reject)=>{this.relayEventManager.callbacks.set(id,(response=>{if((0,Web3Response_1.isErrorResponse)(response))return reject(new Error(response.errorMessage));resolve(response)}));this.ui.selectProvider&&this.ui.selectProvider({onApprove:selectedProviderKey=>{this.handleWeb3ResponseMessage({type:"WEB3_RESPONSE",id:id,response:{method:"selectProvider",result:selectedProviderKey}})},onCancel:_error=>{this.handleWeb3ResponseMessage({type:"WEB3_RESPONSE",id:id,response:{method:"selectProvider",result:type_1.ProviderType.Unselected}})},providerOptions:providerOptions})}))}}watchAsset(type,address,symbol,decimals,image,chainId){const request={method:"watchAsset",params:{type:type,options:{address:address,symbol:symbol,decimals:decimals,image:image},chainId:chainId}};let hideSnackbarItem=null;const id=(0,util_1.randomBytesHex)(8),cancel=error=>{this.publishWeb3RequestCanceledEvent(id),this.handleErrorResponse(id,request.method,error),null==hideSnackbarItem||hideSnackbarItem()};this.ui.inlineWatchAsset()||(hideSnackbarItem=this.ui.showConnecting({isUnlinkedErrorState:this.isUnlinkedErrorState,onCancel:cancel,onResetConnection:this.resetAndReload}));return{cancel:cancel,promise:new Promise(((resolve,reject)=>{this.relayEventManager.callbacks.set(id,(response=>{if(null==hideSnackbarItem||hideSnackbarItem(),(0,Web3Response_1.isErrorResponse)(response))return reject(new Error(response.errorMessage));resolve(response)}));const _cancel=_error=>{this.handleWeb3ResponseMessage({type:"WEB3_RESPONSE",id:id,response:{method:"watchAsset",result:!1}})},approve=()=>{this.handleWeb3ResponseMessage({type:"WEB3_RESPONSE",id:id,response:{method:"watchAsset",result:!0}})};this.ui.inlineWatchAsset()&&this.ui.watchAsset({onApprove:approve,onCancel:_cancel,type:type,address:address,symbol:symbol,decimals:decimals,image:image,chainId:chainId}),this.ui.inlineWatchAsset()||this.ui.isStandalone()||this.publishWeb3RequestEvent(id,request)}))}}addEthereumChain(chainId,rpcUrls,iconUrls,blockExplorerUrls,chainName,nativeCurrency){const request={method:"addEthereumChain",params:{chainId:chainId,rpcUrls:rpcUrls,blockExplorerUrls:blockExplorerUrls,chainName:chainName,iconUrls:iconUrls,nativeCurrency:nativeCurrency}};let hideSnackbarItem=null;const id=(0,util_1.randomBytesHex)(8),cancel=error=>{this.publishWeb3RequestCanceledEvent(id),this.handleErrorResponse(id,request.method,error),null==hideSnackbarItem||hideSnackbarItem()};this.ui.inlineAddEthereumChain(chainId)||(hideSnackbarItem=this.ui.showConnecting({isUnlinkedErrorState:this.isUnlinkedErrorState,onCancel:cancel,onResetConnection:this.resetAndReload}));return{promise:new Promise(((resolve,reject)=>{this.relayEventManager.callbacks.set(id,(response=>{if(null==hideSnackbarItem||hideSnackbarItem(),(0,Web3Response_1.isErrorResponse)(response))return reject(new Error(response.errorMessage));resolve(response)}));const _cancel=_error=>{this.handleWeb3ResponseMessage({type:"WEB3_RESPONSE",id:id,response:{method:"addEthereumChain",result:{isApproved:!1,rpcUrl:""}}})},approve=rpcUrl=>{this.handleWeb3ResponseMessage({type:"WEB3_RESPONSE",id:id,response:{method:"addEthereumChain",result:{isApproved:!0,rpcUrl:rpcUrl}}})};this.ui.inlineAddEthereumChain(chainId)&&this.ui.addEthereumChain({onCancel:_cancel,onApprove:approve,chainId:request.params.chainId,rpcUrls:request.params.rpcUrls,blockExplorerUrls:request.params.blockExplorerUrls,chainName:request.params.chainName,iconUrls:request.params.iconUrls,nativeCurrency:request.params.nativeCurrency}),this.ui.inlineAddEthereumChain(chainId)||this.ui.isStandalone()||this.publishWeb3RequestEvent(id,request)})),cancel:cancel}}switchEthereumChain(chainId,address){const request={method:"switchEthereumChain",params:Object.assign({chainId:chainId},{address:address})},id=(0,util_1.randomBytesHex)(8);return{promise:new Promise(((resolve,reject)=>{this.relayEventManager.callbacks.set(id,(response=>(0,Web3Response_1.isErrorResponse)(response)&&response.errorCode?reject(error_1.standardErrors.provider.custom({code:response.errorCode,message:"Unrecognized chain ID. Try adding the chain using addEthereumChain first."})):(0,Web3Response_1.isErrorResponse)(response)?reject(new Error(response.errorMessage)):void resolve(response)));this.ui.switchEthereumChain({onCancel:error=>{var _a;if(error){const errorCode=null!==(_a=(0,error_1.getErrorCode)(error))&&void 0!==_a?_a:error_1.standardErrorCodes.provider.unsupportedChain;this.handleErrorResponse(id,"switchEthereumChain",error instanceof Error?error:error_1.standardErrors.provider.unsupportedChain(chainId),errorCode)}else this.handleWeb3ResponseMessage({type:"WEB3_RESPONSE",id:id,response:{method:"switchEthereumChain",result:{isApproved:!1,rpcUrl:""}}})},onApprove:rpcUrl=>{this.handleWeb3ResponseMessage({type:"WEB3_RESPONSE",id:id,response:{method:"switchEthereumChain",result:{isApproved:!0,rpcUrl:rpcUrl}}})},chainId:request.params.chainId,address:request.params.address}),this.ui.inlineSwitchEthereumChain()||this.ui.isStandalone()||this.publishWeb3RequestEvent(id,request)})),cancel:error=>{this.publishWeb3RequestCanceledEvent(id),this.handleErrorResponse(id,request.method,error)}}}inlineAddEthereumChain(chainId){return this.ui.inlineAddEthereumChain(chainId)}getSessionIdHash(){return Session_1.Session.hash(this._session.id)}sendRequestStandalone(id,request){const _cancel=error=>{this.handleErrorResponse(id,request.method,error)},onSuccess=response=>{this.handleWeb3ResponseMessage({type:"WEB3_RESPONSE",id:id,response:response})};switch(request.method){case"signEthereumMessage":this.ui.signEthereumMessage({request:request,onSuccess:onSuccess,onCancel:_cancel});break;case"signEthereumTransaction":this.ui.signEthereumTransaction({request:request,onSuccess:onSuccess,onCancel:_cancel});break;case"submitEthereumTransaction":this.ui.submitEthereumTransaction({request:request,onSuccess:onSuccess,onCancel:_cancel});break;case"ethereumAddressFromSignedMessage":this.ui.ethereumAddressFromSignedMessage({request:request,onSuccess:onSuccess});break;default:_cancel()}}}exports.WalletLinkRelay=WalletLinkRelay,WalletLinkRelay.accountRequestCallbackIds=new Set;