"use strict";var ConnectionState;Object.defineProperty(exports,"__esModule",{value:!0}),exports.WalletLinkWebSocket=exports.ConnectionState=void 0,function(ConnectionState){ConnectionState[ConnectionState.DISCONNECTED=0]="DISCONNECTED",ConnectionState[ConnectionState.CONNECTING=1]="CONNECTING",ConnectionState[ConnectionState.CONNECTED=2]="CONNECTED"}(ConnectionState||(exports.ConnectionState=ConnectionState={}));class WalletLinkWebSocket{setConnectionStateListener(listener){this.connectionStateListener=listener}setIncomingDataListener(listener){this.incomingDataListener=listener}constructor(url,WebSocketClass=WebSocket){this.WebSocketClass=WebSocketClass,this.webSocket=null,this.pendingData=[],this.url=url.replace(/^http/,"ws")}async connect(){if(this.webSocket)throw new Error("webSocket object is not null");return new Promise(((resolve,reject)=>{var _a;let webSocket;try{this.webSocket=webSocket=new this.WebSocketClass(this.url)}catch(err){return void reject(err)}null===(_a=this.connectionStateListener)||void 0===_a||_a.call(this,ConnectionState.CONNECTING),webSocket.onclose=evt=>{var _a;this.clearWebSocket(),reject(new Error(`websocket error ${evt.code}: ${evt.reason}`)),null===(_a=this.connectionStateListener)||void 0===_a||_a.call(this,ConnectionState.DISCONNECTED)},webSocket.onopen=_=>{var _a;if(resolve(),null===(_a=this.connectionStateListener)||void 0===_a||_a.call(this,ConnectionState.CONNECTED),this.pendingData.length>0){[...this.pendingData].forEach((data=>this.sendData(data))),this.pendingData=[]}},webSocket.onmessage=evt=>{var _a,_b;if("h"===evt.data)null===(_a=this.incomingDataListener)||void 0===_a||_a.call(this,{type:"Heartbeat"});else try{const message=JSON.parse(evt.data);null===(_b=this.incomingDataListener)||void 0===_b||_b.call(this,message)}catch(_c){}}}))}disconnect(){var _a;const{webSocket:webSocket}=this;if(webSocket){this.clearWebSocket(),null===(_a=this.connectionStateListener)||void 0===_a||_a.call(this,ConnectionState.DISCONNECTED),this.connectionStateListener=void 0,this.incomingDataListener=void 0;try{webSocket.close()}catch(_b){}}}sendData(data){const{webSocket:webSocket}=this;if(!webSocket)return this.pendingData.push(data),void this.connect();webSocket.send(data)}clearWebSocket(){const{webSocket:webSocket}=this;webSocket&&(this.webSocket=null,webSocket.onclose=null,webSocket.onerror=null,webSocket.onmessage=null,webSocket.onopen=null)}}exports.WalletLinkWebSocket=WalletLinkWebSocket;