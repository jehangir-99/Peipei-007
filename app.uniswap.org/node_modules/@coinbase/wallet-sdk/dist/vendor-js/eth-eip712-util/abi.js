const util=require("./util"),BN=require("bn.js");function elementaryName(name){return name.startsWith("int[")?"int256"+name.slice(3):"int"===name?"int256":name.startsWith("uint[")?"uint256"+name.slice(4):"uint"===name?"uint256":name.startsWith("fixed[")?"fixed128x128"+name.slice(5):"fixed"===name?"fixed128x128":name.startsWith("ufixed[")?"ufixed128x128"+name.slice(6):"ufixed"===name?"ufixed128x128":name}function parseTypeN(type){return parseInt(/^\D+(\d+)$/.exec(type)[1],10)}function parseTypeNxM(type){var tmp=/^\D+(\d+)x(\d+)$/.exec(type);return[parseInt(tmp[1],10),parseInt(tmp[2],10)]}function parseTypeArray(type){var tmp=type.match(/(.*)\[(.*?)\]$/);return tmp?""===tmp[2]?"dynamic":parseInt(tmp[2],10):null}function parseNumber(arg){var type=typeof arg;if("string"===type)return util.isHexString(arg)?new BN(util.stripHexPrefix(arg),16):new BN(arg,10);if("number"===type)return new BN(arg);if(arg.toArray)return arg;throw new Error("Argument is not a number")}function encodeSingle(type,arg){var size,num,ret,i;if("address"===type)return encodeSingle("uint160",parseNumber(arg));if("bool"===type)return encodeSingle("uint8",arg?1:0);if("string"===type)return encodeSingle("bytes",new Buffer(arg,"utf8"));if(isArray(type)){if(void 0===arg.length)throw new Error("Not an array?");if("dynamic"!==(size=parseTypeArray(type))&&0!==size&&arg.length>size)throw new Error("Elements exceed array size: "+size);for(i in ret=[],type=type.slice(0,type.lastIndexOf("[")),"string"==typeof arg&&(arg=JSON.parse(arg)),arg)ret.push(encodeSingle(type,arg[i]));if("dynamic"===size){var length=encodeSingle("uint256",arg.length);ret.unshift(length)}return Buffer.concat(ret)}if("bytes"===type)return arg=new Buffer(arg),ret=Buffer.concat([encodeSingle("uint256",arg.length),arg]),arg.length%32!=0&&(ret=Buffer.concat([ret,util.zeros(32-arg.length%32)])),ret;if(type.startsWith("bytes")){if((size=parseTypeN(type))<1||size>32)throw new Error("Invalid bytes<N> width: "+size);return util.setLengthRight(arg,32)}if(type.startsWith("uint")){if((size=parseTypeN(type))%8||size<8||size>256)throw new Error("Invalid uint<N> width: "+size);if((num=parseNumber(arg)).bitLength()>size)throw new Error("Supplied uint exceeds width: "+size+" vs "+num.bitLength());if(num<0)throw new Error("Supplied uint is negative");return num.toArrayLike(Buffer,"be",32)}if(type.startsWith("int")){if((size=parseTypeN(type))%8||size<8||size>256)throw new Error("Invalid int<N> width: "+size);if((num=parseNumber(arg)).bitLength()>size)throw new Error("Supplied int exceeds width: "+size+" vs "+num.bitLength());return num.toTwos(256).toArrayLike(Buffer,"be",32)}if(type.startsWith("ufixed")){if(size=parseTypeNxM(type),(num=parseNumber(arg))<0)throw new Error("Supplied ufixed is negative");return encodeSingle("uint256",num.mul(new BN(2).pow(new BN(size[1]))))}if(type.startsWith("fixed"))return size=parseTypeNxM(type),encodeSingle("int256",parseNumber(arg).mul(new BN(2).pow(new BN(size[1]))));throw new Error("Unsupported or invalid type: "+type)}function isDynamic(type){return"string"===type||"bytes"===type||"dynamic"===parseTypeArray(type)}function isArray(type){return type.lastIndexOf("]")===type.length-1}function rawEncode(types,values){var output=[],data=[],headLength=32*types.length;for(var i in types){var type=elementaryName(types[i]),cur=encodeSingle(type,values[i]);isDynamic(type)?(output.push(encodeSingle("uint256",headLength)),data.push(cur),headLength+=cur.length):output.push(cur)}return Buffer.concat(output.concat(data))}function solidityPack(types,values){if(types.length!==values.length)throw new Error("Number of types are not matching the values");for(var size,num,ret=[],i=0;i<types.length;i++){var type=elementaryName(types[i]),value=values[i];if("bytes"===type)ret.push(value);else if("string"===type)ret.push(new Buffer(value,"utf8"));else if("bool"===type)ret.push(new Buffer(value?"01":"00","hex"));else if("address"===type)ret.push(util.setLength(value,20));else if(type.startsWith("bytes")){if((size=parseTypeN(type))<1||size>32)throw new Error("Invalid bytes<N> width: "+size);ret.push(util.setLengthRight(value,size))}else if(type.startsWith("uint")){if((size=parseTypeN(type))%8||size<8||size>256)throw new Error("Invalid uint<N> width: "+size);if((num=parseNumber(value)).bitLength()>size)throw new Error("Supplied uint exceeds width: "+size+" vs "+num.bitLength());ret.push(num.toArrayLike(Buffer,"be",size/8))}else{if(!type.startsWith("int"))throw new Error("Unsupported or invalid type: "+type);if((size=parseTypeN(type))%8||size<8||size>256)throw new Error("Invalid int<N> width: "+size);if((num=parseNumber(value)).bitLength()>size)throw new Error("Supplied int exceeds width: "+size+" vs "+num.bitLength());ret.push(num.toTwos(size).toArrayLike(Buffer,"be",size/8))}}return Buffer.concat(ret)}function soliditySHA3(types,values){return util.keccak(solidityPack(types,values))}module.exports={rawEncode:rawEncode,solidityPack:solidityPack,soliditySHA3:soliditySHA3};