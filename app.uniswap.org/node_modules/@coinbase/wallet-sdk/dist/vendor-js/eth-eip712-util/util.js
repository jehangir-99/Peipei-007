const createKeccakHash=require("keccak/js"),BN=require("bn.js");function zeros(bytes){return Buffer.allocUnsafe(bytes).fill(0)}function setLength(msg,length,right){const buf=zeros(length);return msg=toBuffer(msg),right?msg.length<length?(msg.copy(buf),buf):msg.slice(0,length):msg.length<length?(msg.copy(buf,length-msg.length),buf):msg.slice(-length)}function setLengthRight(msg,length){return setLength(msg,length,!0)}function toBuffer(v){if(!Buffer.isBuffer(v))if(Array.isArray(v))v=Buffer.from(v);else if("string"==typeof v)v=isHexString(v)?Buffer.from(padToEven(stripHexPrefix(v)),"hex"):Buffer.from(v);else if("number"==typeof v)v=intToBuffer(v);else if(null==v)v=Buffer.allocUnsafe(0);else if(BN.isBN(v))v=v.toArrayLike(Buffer);else{if(!v.toArray)throw new Error("invalid type");v=Buffer.from(v.toArray())}return v}function bufferToHex(buf){return"0x"+(buf=toBuffer(buf)).toString("hex")}function keccak(a,bits){return a=toBuffer(a),bits||(bits=256),createKeccakHash("keccak"+bits).update(a).digest()}function padToEven(str){return str.length%2?"0"+str:str}function isHexString(str){return"string"==typeof str&&str.match(/^0x[0-9A-Fa-f]*$/)}function stripHexPrefix(str){return"string"==typeof str&&str.startsWith("0x")?str.slice(2):str}module.exports={zeros:zeros,setLength:setLength,setLengthRight:setLengthRight,isHexString:isHexString,stripHexPrefix:stripHexPrefix,toBuffer:toBuffer,bufferToHex:bufferToHex,keccak:keccak};