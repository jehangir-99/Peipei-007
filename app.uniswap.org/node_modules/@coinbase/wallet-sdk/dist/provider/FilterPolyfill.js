"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.filterFromParam=exports.FilterPolyfill=void 0;const type_1=require("../core/type"),util_1=require("../core/util"),TIMEOUT=3e5,JSONRPC_TEMPLATE={jsonrpc:"2.0",id:0};class FilterPolyfill{constructor(provider){this.logFilters=new Map,this.blockFilters=new Set,this.pendingTransactionFilters=new Set,this.cursors=new Map,this.timeouts=new Map,this.nextFilterId=(0,type_1.IntNumber)(1),this.REQUEST_THROTTLE_INTERVAL=1e3,this.lastFetchTimestamp=new Date(0),this.resolvers=[],this.provider=provider}async newFilter(param){const filter=filterFromParam(param),id=this.makeFilterId(),cursor=await this.setInitialCursorPosition(id,filter.fromBlock);return console.info(`Installing new log filter(${id}):`,filter,"initial cursor position:",cursor),this.logFilters.set(id,filter),this.setFilterTimeout(id),(0,util_1.hexStringFromIntNumber)(id)}async newBlockFilter(){const id=this.makeFilterId(),cursor=await this.setInitialCursorPosition(id,"latest");return console.info(`Installing new block filter (${id}) with initial cursor position:`,cursor),this.blockFilters.add(id),this.setFilterTimeout(id),(0,util_1.hexStringFromIntNumber)(id)}async newPendingTransactionFilter(){const id=this.makeFilterId(),cursor=await this.setInitialCursorPosition(id,"latest");return console.info(`Installing new block filter (${id}) with initial cursor position:`,cursor),this.pendingTransactionFilters.add(id),this.setFilterTimeout(id),(0,util_1.hexStringFromIntNumber)(id)}uninstallFilter(filterId){const id=(0,util_1.intNumberFromHexString)(filterId);return console.info(`Uninstalling filter (${id})`),this.deleteFilter(id),!0}getFilterChanges(filterId){const id=(0,util_1.intNumberFromHexString)(filterId);return this.timeouts.has(id)&&this.setFilterTimeout(id),this.logFilters.has(id)?this.getLogFilterChanges(id):this.blockFilters.has(id)?this.getBlockFilterChanges(id):this.pendingTransactionFilters.has(id)?this.getPendingTransactionFilterChanges(id):Promise.resolve(filterNotFoundError())}async getFilterLogs(filterId){const id=(0,util_1.intNumberFromHexString)(filterId),filter=this.logFilters.get(id);return filter?this.sendAsyncPromise(Object.assign(Object.assign({},JSONRPC_TEMPLATE),{method:"eth_getLogs",params:[paramFromFilter(filter)]})):filterNotFoundError()}makeFilterId(){return(0,type_1.IntNumber)(++this.nextFilterId)}sendAsyncPromise(request){return new Promise(((resolve,reject)=>{this.provider.sendAsync(request,((err,response)=>err?reject(err):Array.isArray(response)||null==response?reject(new Error(`unexpected response received: ${JSON.stringify(response)}`)):void resolve(response)))}))}deleteFilter(id){console.info(`Deleting filter (${id})`),this.logFilters.delete(id),this.blockFilters.delete(id),this.pendingTransactionFilters.delete(id),this.cursors.delete(id),this.timeouts.delete(id)}async getLogFilterChanges(id){const filter=this.logFilters.get(id),cursorPosition=this.cursors.get(id);if(!cursorPosition||!filter)return filterNotFoundError();const currentBlockHeight=await this.getCurrentBlockHeight(),toBlock="latest"===filter.toBlock?currentBlockHeight:filter.toBlock;if(cursorPosition>currentBlockHeight)return emptyResult();if(cursorPosition>Number(filter.toBlock))return emptyResult();console.info(`Fetching logs from ${cursorPosition} to ${toBlock} for filter ${id}`);const response=await this.sendAsyncPromise(Object.assign(Object.assign({},JSONRPC_TEMPLATE),{method:"eth_getLogs",params:[paramFromFilter(Object.assign(Object.assign({},filter),{fromBlock:cursorPosition,toBlock:toBlock}))]}));if(Array.isArray(response.result)){const blocks=response.result.map((log=>(0,util_1.intNumberFromHexString)(log.blockNumber||"0x0"))),highestBlock=Math.max(...blocks);if(highestBlock&&highestBlock>cursorPosition){const newCursorPosition=(0,type_1.IntNumber)(highestBlock+1);console.info(`Moving cursor position for filter (${id}) from ${cursorPosition} to ${newCursorPosition}`),this.cursors.set(id,newCursorPosition)}}return response}async getBlockFilterChanges(id){const cursorPosition=this.cursors.get(id);if(!cursorPosition)return filterNotFoundError();const currentBlockHeight=await this.getCurrentBlockHeight();if(cursorPosition>currentBlockHeight)return emptyResult();console.info(`Fetching blocks from ${cursorPosition} to ${currentBlockHeight} for filter (${id})`);const blocks=(await Promise.all((0,util_1.range)(cursorPosition,currentBlockHeight+1).map((i=>this.getBlockHashByNumber((0,type_1.IntNumber)(i)))))).filter((hash=>!!hash)),newCursorPosition=(0,type_1.IntNumber)(cursorPosition+blocks.length);return console.info(`Moving cursor position for filter (${id}) from ${cursorPosition} to ${newCursorPosition}`),this.cursors.set(id,newCursorPosition),Object.assign(Object.assign({},JSONRPC_TEMPLATE),{result:blocks})}async getPendingTransactionFilterChanges(_id){return Promise.resolve(emptyResult())}async setInitialCursorPosition(id,startBlock){const currentBlockHeight=await this.getCurrentBlockHeight(),initialCursorPosition="number"==typeof startBlock&&startBlock>currentBlockHeight?startBlock:currentBlockHeight;return this.cursors.set(id,initialCursorPosition),initialCursorPosition}setFilterTimeout(id){const existing=this.timeouts.get(id);existing&&window.clearTimeout(existing);const timeout=window.setTimeout((()=>{console.info(`Filter (${id}) timed out`),this.deleteFilter(id)}),3e5);this.timeouts.set(id,timeout)}async getCurrentBlockHeight(){const now=new Date;if(now.getTime()-this.lastFetchTimestamp.getTime()>this.REQUEST_THROTTLE_INTERVAL){this.lastFetchTimestamp=now;const height=await this._getCurrentBlockHeight();this.currentBlockHeight=height,this.resolvers.forEach((resolve=>resolve(height))),this.resolvers=[]}return this.currentBlockHeight?this.currentBlockHeight:new Promise((resolve=>this.resolvers.push(resolve)))}async _getCurrentBlockHeight(){const{result:result}=await this.sendAsyncPromise(Object.assign(Object.assign({},JSONRPC_TEMPLATE),{method:"eth_blockNumber",params:[]}));return(0,util_1.intNumberFromHexString)((0,util_1.ensureHexString)(result))}async getBlockHashByNumber(blockNumber){const response=await this.sendAsyncPromise(Object.assign(Object.assign({},JSONRPC_TEMPLATE),{method:"eth_getBlockByNumber",params:[(0,util_1.hexStringFromIntNumber)(blockNumber),!1]}));return response.result&&"string"==typeof response.result.hash?(0,util_1.ensureHexString)(response.result.hash):null}}function filterFromParam(param){return{fromBlock:intBlockHeightFromHexBlockHeight(param.fromBlock),toBlock:intBlockHeightFromHexBlockHeight(param.toBlock),addresses:void 0===param.address?null:Array.isArray(param.address)?param.address:[param.address],topics:param.topics||[]}}function paramFromFilter(filter){const param={fromBlock:hexBlockHeightFromIntBlockHeight(filter.fromBlock),toBlock:hexBlockHeightFromIntBlockHeight(filter.toBlock),topics:filter.topics};return null!==filter.addresses&&(param.address=filter.addresses),param}function intBlockHeightFromHexBlockHeight(value){if(void 0===value||"latest"===value||"pending"===value)return"latest";if("earliest"===value)return(0,type_1.IntNumber)(0);if((0,util_1.isHexString)(value))return(0,util_1.intNumberFromHexString)(value);throw new Error(`Invalid block option: ${String(value)}`)}function hexBlockHeightFromIntBlockHeight(value){return"latest"===value?value:(0,util_1.hexStringFromIntNumber)(value)}function filterNotFoundError(){return Object.assign(Object.assign({},JSONRPC_TEMPLATE),{error:{code:-32e3,message:"filter not found"}})}function emptyResult(){return Object.assign(Object.assign({},JSONRPC_TEMPLATE),{result:[]})}exports.FilterPolyfill=FilterPolyfill,exports.filterFromParam=filterFromParam;