"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Cipher=void 0;const util_1=require("../core/util");class Cipher{constructor(secret){this.secret=secret}async encrypt(plainText){const secret=this.secret;if(64!==secret.length)throw Error("secret must be 256 bits");const ivBytes=crypto.getRandomValues(new Uint8Array(12)),secretKey=await crypto.subtle.importKey("raw",(0,util_1.hexStringToUint8Array)(secret),{name:"aes-gcm"},!1,["encrypt","decrypt"]),enc=new TextEncoder,encryptedResult=await window.crypto.subtle.encrypt({name:"AES-GCM",iv:ivBytes},secretKey,enc.encode(plainText)),authTag=encryptedResult.slice(encryptedResult.byteLength-16),encryptedPlaintext=encryptedResult.slice(0,encryptedResult.byteLength-16),authTagBytes=new Uint8Array(authTag),encryptedPlaintextBytes=new Uint8Array(encryptedPlaintext),concatted=new Uint8Array([...ivBytes,...authTagBytes,...encryptedPlaintextBytes]);return(0,util_1.uint8ArrayToHex)(concatted)}async decrypt(cipherText){const secret=this.secret;if(64!==secret.length)throw Error("secret must be 256 bits");return new Promise(((resolve,reject)=>{!async function(){const secretKey=await crypto.subtle.importKey("raw",(0,util_1.hexStringToUint8Array)(secret),{name:"aes-gcm"},!1,["encrypt","decrypt"]),encrypted=(0,util_1.hexStringToUint8Array)(cipherText),ivBytes=encrypted.slice(0,12),authTagBytes=encrypted.slice(12,28),encryptedPlaintextBytes=encrypted.slice(28),concattedBytes=new Uint8Array([...encryptedPlaintextBytes,...authTagBytes]),algo={name:"AES-GCM",iv:new Uint8Array(ivBytes)};try{const decrypted=await window.crypto.subtle.decrypt(algo,secretKey,concattedBytes),decoder=new TextDecoder;resolve(decoder.decode(decrypted))}catch(err){reject(err)}}()}))}}exports.Cipher=Cipher;