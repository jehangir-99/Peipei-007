import{CodedError}from"expo-modules-core";import{CryptoEncoding}from"./Crypto.types";const getCrypto=()=>window.crypto??window.msCrypto;export default{get name(){return"ExpoCrypto"},async digestStringAsync(algorithm,data,options){if(!crypto.subtle)throw new CodedError("ERR_CRYPTO_UNAVAILABLE","Access to the WebCrypto API is restricted to secure origins (https).");const buffer=(new TextEncoder).encode(data),hashedData=await crypto.subtle.digest(algorithm,buffer);if(options.encoding===CryptoEncoding.HEX)return hexString(hashedData);if(options.encoding===CryptoEncoding.BASE64)return btoa(String.fromCharCode(...new Uint8Array(hashedData)));throw new CodedError("ERR_CRYPTO_DIGEST","Invalid encoding type provided.")},getRandomBytes(length){const array=new Uint8Array(length);return getCrypto().getRandomValues(array)},async getRandomBytesAsync(length){const array=new Uint8Array(length);return getCrypto().getRandomValues(array)},getRandomValues:typedArray=>getCrypto().getRandomValues(typedArray),randomUUID:()=>getCrypto().randomUUID(),digestAsync:(algorithm,data)=>getCrypto().subtle.digest(algorithm,data)};function hexString(buffer){return[...new Uint8Array(buffer)].map((value=>value.toString(16).padStart(2,"0"))).join("")}