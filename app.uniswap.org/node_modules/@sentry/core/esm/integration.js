import{arrayify,logger}from"@sentry/utils";import{addGlobalEventProcessor}from"./eventProcessors.js";import{getCurrentHub}from"./hub.js";const installedIntegrations=[];function filterDuplicates(integrations){const integrationsByName={};return integrations.forEach((currentInstance=>{const{name:name}=currentInstance,existingInstance=integrationsByName[name];existingInstance&&!existingInstance.isDefaultInstance&&currentInstance.isDefaultInstance||(integrationsByName[name]=currentInstance)})),Object.keys(integrationsByName).map((k=>integrationsByName[k]))}function getIntegrationsToSetup(options){const defaultIntegrations=options.defaultIntegrations||[],userIntegrations=options.integrations;let integrations;defaultIntegrations.forEach((integration=>{integration.isDefaultInstance=!0})),integrations=Array.isArray(userIntegrations)?[...defaultIntegrations,...userIntegrations]:"function"==typeof userIntegrations?arrayify(userIntegrations(defaultIntegrations)):defaultIntegrations;const finalIntegrations=filterDuplicates(integrations),debugIndex=findIndex(finalIntegrations,(integration=>"Debug"===integration.name));if(-1!==debugIndex){const[debugInstance]=finalIntegrations.splice(debugIndex,1);finalIntegrations.push(debugInstance)}return finalIntegrations}function setupIntegrations(client,integrations){const integrationIndex={};return integrations.forEach((integration=>{integration&&setupIntegration(client,integration,integrationIndex)})),integrationIndex}function setupIntegration(client,integration,integrationIndex){if(integrationIndex[integration.name]=integration,-1===installedIntegrations.indexOf(integration.name)&&(integration.setupOnce(addGlobalEventProcessor,getCurrentHub),installedIntegrations.push(integration.name)),client.on&&"function"==typeof integration.preprocessEvent){const callback=integration.preprocessEvent.bind(integration);client.on("preprocessEvent",((event,hint)=>callback(event,hint,client)))}if(client.addEventProcessor&&"function"==typeof integration.processEvent){const callback=integration.processEvent.bind(integration),processor=Object.assign(((event,hint)=>callback(event,hint,client)),{id:integration.name});client.addEventProcessor(processor)}("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log(`Integration installed: ${integration.name}`)}function addIntegration(integration){const client=getCurrentHub().getClient();client&&client.addIntegration?client.addIntegration(integration):("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.warn(`Cannot add integration "${integration.name}" because no SDK Client is available.`)}function findIndex(arr,callback){for(let i=0;i<arr.length;i++)if(!0===callback(arr[i]))return i;return-1}export{addIntegration,getIntegrationsToSetup,installedIntegrations,setupIntegration,setupIntegrations};