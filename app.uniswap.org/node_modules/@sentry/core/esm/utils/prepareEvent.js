import{uuid4,dateTimestampInSeconds,resolvedSyncPromise,truncate,GLOBAL_OBJ,normalize}from"@sentry/utils";import{DEFAULT_ENVIRONMENT}from"../constants.js";import{notifyEventProcessors,getGlobalEventProcessors}from"../eventProcessors.js";import{Scope}from"../scope.js";function prepareEvent(options,event,hint,scope,client){const{normalizeDepth:normalizeDepth=3,normalizeMaxBreadth:normalizeMaxBreadth=1e3}=options,prepared={...event,event_id:event.event_id||hint.event_id||uuid4(),timestamp:event.timestamp||dateTimestampInSeconds()},integrations=hint.integrations||options.integrations.map((i=>i.name));applyClientOptions(prepared,options),applyIntegrationsMetadata(prepared,integrations),void 0===event.type&&applyDebugIds(prepared,options.stackParser);let finalScope=scope;hint.captureContext&&(finalScope=Scope.clone(finalScope).update(hint.captureContext));let result=resolvedSyncPromise(prepared);const clientEventProcessors=client&&client.getEventProcessors?client.getEventProcessors():[];if(finalScope){if(finalScope.getAttachments){const attachments=[...hint.attachments||[],...finalScope.getAttachments()];attachments.length&&(hint.attachments=attachments)}result=finalScope.applyToEvent(prepared,hint,clientEventProcessors)}else result=notifyEventProcessors([...clientEventProcessors,...getGlobalEventProcessors()],prepared,hint);return result.then((evt=>(evt&&applyDebugMeta(evt),"number"==typeof normalizeDepth&&normalizeDepth>0?normalizeEvent(evt,normalizeDepth,normalizeMaxBreadth):evt)))}function applyClientOptions(event,options){const{environment:environment,release:release,dist:dist,maxValueLength:maxValueLength=250}=options;"environment"in event||(event.environment="environment"in options?environment:DEFAULT_ENVIRONMENT),void 0===event.release&&void 0!==release&&(event.release=release),void 0===event.dist&&void 0!==dist&&(event.dist=dist),event.message&&(event.message=truncate(event.message,maxValueLength));const exception=event.exception&&event.exception.values&&event.exception.values[0];exception&&exception.value&&(exception.value=truncate(exception.value,maxValueLength));const request=event.request;request&&request.url&&(request.url=truncate(request.url,maxValueLength))}const debugIdStackParserCache=new WeakMap;function applyDebugIds(event,stackParser){const debugIdMap=GLOBAL_OBJ._sentryDebugIds;if(!debugIdMap)return;let debugIdStackFramesCache;const cachedDebugIdStackFrameCache=debugIdStackParserCache.get(stackParser);cachedDebugIdStackFrameCache?debugIdStackFramesCache=cachedDebugIdStackFrameCache:(debugIdStackFramesCache=new Map,debugIdStackParserCache.set(stackParser,debugIdStackFramesCache));const filenameDebugIdMap=Object.keys(debugIdMap).reduce(((acc,debugIdStackTrace)=>{let parsedStack;const cachedParsedStack=debugIdStackFramesCache.get(debugIdStackTrace);cachedParsedStack?parsedStack=cachedParsedStack:(parsedStack=stackParser(debugIdStackTrace),debugIdStackFramesCache.set(debugIdStackTrace,parsedStack));for(let i=parsedStack.length-1;i>=0;i--){const stackFrame=parsedStack[i];if(stackFrame.filename){acc[stackFrame.filename]=debugIdMap[debugIdStackTrace];break}}return acc}),{});try{event.exception.values.forEach((exception=>{exception.stacktrace.frames.forEach((frame=>{frame.filename&&(frame.debug_id=filenameDebugIdMap[frame.filename])}))}))}catch(e){}}function applyDebugMeta(event){const filenameDebugIdMap={};try{event.exception.values.forEach((exception=>{exception.stacktrace.frames.forEach((frame=>{frame.debug_id&&(frame.abs_path?filenameDebugIdMap[frame.abs_path]=frame.debug_id:frame.filename&&(filenameDebugIdMap[frame.filename]=frame.debug_id),delete frame.debug_id)}))}))}catch(e){}if(0===Object.keys(filenameDebugIdMap).length)return;event.debug_meta=event.debug_meta||{},event.debug_meta.images=event.debug_meta.images||[];const images=event.debug_meta.images;Object.keys(filenameDebugIdMap).forEach((filename=>{images.push({type:"sourcemap",code_file:filename,debug_id:filenameDebugIdMap[filename]})}))}function applyIntegrationsMetadata(event,integrationNames){integrationNames.length>0&&(event.sdk=event.sdk||{},event.sdk.integrations=[...event.sdk.integrations||[],...integrationNames])}function normalizeEvent(event,depth,maxBreadth){if(!event)return null;const normalized={...event,...event.breadcrumbs&&{breadcrumbs:event.breadcrumbs.map((b=>({...b,...b.data&&{data:normalize(b.data,depth,maxBreadth)}})))},...event.user&&{user:normalize(event.user,depth,maxBreadth)},...event.contexts&&{contexts:normalize(event.contexts,depth,maxBreadth)},...event.extra&&{extra:normalize(event.extra,depth,maxBreadth)}};return event.contexts&&event.contexts.trace&&normalized.contexts&&(normalized.contexts.trace=event.contexts.trace,event.contexts.trace.data&&(normalized.contexts.trace.data=normalize(event.contexts.trace.data,depth,maxBreadth))),event.spans&&(normalized.spans=event.spans.map((span=>(span.data&&(span.data=normalize(span.data,depth,maxBreadth)),span)))),normalized}export{applyDebugIds,applyDebugMeta,prepareEvent};