import{logger,isNaN}from"@sentry/utils";import{hasTracingEnabled}from"../utils/hasTracingEnabled.js";function sampleTransaction(transaction,options,samplingContext){if(!hasTracingEnabled(options))return transaction.sampled=!1,transaction;if(void 0!==transaction.sampled)return transaction.setMetadata({sampleRate:Number(transaction.sampled)}),transaction;let sampleRate;return"function"==typeof options.tracesSampler?(sampleRate=options.tracesSampler(samplingContext),transaction.setMetadata({sampleRate:Number(sampleRate)})):void 0!==samplingContext.parentSampled?sampleRate=samplingContext.parentSampled:void 0!==options.tracesSampleRate?(sampleRate=options.tracesSampleRate,transaction.setMetadata({sampleRate:Number(sampleRate)})):(sampleRate=1,transaction.setMetadata({sampleRate:sampleRate})),isValidSampleRate(sampleRate)?sampleRate?(transaction.sampled=Math.random()<sampleRate,transaction.sampled?(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`),transaction):(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log(`[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(sampleRate)})`),transaction)):(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log("[Tracing] Discarding transaction because "+("function"==typeof options.tracesSampler?"tracesSampler returned 0 or false":"a negative sampling decision was inherited or tracesSampleRate is set to 0")),transaction.sampled=!1,transaction):(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.warn("[Tracing] Discarding transaction because of invalid sample rate."),transaction.sampled=!1,transaction)}function isValidSampleRate(rate){return isNaN(rate)||"number"!=typeof rate&&"boolean"!=typeof rate?(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(rate)} of type ${JSON.stringify(typeof rate)}.`),!1):!(rate<0||rate>1)||(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`),!1)}export{sampleTransaction};