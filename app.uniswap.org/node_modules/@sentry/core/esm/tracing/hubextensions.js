import{logger}from"@sentry/utils";import{getMainCarrier}from"../hub.js";import{registerErrorInstrumentation}from"./errors.js";import{IdleTransaction}from"./idletransaction.js";import{sampleTransaction}from"./sampling.js";import{Transaction}from"./transaction.js";function traceHeaders(){const span=this.getScope().getSpan();return span?{"sentry-trace":span.toTraceparent()}:{}}function _startTransaction(transactionContext,customSamplingContext){const client=this.getClient(),options=client&&client.getOptions()||{},configInstrumenter=options.instrumenter||"sentry",transactionInstrumenter=transactionContext.instrumenter||"sentry";configInstrumenter!==transactionInstrumenter&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.error(`A transaction was started with instrumenter=\`${transactionInstrumenter}\`, but the SDK is configured with the \`${configInstrumenter}\` instrumenter.\nThe transaction will not be sampled. Please use the ${configInstrumenter} instrumentation to start transactions.`),transactionContext.sampled=!1);let transaction=new Transaction(transactionContext,this);return transaction=sampleTransaction(transaction,options,{parentSampled:transactionContext.parentSampled,transactionContext:transactionContext,...customSamplingContext}),transaction.sampled&&transaction.initSpanRecorder(options._experiments&&options._experiments.maxSpans),client&&client.emit&&client.emit("startTransaction",transaction),transaction}function startIdleTransaction(hub,transactionContext,idleTimeout,finalTimeout,onScope,customSamplingContext,heartbeatInterval){const client=hub.getClient(),options=client&&client.getOptions()||{};let transaction=new IdleTransaction(transactionContext,hub,idleTimeout,finalTimeout,heartbeatInterval,onScope);return transaction=sampleTransaction(transaction,options,{parentSampled:transactionContext.parentSampled,transactionContext:transactionContext,...customSamplingContext}),transaction.sampled&&transaction.initSpanRecorder(options._experiments&&options._experiments.maxSpans),client&&client.emit&&client.emit("startTransaction",transaction),transaction}function addTracingExtensions(){const carrier=getMainCarrier();carrier.__SENTRY__&&(carrier.__SENTRY__.extensions=carrier.__SENTRY__.extensions||{},carrier.__SENTRY__.extensions.startTransaction||(carrier.__SENTRY__.extensions.startTransaction=_startTransaction),carrier.__SENTRY__.extensions.traceHeaders||(carrier.__SENTRY__.extensions.traceHeaders=traceHeaders),registerErrorInstrumentation())}export{addTracingExtensions,startIdleTransaction};