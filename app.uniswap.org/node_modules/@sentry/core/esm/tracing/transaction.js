import{dropUndefinedKeys,logger}from"@sentry/utils";import{getCurrentHub}from"../hub.js";import{getDynamicSamplingContextFromClient}from"./dynamicSamplingContext.js";import{Span,SpanRecorder}from"./span.js";class Transaction extends Span{constructor(transactionContext,hub){super(transactionContext),delete this.description,this._measurements={},this._contexts={},this._hub=hub||getCurrentHub(),this._name=transactionContext.name||"",this.metadata={source:"custom",...transactionContext.metadata,spanMetadata:{}},this._trimEnd=transactionContext.trimEnd,this.transaction=this;const incomingDynamicSamplingContext=this.metadata.dynamicSamplingContext;incomingDynamicSamplingContext&&(this._frozenDynamicSamplingContext={...incomingDynamicSamplingContext})}get name(){return this._name}set name(newName){this.setName(newName)}setName(name,source="custom"){this._name=name,this.metadata.source=source}initSpanRecorder(maxlen=1e3){this.spanRecorder||(this.spanRecorder=new SpanRecorder(maxlen)),this.spanRecorder.add(this)}setContext(key,context){null===context?delete this._contexts[key]:this._contexts[key]=context}setMeasurement(name,value,unit=""){this._measurements[name]={value:value,unit:unit}}setMetadata(newMetadata){this.metadata={...this.metadata,...newMetadata}}finish(endTimestamp){const transaction=this._finishTransaction(endTimestamp);if(transaction)return this._hub.captureEvent(transaction)}toContext(){const spanContext=super.toContext();return dropUndefinedKeys({...spanContext,name:this.name,trimEnd:this._trimEnd})}updateWithContext(transactionContext){return super.updateWithContext(transactionContext),this.name=transactionContext.name||"",this._trimEnd=transactionContext.trimEnd,this}getDynamicSamplingContext(){if(this._frozenDynamicSamplingContext)return this._frozenDynamicSamplingContext;const hub=this._hub||getCurrentHub(),client=hub.getClient();if(!client)return{};const scope=hub.getScope(),dsc=getDynamicSamplingContextFromClient(this.traceId,client,scope),maybeSampleRate=this.metadata.sampleRate;void 0!==maybeSampleRate&&(dsc.sample_rate=`${maybeSampleRate}`);const source=this.metadata.source;return source&&"url"!==source&&(dsc.transaction=this.name),void 0!==this.sampled&&(dsc.sampled=String(this.sampled)),dsc}setHub(hub){this._hub=hub}_finishTransaction(endTimestamp){if(void 0!==this.endTimestamp)return;this.name||(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.warn("Transaction has no name, falling back to `<unlabeled transaction>`."),this.name="<unlabeled transaction>"),super.finish(endTimestamp);const client=this._hub.getClient();if(client&&client.emit&&client.emit("finishTransaction",this),!0!==this.sampled)return("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log("[Tracing] Discarding transaction because its trace was not chosen to be sampled."),void(client&&client.recordDroppedEvent("sample_rate","transaction"));const finishedSpans=this.spanRecorder?this.spanRecorder.spans.filter((s=>s!==this&&s.endTimestamp)):[];this._trimEnd&&finishedSpans.length>0&&(this.endTimestamp=finishedSpans.reduce(((prev,current)=>prev.endTimestamp&&current.endTimestamp?prev.endTimestamp>current.endTimestamp?prev:current:prev)).endTimestamp);const metadata=this.metadata,transaction={contexts:{...this._contexts,trace:this.getTraceContext()},spans:finishedSpans,start_timestamp:this.startTimestamp,tags:this.tags,timestamp:this.endTimestamp,transaction:this.name,type:"transaction",sdkProcessingMetadata:{...metadata,dynamicSamplingContext:this.getDynamicSamplingContext()},...metadata.source&&{transaction_info:{source:metadata.source}}};return Object.keys(this._measurements).length>0&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log("[Measurements] Adding measurements to transaction",JSON.stringify(this._measurements,void 0,2)),transaction.measurements=this._measurements),("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log(`[Tracing] Finishing ${this.op} transaction: ${this.name}.`),transaction}}export{Transaction};