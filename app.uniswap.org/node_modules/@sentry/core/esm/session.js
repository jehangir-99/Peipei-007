import{timestampInSeconds,uuid4,dropUndefinedKeys}from"@sentry/utils";function makeSession(context){const startingTime=timestampInSeconds(),session={sid:uuid4(),init:!0,timestamp:startingTime,started:startingTime,duration:0,status:"ok",errors:0,ignoreDuration:!1,toJSON:()=>sessionToJSON(session)};return context&&updateSession(session,context),session}function updateSession(session,context={}){if(context.user&&(!session.ipAddress&&context.user.ip_address&&(session.ipAddress=context.user.ip_address),session.did||context.did||(session.did=context.user.id||context.user.email||context.user.username)),session.timestamp=context.timestamp||timestampInSeconds(),context.abnormal_mechanism&&(session.abnormal_mechanism=context.abnormal_mechanism),context.ignoreDuration&&(session.ignoreDuration=context.ignoreDuration),context.sid&&(session.sid=32===context.sid.length?context.sid:uuid4()),void 0!==context.init&&(session.init=context.init),!session.did&&context.did&&(session.did=`${context.did}`),"number"==typeof context.started&&(session.started=context.started),session.ignoreDuration)session.duration=void 0;else if("number"==typeof context.duration)session.duration=context.duration;else{const duration=session.timestamp-session.started;session.duration=duration>=0?duration:0}context.release&&(session.release=context.release),context.environment&&(session.environment=context.environment),!session.ipAddress&&context.ipAddress&&(session.ipAddress=context.ipAddress),!session.userAgent&&context.userAgent&&(session.userAgent=context.userAgent),"number"==typeof context.errors&&(session.errors=context.errors),context.status&&(session.status=context.status)}function closeSession(session,status){let context={};status?context={status:status}:"ok"===session.status&&(context={status:"exited"}),updateSession(session,context)}function sessionToJSON(session){return dropUndefinedKeys({sid:`${session.sid}`,init:session.init,started:new Date(1e3*session.started).toISOString(),timestamp:new Date(1e3*session.timestamp).toISOString(),status:session.status,errors:session.errors,did:"number"==typeof session.did||"string"==typeof session.did?`${session.did}`:void 0,duration:session.duration,abnormal_mechanism:session.abnormal_mechanism,attrs:{release:session.release,environment:session.environment,ip_address:session.ipAddress,user_agent:session.userAgent}})}export{closeSession,makeSession,updateSession};