import{isThenable}from"./is.js";var States;function resolvedSyncPromise(value){return new SyncPromise((resolve=>{resolve(value)}))}function rejectedSyncPromise(reason){return new SyncPromise(((_,reject)=>{reject(reason)}))}!function(States){States[States.PENDING=0]="PENDING";States[States.RESOLVED=1]="RESOLVED";States[States.REJECTED=2]="REJECTED"}(States||(States={}));class SyncPromise{constructor(executor){SyncPromise.prototype.__init.call(this),SyncPromise.prototype.__init2.call(this),SyncPromise.prototype.__init3.call(this),SyncPromise.prototype.__init4.call(this),this._state=States.PENDING,this._handlers=[];try{executor(this._resolve,this._reject)}catch(e){this._reject(e)}}then(onfulfilled,onrejected){return new SyncPromise(((resolve,reject)=>{this._handlers.push([!1,result=>{if(onfulfilled)try{resolve(onfulfilled(result))}catch(e){reject(e)}else resolve(result)},reason=>{if(onrejected)try{resolve(onrejected(reason))}catch(e){reject(e)}else reject(reason)}]),this._executeHandlers()}))}catch(onrejected){return this.then((val=>val),onrejected)}finally(onfinally){return new SyncPromise(((resolve,reject)=>{let val,isRejected;return this.then((value=>{isRejected=!1,val=value,onfinally&&onfinally()}),(reason=>{isRejected=!0,val=reason,onfinally&&onfinally()})).then((()=>{isRejected?reject(val):resolve(val)}))}))}__init(){this._resolve=value=>{this._setResult(States.RESOLVED,value)}}__init2(){this._reject=reason=>{this._setResult(States.REJECTED,reason)}}__init3(){this._setResult=(state,value)=>{this._state===States.PENDING&&(isThenable(value)?value.then(this._resolve,this._reject):(this._state=state,this._value=value,this._executeHandlers()))}}__init4(){this._executeHandlers=()=>{if(this._state===States.PENDING)return;const cachedHandlers=this._handlers.slice();this._handlers=[],cachedHandlers.forEach((handler=>{handler[0]||(this._state===States.RESOLVED&&handler[1](this._value),this._state===States.REJECTED&&handler[2](this._value),handler[0]=!0)}))}}}export{SyncPromise,rejectedSyncPromise,resolvedSyncPromise};