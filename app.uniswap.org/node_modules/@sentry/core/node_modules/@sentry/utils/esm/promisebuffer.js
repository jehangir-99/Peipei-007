import{SentryError}from"./error.js";import{rejectedSyncPromise,SyncPromise,resolvedSyncPromise}from"./syncpromise.js";function makePromiseBuffer(limit){const buffer=[];function remove(task){return buffer.splice(buffer.indexOf(task),1)[0]}return{$:buffer,add:function(taskProducer){if(!(void 0===limit||buffer.length<limit))return rejectedSyncPromise(new SentryError("Not adding Promise because buffer limit was reached."));const task=taskProducer();return-1===buffer.indexOf(task)&&buffer.push(task),task.then((()=>remove(task))).then(null,(()=>remove(task).then(null,(()=>{})))),task},drain:function(timeout){return new SyncPromise(((resolve,reject)=>{let counter=buffer.length;if(!counter)return resolve(!0);const capturedSetTimeout=setTimeout((()=>{timeout&&timeout>0&&resolve(!1)}),timeout);buffer.forEach((item=>{resolvedSyncPromise(item).then((()=>{--counter||(clearTimeout(capturedSetTimeout),resolve(!0))}),reject)}))}))}}}export{makePromiseBuffer};