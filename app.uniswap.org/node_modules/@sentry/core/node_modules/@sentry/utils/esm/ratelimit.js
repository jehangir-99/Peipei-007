const DEFAULT_RETRY_AFTER=6e4;function parseRetryAfterHeader(header,now=Date.now()){const headerDelay=parseInt(`${header}`,10);if(!isNaN(headerDelay))return 1e3*headerDelay;const headerDate=Date.parse(`${header}`);return isNaN(headerDate)?DEFAULT_RETRY_AFTER:headerDate-now}function disabledUntil(limits,category){return limits[category]||limits.all||0}function isRateLimited(limits,category,now=Date.now()){return disabledUntil(limits,category)>now}function updateRateLimits(limits,{statusCode:statusCode,headers:headers},now=Date.now()){const updatedRateLimits={...limits},rateLimitHeader=headers&&headers["x-sentry-rate-limits"],retryAfterHeader=headers&&headers["retry-after"];if(rateLimitHeader)for(const limit of rateLimitHeader.trim().split(",")){const[retryAfter,categories]=limit.split(":",2),headerDelay=parseInt(retryAfter,10),delay=1e3*(isNaN(headerDelay)?60:headerDelay);if(categories)for(const category of categories.split(";"))updatedRateLimits[category]=now+delay;else updatedRateLimits.all=now+delay}else retryAfterHeader?updatedRateLimits.all=now+parseRetryAfterHeader(retryAfterHeader,now):429===statusCode&&(updatedRateLimits.all=now+6e4);return updatedRateLimits}export{DEFAULT_RETRY_AFTER,disabledUntil,isRateLimited,parseRetryAfterHeader,updateRateLimits};