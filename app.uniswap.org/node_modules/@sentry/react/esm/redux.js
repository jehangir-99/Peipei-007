import{addGlobalEventProcessor,configureScope,getCurrentHub}from"@sentry/browser";import{addNonEnumerableProperty}from"@sentry/utils";const ACTION_BREADCRUMB_CATEGORY="redux.action",ACTION_BREADCRUMB_TYPE="info",defaultOptions={attachReduxState:!0,actionTransformer:action=>action,stateTransformer:state=>state||null};function createReduxEnhancer(enhancerOptions){const options={...defaultOptions,...enhancerOptions};return next=>(reducer,initialState)=>{options.attachReduxState&&addGlobalEventProcessor(((event,hint)=>{try{void 0===event.type&&"redux"===event.contexts.state.state.type&&(hint.attachments=[...hint.attachments||[],{filename:"redux_state.json",data:JSON.stringify(event.contexts.state.state.value)}])}catch(_){}return event}));return next(((state,action)=>{const newState=reducer(state,action);return configureScope((scope=>{const transformedAction=options.actionTransformer(action);null!=transformedAction&&scope.addBreadcrumb({category:"redux.action",data:transformedAction,type:"info"});const transformedState=options.stateTransformer(newState);if(null!=transformedState){const client=getCurrentHub().getClient(),options=client&&client.getOptions(),normalizationDepth=options&&options.normalizeDepth||3,newStateContext={state:{type:"redux",value:transformedState}};addNonEnumerableProperty(newStateContext,"__sentry_override_normalization_depth__",3+normalizationDepth),scope.setContext("state",newStateContext)}else scope.setContext("state",null);const{configureScopeWithState:configureScopeWithState}=options;"function"==typeof configureScopeWithState&&configureScopeWithState(scope,newState)})),newState}),initialState)}}export{createReduxEnhancer};