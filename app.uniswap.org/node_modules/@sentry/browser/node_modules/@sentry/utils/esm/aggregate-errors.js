import{isInstanceOf}from"./is.js";import{truncate}from"./string.js";function applyAggregateErrorsToEvent(exceptionFromErrorImplementation,parser,maxValueLimit=250,key,limit,event,hint){if(!(event.exception&&event.exception.values&&hint&&isInstanceOf(hint.originalException,Error)))return;const originalException=event.exception.values.length>0?event.exception.values[event.exception.values.length-1]:void 0;originalException&&(event.exception.values=truncateAggregateExceptions(aggregateExceptionsFromError(exceptionFromErrorImplementation,parser,limit,hint.originalException,key,event.exception.values,originalException,0),maxValueLimit))}function aggregateExceptionsFromError(exceptionFromErrorImplementation,parser,limit,error,key,prevExceptions,exception,exceptionId){if(prevExceptions.length>=limit+1)return prevExceptions;let newExceptions=[...prevExceptions];if(isInstanceOf(error[key],Error)){applyExceptionGroupFieldsForParentException(exception,exceptionId);const newException=exceptionFromErrorImplementation(parser,error[key]),newExceptionId=newExceptions.length;applyExceptionGroupFieldsForChildException(newException,key,newExceptionId,exceptionId),newExceptions=aggregateExceptionsFromError(exceptionFromErrorImplementation,parser,limit,error[key],key,[newException,...newExceptions],newException,newExceptionId)}return Array.isArray(error.errors)&&error.errors.forEach(((childError,i)=>{if(isInstanceOf(childError,Error)){applyExceptionGroupFieldsForParentException(exception,exceptionId);const newException=exceptionFromErrorImplementation(parser,childError),newExceptionId=newExceptions.length;applyExceptionGroupFieldsForChildException(newException,`errors[${i}]`,newExceptionId,exceptionId),newExceptions=aggregateExceptionsFromError(exceptionFromErrorImplementation,parser,limit,childError,key,[newException,...newExceptions],newException,newExceptionId)}})),newExceptions}function applyExceptionGroupFieldsForParentException(exception,exceptionId){exception.mechanism=exception.mechanism||{type:"generic",handled:!0},exception.mechanism={...exception.mechanism,is_exception_group:!0,exception_id:exceptionId}}function applyExceptionGroupFieldsForChildException(exception,source,exceptionId,parentId){exception.mechanism=exception.mechanism||{type:"generic",handled:!0},exception.mechanism={...exception.mechanism,type:"chained",source:source,exception_id:exceptionId,parent_id:parentId}}function truncateAggregateExceptions(exceptions,maxValueLength){return exceptions.map((exception=>(exception.value&&(exception.value=truncate(exception.value,maxValueLength)),exception)))}export{applyAggregateErrorsToEvent};