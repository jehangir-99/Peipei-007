import{getCurrentHub}from"@sentry/core";import{addInstrumentationHandler,isString,isPrimitive,isErrorEvent,getLocationHref,logger,addExceptionMechanism}from"@sentry/utils";import{eventFromUnknownInput}from"../eventbuilder.js";import{shouldIgnoreOnError}from"../helpers.js";class GlobalHandlers{static __initStatic(){this.id="GlobalHandlers"}constructor(options){this.name=GlobalHandlers.id,this._options={onerror:!0,onunhandledrejection:!0,...options},this._installFunc={onerror:_installGlobalOnErrorHandler,onunhandledrejection:_installGlobalOnUnhandledRejectionHandler}}setupOnce(){Error.stackTraceLimit=50;const options=this._options;for(const key in options){const installFunc=this._installFunc[key];installFunc&&options[key]&&(globalHandlerLog(key),installFunc(),this._installFunc[key]=void 0)}}}function _installGlobalOnErrorHandler(){addInstrumentationHandler("error",(data=>{const[hub,stackParser,attachStacktrace]=getHubAndOptions();if(!hub.getIntegration(GlobalHandlers))return;const{msg:msg,url:url,line:line,column:column,error:error}=data;if(shouldIgnoreOnError()||error&&error.__sentry_own_request__)return;const event=void 0===error&&isString(msg)?_eventFromIncompleteOnError(msg,url,line,column):_enhanceEventWithInitialFrame(eventFromUnknownInput(stackParser,error||msg,void 0,attachStacktrace,!1),url,line,column);event.level="error",addMechanismAndCapture(hub,error,event,"onerror")}))}function _installGlobalOnUnhandledRejectionHandler(){addInstrumentationHandler("unhandledrejection",(e=>{const[hub,stackParser,attachStacktrace]=getHubAndOptions();if(!hub.getIntegration(GlobalHandlers))return;let error=e;try{"reason"in e?error=e.reason:"detail"in e&&"reason"in e.detail&&(error=e.detail.reason)}catch(_oO){}if(shouldIgnoreOnError()||error&&error.__sentry_own_request__)return!0;const event=isPrimitive(error)?_eventFromRejectionWithPrimitive(error):eventFromUnknownInput(stackParser,error,void 0,attachStacktrace,!0);event.level="error",addMechanismAndCapture(hub,error,event,"onunhandledrejection")}))}function _eventFromRejectionWithPrimitive(reason){return{exception:{values:[{type:"UnhandledRejection",value:`Non-Error promise rejection captured with value: ${String(reason)}`}]}}}function _eventFromIncompleteOnError(msg,url,line,column){let message=isErrorEvent(msg)?msg.message:msg,name="Error";const groups=message.match(/^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i);groups&&(name=groups[1],message=groups[2]);return _enhanceEventWithInitialFrame({exception:{values:[{type:name,value:message}]}},url,line,column)}function _enhanceEventWithInitialFrame(event,url,line,column){const e=event.exception=event.exception||{},ev=e.values=e.values||[],ev0=ev[0]=ev[0]||{},ev0s=ev0.stacktrace=ev0.stacktrace||{},ev0sf=ev0s.frames=ev0s.frames||[],colno=isNaN(parseInt(column,10))?void 0:column,lineno=isNaN(parseInt(line,10))?void 0:line,filename=isString(url)&&url.length>0?url:getLocationHref();return 0===ev0sf.length&&ev0sf.push({colno:colno,filename:filename,function:"?",in_app:!0,lineno:lineno}),event}function globalHandlerLog(type){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log(`Global Handler attached: ${type}`)}function addMechanismAndCapture(hub,error,event,type){addExceptionMechanism(event,{handled:!1,type:type}),hub.captureEvent(event,{originalException:error})}function getHubAndOptions(){const hub=getCurrentHub(),client=hub.getClient(),options=client&&client.getOptions()||{stackParser:()=>[],attachStacktrace:!1};return[hub,options.stackParser,options.attachStacktrace]}GlobalHandlers.__initStatic();export{GlobalHandlers};