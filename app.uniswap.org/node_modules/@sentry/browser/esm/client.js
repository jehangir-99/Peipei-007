import{BaseClient,SDK_VERSION}from"@sentry/core";import{getSDKSource,logger,createClientReportEnvelope,dsnToString}from"@sentry/utils";import{eventFromException,eventFromMessage}from"./eventbuilder.js";import{WINDOW}from"./helpers.js";import{createUserFeedbackEnvelope}from"./userfeedback.js";class BrowserClient extends BaseClient{constructor(options){const sdkSource=WINDOW.SENTRY_SDK_SOURCE||getSDKSource();options._metadata=options._metadata||{},options._metadata.sdk=options._metadata.sdk||{name:"sentry.javascript.browser",packages:[{name:`${sdkSource}:@sentry/browser`,version:SDK_VERSION}],version:SDK_VERSION},super(options),options.sendClientReports&&WINDOW.document&&WINDOW.document.addEventListener("visibilitychange",(()=>{"hidden"===WINDOW.document.visibilityState&&this._flushOutcomes()}))}eventFromException(exception,hint){return eventFromException(this._options.stackParser,exception,hint,this._options.attachStacktrace)}eventFromMessage(message,level="info",hint){return eventFromMessage(this._options.stackParser,message,level,hint,this._options.attachStacktrace)}captureUserFeedback(feedback){if(!this._isEnabled())return void(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.warn("SDK not enabled, will not capture user feedback."));const envelope=createUserFeedbackEnvelope(feedback,{metadata:this.getSdkMetadata(),dsn:this.getDsn(),tunnel:this.getOptions().tunnel});this._sendEnvelope(envelope)}_prepareEvent(event,hint,scope){return event.platform=event.platform||"javascript",super._prepareEvent(event,hint,scope)}_flushOutcomes(){const outcomes=this._clearOutcomes();if(0===outcomes.length)return void(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log("No outcomes to send"));if(!this._dsn)return void(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log("No dsn provided, will not send outcomes"));("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log("Sending outcomes:",outcomes);const envelope=createClientReportEnvelope(outcomes,this._options.tunnel&&dsnToString(this._dsn));this._sendEnvelope(envelope)}}export{BrowserClient};