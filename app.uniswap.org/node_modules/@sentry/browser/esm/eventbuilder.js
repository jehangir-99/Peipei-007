import{getCurrentHub}from"@sentry/core";import{addExceptionMechanism,resolvedSyncPromise,isErrorEvent,isDOMError,isDOMException,addExceptionTypeValue,isError,isPlainObject,isEvent,normalizeToSize,extractExceptionKeysForMessage}from"@sentry/utils";function exceptionFromError(stackParser,ex){const frames=parseStackFrames(stackParser,ex),exception={type:ex&&ex.name,value:extractMessage(ex)};return frames.length&&(exception.stacktrace={frames:frames}),void 0===exception.type&&""===exception.value&&(exception.value="Unrecoverable error caught"),exception}function eventFromPlainObject(stackParser,exception,syntheticException,isUnhandledRejection){const client=getCurrentHub().getClient(),normalizeDepth=client&&client.getOptions().normalizeDepth,event={exception:{values:[{type:isEvent(exception)?exception.constructor.name:isUnhandledRejection?"UnhandledRejection":"Error",value:getNonErrorObjectExceptionValue(exception,{isUnhandledRejection:isUnhandledRejection})}]},extra:{__serialized__:normalizeToSize(exception,normalizeDepth)}};if(syntheticException){const frames=parseStackFrames(stackParser,syntheticException);frames.length&&(event.exception.values[0].stacktrace={frames:frames})}return event}function eventFromError(stackParser,ex){return{exception:{values:[exceptionFromError(stackParser,ex)]}}}function parseStackFrames(stackParser,ex){const stacktrace=ex.stacktrace||ex.stack||"",popSize=getPopSize(ex);try{return stackParser(stacktrace,popSize)}catch(e){}return[]}const reactMinifiedRegexp=/Minified React error #\d+;/i;function getPopSize(ex){if(ex){if("number"==typeof ex.framesToPop)return ex.framesToPop;if(reactMinifiedRegexp.test(ex.message))return 1}return 0}function extractMessage(ex){const message=ex&&ex.message;return message?message.error&&"string"==typeof message.error.message?message.error.message:message:"No error message"}function eventFromException(stackParser,exception,hint,attachStacktrace){const event=eventFromUnknownInput(stackParser,exception,hint&&hint.syntheticException||void 0,attachStacktrace);return addExceptionMechanism(event),event.level="error",hint&&hint.event_id&&(event.event_id=hint.event_id),resolvedSyncPromise(event)}function eventFromMessage(stackParser,message,level="info",hint,attachStacktrace){const event=eventFromString(stackParser,message,hint&&hint.syntheticException||void 0,attachStacktrace);return event.level=level,hint&&hint.event_id&&(event.event_id=hint.event_id),resolvedSyncPromise(event)}function eventFromUnknownInput(stackParser,exception,syntheticException,attachStacktrace,isUnhandledRejection){let event;if(isErrorEvent(exception)&&exception.error){return eventFromError(stackParser,exception.error)}if(isDOMError(exception)||isDOMException(exception)){const domException=exception;if("stack"in exception)event=eventFromError(stackParser,exception);else{const name=domException.name||(isDOMError(domException)?"DOMError":"DOMException"),message=domException.message?`${name}: ${domException.message}`:name;event=eventFromString(stackParser,message,syntheticException,attachStacktrace),addExceptionTypeValue(event,message)}return"code"in domException&&(event.tags={...event.tags,"DOMException.code":`${domException.code}`}),event}if(isError(exception))return eventFromError(stackParser,exception);if(isPlainObject(exception)||isEvent(exception)){return event=eventFromPlainObject(stackParser,exception,syntheticException,isUnhandledRejection),addExceptionMechanism(event,{synthetic:!0}),event}return event=eventFromString(stackParser,exception,syntheticException,attachStacktrace),addExceptionTypeValue(event,`${exception}`,void 0),addExceptionMechanism(event,{synthetic:!0}),event}function eventFromString(stackParser,input,syntheticException,attachStacktrace){const event={message:input};if(attachStacktrace&&syntheticException){const frames=parseStackFrames(stackParser,syntheticException);frames.length&&(event.exception={values:[{value:input,stacktrace:{frames:frames}}]})}return event}function getNonErrorObjectExceptionValue(exception,{isUnhandledRejection:isUnhandledRejection}){const keys=extractExceptionKeysForMessage(exception),captureType=isUnhandledRejection?"promise rejection":"exception";if(isErrorEvent(exception))return`Event \`ErrorEvent\` captured as ${captureType} with message \`${exception.message}\``;if(isEvent(exception)){return`Event \`${getObjectClassName(exception)}\` (type=${exception.type}) captured as ${captureType}`}return`Object captured as ${captureType} with keys: ${keys}`}function getObjectClassName(obj){try{const prototype=Object.getPrototypeOf(obj);return prototype?prototype.constructor.name:void 0}catch(e){}}export{eventFromError,eventFromException,eventFromMessage,eventFromPlainObject,eventFromString,eventFromUnknownInput,exceptionFromError,parseStackFrames};