import{concatHex}from"../utils/data/concat.js";import{toHex}from"../utils/encoding/toHex.js";import{toRlp}from"../utils/encoding/toRlp.js";import{serializeTransaction as serializeTransaction_}from"../utils/transaction/serializeTransaction.js";import{assertEip712Transaction}from"./utils/assertEip712Transaction.js";import{isEIP712Transaction}from"./utils/isEip712Transaction.js";export function serializeTransaction(transaction,signature){return isEIP712Transaction(transaction)?serializeTransactionEIP712(transaction):serializeTransaction_(transaction,signature)}export const serializers={transaction:serializeTransaction};function serializeTransactionEIP712(transaction){const{chainId:chainId,gas:gas,nonce:nonce,to:to,from:from,value:value,maxFeePerGas:maxFeePerGas,maxPriorityFeePerGas:maxPriorityFeePerGas,customSignature:customSignature,factoryDeps:factoryDeps,paymaster:paymaster,paymasterInput:paymasterInput,gasPerPubdata:gasPerPubdata,data:data}=transaction;assertEip712Transaction(transaction);const serializedTransaction=[nonce?toHex(nonce):"0x",maxPriorityFeePerGas?toHex(maxPriorityFeePerGas):"0x",maxFeePerGas?toHex(maxFeePerGas):"0x",gas?toHex(gas):"0x",to??"0x",value?toHex(value):"0x",data??"0x0",toHex(chainId),toHex(""),toHex(""),toHex(chainId),from??"0x",gasPerPubdata?toHex(gasPerPubdata):"0x",factoryDeps??[],customSignature??"0x",paymaster&&paymasterInput?[paymaster,paymasterInput]:[]];return concatHex(["0x71",toRlp(serializedTransaction)])}