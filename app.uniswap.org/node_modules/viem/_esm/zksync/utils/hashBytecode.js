import{pad}from"../../utils/data/pad.js";import{toBytes}from"../../utils/encoding/toBytes.js";import{sha256}from"../../utils/hash/sha256.js";import{maxBytecodeSize}from"../constants/number.js";import{BytecodeLengthExceedsMaxSizeError,BytecodeLengthInWordsMustBeOddError,BytecodeLengthMustBeDivisibleBy32Error}from"../errors/bytecode.js";export function hashBytecode(bytecode){const bytecodeBytes=toBytes(bytecode);if(bytecodeBytes.length%32!=0)throw new BytecodeLengthMustBeDivisibleBy32Error({givenLength:bytecodeBytes.length});if(bytecodeBytes.length>maxBytecodeSize)throw new BytecodeLengthExceedsMaxSizeError({givenLength:bytecodeBytes.length,maxBytecodeSize:maxBytecodeSize});const hashStr=sha256(bytecodeBytes),hash=toBytes(hashStr),bytecodeLengthInWords=bytecodeBytes.length/32;if(bytecodeLengthInWords%2==0)throw new BytecodeLengthInWordsMustBeOddError({givenLengthInWords:bytecodeLengthInWords});const bytecodeLength=toBytes(bytecodeLengthInWords),bytecodeLengthPadded=pad(bytecodeLength,{size:2}),codeHashVersion=new Uint8Array([1,0]);return hash.set(codeHashVersion,0),hash.set(bytecodeLengthPadded,2),hash}