import{}from"../types/chain.js";import{hexToBigInt,hexToNumber}from"../utils/encoding/fromHex.js";import{hexToBytes}from"../utils/encoding/toBytes.js";import{toHex}from"../utils/encoding/toHex.js";import{defineBlock}from"../utils/formatters/block.js";import{formatLog}from"../utils/formatters/log.js";import{defineTransaction}from"../utils/formatters/transaction.js";import{defineTransactionReceipt}from"../utils/formatters/transactionReceipt.js";import{defineTransactionRequest}from"../utils/formatters/transactionRequest.js";export const formatters={block:defineBlock({format(args){const transactions=args.transactions?.map((transaction=>{if("string"==typeof transaction)return transaction;const formatted=formatters.transaction?.format(transaction);return"0x71"===formatted.typeHex?formatted.type="eip712":"0xff"===formatted.typeHex&&(formatted.type="priority"),formatted}));return{l1BatchNumber:args.l1BatchNumber?hexToBigInt(args.l1BatchNumber):null,l1BatchTimestamp:args.l1BatchTimestamp?hexToBigInt(args.l1BatchTimestamp):null,transactions:transactions}}}),transaction:defineTransaction({format(args){const transaction={};return"0x71"===args.type?transaction.type="eip712":"0xff"===args.type&&(transaction.type="priority"),{...transaction,l1BatchNumber:args.l1BatchNumber?hexToBigInt(args.l1BatchNumber):null,l1BatchTxIndex:args.l1BatchTxIndex?hexToBigInt(args.l1BatchTxIndex):null}}}),transactionReceipt:defineTransactionReceipt({format:args=>({l1BatchNumber:args.l1BatchNumber?hexToBigInt(args.l1BatchNumber):null,l1BatchTxIndex:args.l1BatchTxIndex?hexToBigInt(args.l1BatchTxIndex):null,logs:args.logs.map((log=>({...formatLog(log),l1BatchNumber:log.l1BatchNumber?hexToBigInt(log.l1BatchNumber):null,transactionLogIndex:hexToNumber(log.transactionLogIndex),logType:log.logType}))),l2ToL1Logs:args.l2ToL1Logs.map((l2ToL1Log=>({blockNumber:hexToBigInt(l2ToL1Log.blockHash),blockHash:l2ToL1Log.blockHash,l1BatchNumber:hexToBigInt(l2ToL1Log.l1BatchNumber),transactionIndex:hexToBigInt(l2ToL1Log.transactionIndex),shardId:hexToBigInt(l2ToL1Log.shardId),isService:l2ToL1Log.isService,sender:l2ToL1Log.sender,key:l2ToL1Log.key,value:l2ToL1Log.value,transactionHash:l2ToL1Log.transactionHash,logIndex:hexToBigInt(l2ToL1Log.logIndex)})))})}),transactionRequest:defineTransactionRequest({exclude:["customSignature","factoryDeps","gasPerPubdata","paymaster","paymasterInput"],format:args=>args.gasPerPubdata||args.paymaster&&args.paymasterInput||args.factoryDeps||args.customSignature?{eip712Meta:{...args.gasPerPubdata?{gasPerPubdata:toHex(args.gasPerPubdata)}:{},...args.paymaster&&args.paymasterInput?{paymasterParams:{paymaster:args.paymaster,paymasterInput:Array.from(hexToBytes(args.paymasterInput))}}:{},...args.factoryDeps?{factoryDeps:args.factoryDeps.map((dep=>Array.from(hexToBytes(dep))))}:{},...args.customSignature?{customSignature:Array.from(hexToBytes(args.customSignature))}:{}},type:"0x71"}:{}})};