import{RpcRequestError}from"../../errors/request.js";import{UrlRequiredError}from"../../errors/transport.js";import{createBatchScheduler}from"../../utils/promise/createBatchScheduler.js";import{getHttpRpcClient}from"../../utils/rpc/http.js";import{createTransport}from"./createTransport.js";export function http(url,config={}){const{batch:batch,fetchOptions:fetchOptions,key:key="http",name:name="HTTP JSON-RPC",onFetchRequest:onFetchRequest,onFetchResponse:onFetchResponse,retryDelay:retryDelay}=config;return({chain:chain,retryCount:retryCount_,timeout:timeout_})=>{const{batchSize:batchSize=1e3,wait:wait=0}="object"==typeof batch?batch:{},retryCount=config.retryCount??retryCount_,timeout=timeout_??config.timeout??1e4,url_=url||chain?.rpcUrls.default.http[0];if(!url_)throw new UrlRequiredError;const rpcClient=getHttpRpcClient(url_,{fetchOptions:fetchOptions,onRequest:onFetchRequest,onResponse:onFetchResponse,timeout:timeout});return createTransport({key:key,name:name,async request({method:method,params:params}){const body={method:method,params:params},{schedule:schedule}=createBatchScheduler({id:`${url}`,wait:wait,shouldSplitBatch:requests=>requests.length>batchSize,fn:body=>rpcClient.request({body:body}),sort:(a,b)=>a.id-b.id}),[{error:error,result:result}]=await(async body=>batch?schedule(body):[await rpcClient.request({body:body})])(body);if(error)throw new RpcRequestError({body:body,error:error,url:url_});return result},retryCount:retryCount,retryDelay:retryDelay,timeout:timeout,type:"http"},{fetchOptions:fetchOptions,url:url_})}}