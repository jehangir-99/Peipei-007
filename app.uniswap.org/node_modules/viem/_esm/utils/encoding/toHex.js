import{IntegerOutOfRangeError}from"../../errors/encoding.js";import{pad}from"../data/pad.js";import{assertSize}from"./fromHex.js";const hexes=Array.from({length:256},((_v,i)=>i.toString(16).padStart(2,"0")));export function toHex(value,opts={}){return"number"==typeof value||"bigint"==typeof value?numberToHex(value,opts):"string"==typeof value?stringToHex(value,opts):"boolean"==typeof value?boolToHex(value,opts):bytesToHex(value,opts)}export function boolToHex(value,opts={}){const hex=`0x${Number(value)}`;return"number"==typeof opts.size?(assertSize(hex,{size:opts.size}),pad(hex,{size:opts.size})):hex}export function bytesToHex(value,opts={}){let string="";for(let i=0;i<value.length;i++)string+=hexes[value[i]];const hex=`0x${string}`;return"number"==typeof opts.size?(assertSize(hex,{size:opts.size}),pad(hex,{dir:"right",size:opts.size})):hex}export function numberToHex(value_,opts={}){const{signed:signed,size:size}=opts,value=BigInt(value_);let maxValue;size?maxValue=signed?(1n<<8n*BigInt(size)-1n)-1n:2n**(8n*BigInt(size))-1n:"number"==typeof value_&&(maxValue=BigInt(Number.MAX_SAFE_INTEGER));const minValue="bigint"==typeof maxValue&&signed?-maxValue-1n:0;if(maxValue&&value>maxValue||value<minValue){const suffix="bigint"==typeof value_?"n":"";throw new IntegerOutOfRangeError({max:maxValue?`${maxValue}${suffix}`:void 0,min:`${minValue}${suffix}`,signed:signed,size:size,value:`${value_}${suffix}`})}const hex=`0x${(signed&&value<0?(1n<<BigInt(8*size))+BigInt(value):value).toString(16)}`;return size?pad(hex,{size:size}):hex}const encoder=new TextEncoder;export function stringToHex(value_,opts={}){return bytesToHex(encoder.encode(value_),opts)}