import{BaseError}from"../../index.js";import{createCursor}from"../cursor.js";import{hexToBytes}from"./toBytes.js";import{bytesToHex}from"./toHex.js";export function toRlp(bytes,to="hex"){const encodable=getEncodable(bytes),cursor=createCursor(new Uint8Array(encodable.length));return encodable.encode(cursor),"hex"===to?bytesToHex(cursor.bytes):cursor.bytes}export function bytesToRlp(bytes,to="bytes"){return toRlp(bytes,to)}export function hexToRlp(hex,to="hex"){return toRlp(hex,to)}function getEncodable(bytes){return Array.isArray(bytes)?getEncodableList(bytes.map((x=>getEncodable(x)))):getEncodableBytes(bytes)}function getEncodableList(list){const bodyLength=list.reduce(((acc,x)=>acc+x.length),0),sizeOfBodyLength=getSizeOfLength(bodyLength);return{length:bodyLength<=55?1+bodyLength:1+sizeOfBodyLength+bodyLength,encode(cursor){bodyLength<=55?cursor.pushByte(192+bodyLength):(cursor.pushByte(247+sizeOfBodyLength),1===sizeOfBodyLength?cursor.pushUint8(bodyLength):2===sizeOfBodyLength?cursor.pushUint16(bodyLength):3===sizeOfBodyLength?cursor.pushUint24(bodyLength):cursor.pushUint32(bodyLength));for(const{encode:encode}of list)encode(cursor)}}}function getEncodableBytes(bytesOrHex){const bytes="string"==typeof bytesOrHex?hexToBytes(bytesOrHex):bytesOrHex,sizeOfBytesLength=getSizeOfLength(bytes.length);return{length:1===bytes.length&&bytes[0]<128?1:bytes.length<=55?1+bytes.length:1+sizeOfBytesLength+bytes.length,encode(cursor){1===bytes.length&&bytes[0]<128?cursor.pushBytes(bytes):bytes.length<=55?(cursor.pushByte(128+bytes.length),cursor.pushBytes(bytes)):(cursor.pushByte(183+sizeOfBytesLength),1===sizeOfBytesLength?cursor.pushUint8(bytes.length):2===sizeOfBytesLength?cursor.pushUint16(bytes.length):3===sizeOfBytesLength?cursor.pushUint24(bytes.length):cursor.pushUint32(bytes.length),cursor.pushBytes(bytes))}}}function getSizeOfLength(length){if(length<256)return 1;if(length<65536)return 2;if(length<2**24)return 3;if(length<2**32)return 4;throw new BaseError("Length is too large.")}