import{BaseError}from"../errors/base.js";import{HttpRequestError}from"../errors/request.js";import{ChainDisconnectedError,InternalRpcError,InvalidInputRpcError,InvalidParamsRpcError,InvalidRequestRpcError,JsonRpcVersionUnsupportedError,LimitExceededRpcError,MethodNotFoundRpcError,MethodNotSupportedRpcError,ParseRpcError,ProviderDisconnectedError,ResourceNotFoundRpcError,ResourceUnavailableRpcError,SwitchChainError,TransactionRejectedRpcError,UnauthorizedProviderError,UnknownRpcError,UnsupportedProviderMethodError,UserRejectedRequestError}from"../errors/rpc.js";import{withRetry}from"./promise/withRetry.js";export function buildRequest(request,options={}){return async(args,overrideOptions={})=>{const{retryDelay:retryDelay=150,retryCount:retryCount=3}={...options,...overrideOptions};return withRetry((async()=>{try{return await request(args)}catch(err_){const err=err_;switch(err.code){case ParseRpcError.code:throw new ParseRpcError(err);case InvalidRequestRpcError.code:throw new InvalidRequestRpcError(err);case MethodNotFoundRpcError.code:throw new MethodNotFoundRpcError(err);case InvalidParamsRpcError.code:throw new InvalidParamsRpcError(err);case InternalRpcError.code:throw new InternalRpcError(err);case InvalidInputRpcError.code:throw new InvalidInputRpcError(err);case ResourceNotFoundRpcError.code:throw new ResourceNotFoundRpcError(err);case ResourceUnavailableRpcError.code:throw new ResourceUnavailableRpcError(err);case TransactionRejectedRpcError.code:throw new TransactionRejectedRpcError(err);case MethodNotSupportedRpcError.code:throw new MethodNotSupportedRpcError(err);case LimitExceededRpcError.code:throw new LimitExceededRpcError(err);case JsonRpcVersionUnsupportedError.code:throw new JsonRpcVersionUnsupportedError(err);case UserRejectedRequestError.code:throw new UserRejectedRequestError(err);case UnauthorizedProviderError.code:throw new UnauthorizedProviderError(err);case UnsupportedProviderMethodError.code:throw new UnsupportedProviderMethodError(err);case ProviderDisconnectedError.code:throw new ProviderDisconnectedError(err);case ChainDisconnectedError.code:throw new ChainDisconnectedError(err);case SwitchChainError.code:throw new SwitchChainError(err);case 5e3:throw new UserRejectedRequestError(err);default:if(err_ instanceof BaseError)throw err_;throw new UnknownRpcError(err)}}}),{delay:({count:count,error:error})=>{if(error&&error instanceof HttpRequestError){const retryAfter=error?.headers?.get("Retry-After");if(retryAfter?.match(/\d/))return 1e3*parseInt(retryAfter)}return~~(1<<count)*retryDelay},retryCount:retryCount,shouldRetry:({error:error})=>shouldRetry(error)})}}export function shouldRetry(error){return"code"in error&&"number"==typeof error.code?-1===error.code||(error.code===LimitExceededRpcError.code||error.code===InternalRpcError.code):!(error instanceof HttpRequestError&&error.status)||(403===error.status||(408===error.status||(413===error.status||(429===error.status||(500===error.status||(502===error.status||(503===error.status||504===error.status)))))))}