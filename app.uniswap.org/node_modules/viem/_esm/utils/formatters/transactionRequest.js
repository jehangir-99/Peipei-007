import{bytesToHex,numberToHex}from"../encoding/toHex.js";import{defineFormatter}from"./formatter.js";export const rpcTransactionType={legacy:"0x0",eip2930:"0x1",eip1559:"0x2",eip4844:"0x3"};export function formatTransactionRequest(request){const rpcRequest={};return void 0!==request.accessList&&(rpcRequest.accessList=request.accessList),void 0!==request.blobs&&("string"!=typeof request.blobs[0]?rpcRequest.blobs=request.blobs.map((x=>bytesToHex(x))):rpcRequest.blobs=request.blobs),void 0!==request.data&&(rpcRequest.data=request.data),void 0!==request.from&&(rpcRequest.from=request.from),void 0!==request.gas&&(rpcRequest.gas=numberToHex(request.gas)),void 0!==request.gasPrice&&(rpcRequest.gasPrice=numberToHex(request.gasPrice)),void 0!==request.maxFeePerBlobGas&&(rpcRequest.maxFeePerBlobGas=numberToHex(request.maxFeePerBlobGas)),void 0!==request.maxFeePerGas&&(rpcRequest.maxFeePerGas=numberToHex(request.maxFeePerGas)),void 0!==request.maxPriorityFeePerGas&&(rpcRequest.maxPriorityFeePerGas=numberToHex(request.maxPriorityFeePerGas)),void 0!==request.nonce&&(rpcRequest.nonce=numberToHex(request.nonce)),void 0!==request.to&&(rpcRequest.to=request.to),void 0!==request.type&&(rpcRequest.type=rpcTransactionType[request.type]),void 0!==request.value&&(rpcRequest.value=numberToHex(request.value)),rpcRequest}export const defineTransactionRequest=defineFormatter("transactionRequest",formatTransactionRequest);