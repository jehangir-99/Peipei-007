import{HttpRequestError,TimeoutError}from"../../errors/request.js";import{withTimeout}from"../promise/withTimeout.js";import{stringify}from"../stringify.js";import{idCache}from"./id.js";export function getHttpRpcClient(url,options={}){return{async request(params){const{body:body,fetchOptions:fetchOptions={},onRequest:onRequest=options.onRequest,onResponse:onResponse=options.onResponse,timeout:timeout=options.timeout??1e4}=params,{headers:headers,method:method,signal:signal_}={...options.fetchOptions,...fetchOptions};try{const response=await withTimeout((async({signal:signal})=>{const request=new Request(url,{...fetchOptions,body:Array.isArray(body)?stringify(body.map((body=>({jsonrpc:"2.0",id:body.id??idCache.take(),...body})))):stringify({jsonrpc:"2.0",id:body.id??idCache.take(),...body}),headers:{...headers,"Content-Type":"application/json"},method:method||"POST",signal:signal_||(timeout>0?signal:null)});onRequest&&await onRequest(request);return await fetch(request)}),{errorInstance:new TimeoutError({body:body,url:url}),timeout:timeout,signal:!0});let data;if(onResponse&&await onResponse(response),data=response.headers.get("Content-Type")?.startsWith("application/json")?await response.json():await response.text(),!response.ok)throw new HttpRequestError({body:body,details:stringify(data.error)||response.statusText,headers:response.headers,status:response.status,url:url});return data}catch(err){if(err instanceof HttpRequestError)throw err;if(err instanceof TimeoutError)throw err;throw new HttpRequestError({body:body,details:err.message,url:url})}}}}