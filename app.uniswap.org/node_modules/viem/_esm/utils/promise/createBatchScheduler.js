const schedulerCache=new Map;export function createBatchScheduler({fn:fn,id:id,shouldSplitBatch:shouldSplitBatch,wait:wait=0,sort:sort}){const exec=async()=>{const scheduler=getScheduler();flush();const args=scheduler.map((({args:args})=>args));0!==args.length&&fn(args).then((data=>{sort&&Array.isArray(data)&&data.sort(sort);for(let i=0;i<scheduler.length;i++){const{pendingPromise:pendingPromise}=scheduler[i];pendingPromise.resolve?.([data[i],data])}})).catch((err=>{for(let i=0;i<scheduler.length;i++){const{pendingPromise:pendingPromise}=scheduler[i];pendingPromise.reject?.(err)}}))},flush=()=>schedulerCache.delete(id),getScheduler=()=>schedulerCache.get(id)||[],setScheduler=item=>schedulerCache.set(id,[...getScheduler(),item]);return{flush:flush,async schedule(args){const pendingPromise={},promise=new Promise(((resolve,reject)=>{pendingPromise.resolve=resolve,pendingPromise.reject=reject})),split=shouldSplitBatch?.([...getScheduler().map((({args:args})=>args)),args]);split&&exec();return getScheduler().length>0?(setScheduler({args:args,pendingPromise:pendingPromise}),promise):(setScheduler({args:args,pendingPromise:pendingPromise}),setTimeout(exec,wait),promise)}}}