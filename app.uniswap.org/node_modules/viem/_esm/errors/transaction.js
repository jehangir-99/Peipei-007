import{formatEther}from"../utils/unit/formatEther.js";import{formatGwei}from"../utils/unit/formatGwei.js";import{BaseError}from"./base.js";export function prettyPrint(args){const entries=Object.entries(args).map((([key,value])=>void 0===value||!1===value?null:[key,value])).filter(Boolean),maxLength=entries.reduce(((acc,[key])=>Math.max(acc,key.length)),0);return entries.map((([key,value])=>`  ${`${key}:`.padEnd(maxLength+1)}  ${value}`)).join("\n")}export class FeeConflictError extends BaseError{constructor(){super(["Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.","Use `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others."].join("\n")),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"FeeConflictError"})}}export class InvalidLegacyVError extends BaseError{constructor({v:v}){super(`Invalid \`v\` value "${v}". Expected 27 or 28.`),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"InvalidLegacyVError"})}}export class InvalidSerializableTransactionError extends BaseError{constructor({transaction:transaction}){super("Cannot infer a transaction type from provided transaction.",{metaMessages:["Provided Transaction:","{",prettyPrint(transaction),"}","","To infer the type, either provide:","- a `type` to the Transaction, or","- an EIP-1559 Transaction with `maxFeePerGas`, or","- an EIP-2930 Transaction with `gasPrice` & `accessList`, or","- an EIP-4844 Transaction with `blobs`, `blobVersionedHashes`, `sidecars`, or","- a Legacy Transaction with `gasPrice`"]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"InvalidSerializableTransactionError"})}}export class InvalidSerializedTransactionTypeError extends BaseError{constructor({serializedType:serializedType}){super(`Serialized transaction type "${serializedType}" is invalid.`),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"InvalidSerializedTransactionType"}),Object.defineProperty(this,"serializedType",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.serializedType=serializedType}}export class InvalidSerializedTransactionError extends BaseError{constructor({attributes:attributes,serializedTransaction:serializedTransaction,type:type}){const missing=Object.entries(attributes).map((([key,value])=>void 0===value?key:void 0)).filter(Boolean);super(`Invalid serialized transaction of type "${type}" was provided.`,{metaMessages:[`Serialized Transaction: "${serializedTransaction}"`,missing.length>0?`Missing Attributes: ${missing.join(", ")}`:""].filter(Boolean)}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"InvalidSerializedTransactionError"}),Object.defineProperty(this,"serializedTransaction",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"type",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.serializedTransaction=serializedTransaction,this.type=type}}export class InvalidStorageKeySizeError extends BaseError{constructor({storageKey:storageKey}){super(`Size for storage key "${storageKey}" is invalid. Expected 32 bytes. Got ${Math.floor((storageKey.length-2)/2)} bytes.`),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"InvalidStorageKeySizeError"})}}export class TransactionExecutionError extends BaseError{constructor(cause,{account:account,docsPath:docsPath,chain:chain,data:data,gas:gas,gasPrice:gasPrice,maxFeePerGas:maxFeePerGas,maxPriorityFeePerGas:maxPriorityFeePerGas,nonce:nonce,to:to,value:value}){const prettyArgs=prettyPrint({chain:chain&&`${chain?.name} (id: ${chain?.id})`,from:account?.address,to:to,value:void 0!==value&&`${formatEther(value)} ${chain?.nativeCurrency?.symbol||"ETH"}`,data:data,gas:gas,gasPrice:void 0!==gasPrice&&`${formatGwei(gasPrice)} gwei`,maxFeePerGas:void 0!==maxFeePerGas&&`${formatGwei(maxFeePerGas)} gwei`,maxPriorityFeePerGas:void 0!==maxPriorityFeePerGas&&`${formatGwei(maxPriorityFeePerGas)} gwei`,nonce:nonce});super(cause.shortMessage,{cause:cause,docsPath:docsPath,metaMessages:[...cause.metaMessages?[...cause.metaMessages," "]:[],"Request Arguments:",prettyArgs].filter(Boolean)}),Object.defineProperty(this,"cause",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"TransactionExecutionError"}),this.cause=cause}}export class TransactionNotFoundError extends BaseError{constructor({blockHash:blockHash,blockNumber:blockNumber,blockTag:blockTag,hash:hash,index:index}){let identifier="Transaction";blockTag&&void 0!==index&&(identifier=`Transaction at block time "${blockTag}" at index "${index}"`),blockHash&&void 0!==index&&(identifier=`Transaction at block hash "${blockHash}" at index "${index}"`),blockNumber&&void 0!==index&&(identifier=`Transaction at block number "${blockNumber}" at index "${index}"`),hash&&(identifier=`Transaction with hash "${hash}"`),super(`${identifier} could not be found.`),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"TransactionNotFoundError"})}}export class TransactionReceiptNotFoundError extends BaseError{constructor({hash:hash}){super(`Transaction receipt with hash "${hash}" could not be found. The Transaction may not be processed on a block yet.`),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"TransactionReceiptNotFoundError"})}}export class WaitForTransactionReceiptTimeoutError extends BaseError{constructor({hash:hash}){super(`Timed out while waiting for transaction with hash "${hash}" to be confirmed.`),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"WaitForTransactionReceiptTimeoutError"})}}