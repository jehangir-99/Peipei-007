import{}from"../types/chain.js";import{}from"../types/rpc.js";import{hexToBigInt}from"../utils/encoding/fromHex.js";import{defineBlock}from"../utils/formatters/block.js";import{defineTransaction,formatTransaction}from"../utils/formatters/transaction.js";import{defineTransactionReceipt}from"../utils/formatters/transactionReceipt.js";export const formatters={block:defineBlock({format(args){const transactions=args.transactions?.map((transaction=>{if("string"==typeof transaction)return transaction;const formatted=formatTransaction(transaction);return"0x7e"===formatted.typeHex&&(formatted.isSystemTx=transaction.isSystemTx,formatted.mint=transaction.mint?hexToBigInt(transaction.mint):void 0,formatted.sourceHash=transaction.sourceHash,formatted.type="deposit"),formatted}));return{transactions:transactions,stateRoot:args.stateRoot}}}),transaction:defineTransaction({format(args){const transaction={};return"0x7e"===args.type&&(transaction.isSystemTx=args.isSystemTx,transaction.mint=args.mint?hexToBigInt(args.mint):void 0,transaction.sourceHash=args.sourceHash,transaction.type="deposit"),transaction}}),transactionReceipt:defineTransactionReceipt({format:args=>({l1GasPrice:args.l1GasPrice?hexToBigInt(args.l1GasPrice):null,l1GasUsed:args.l1GasUsed?hexToBigInt(args.l1GasUsed):null,l1Fee:args.l1Fee?hexToBigInt(args.l1Fee):null,l1FeeScalar:args.l1FeeScalar?Number(args.l1FeeScalar):null})})};