import{getBatch}from"./batch";function createListenerCollection(){const batch=getBatch();let first=null,last=null;return{clear(){first=null,last=null},notify(){batch((()=>{let listener=first;for(;listener;)listener.callback(),listener=listener.next}))},get(){let listeners=[],listener=first;for(;listener;)listeners.push(listener),listener=listener.next;return listeners},subscribe(callback){let isSubscribed=!0,listener=last={callback:callback,next:null,prev:last};return listener.prev?listener.prev.next=listener:first=listener,function(){isSubscribed&&null!==first&&(isSubscribed=!1,listener.next?listener.next.prev=listener.prev:last=listener.prev,listener.prev?listener.prev.next=listener.next:first=listener.next)}}}}const nullListeners={notify(){},get:()=>[]};export function createSubscription(store,parentSub){let unsubscribe,listeners=nullListeners;function handleChangeWrapper(){subscription.onStateChange&&subscription.onStateChange()}function trySubscribe(){unsubscribe||(unsubscribe=parentSub?parentSub.addNestedSub(handleChangeWrapper):store.subscribe(handleChangeWrapper),listeners=createListenerCollection())}const subscription={addNestedSub:function(listener){return trySubscribe(),listeners.subscribe(listener)},notifyNestedSubs:function(){listeners.notify()},handleChangeWrapper:handleChangeWrapper,isSubscribed:function(){return Boolean(unsubscribe)},trySubscribe:trySubscribe,tryUnsubscribe:function(){unsubscribe&&(unsubscribe(),unsubscribe=void 0,listeners.clear(),listeners=nullListeners)},getListeners:()=>listeners};return subscription}