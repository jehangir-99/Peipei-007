"use strict";const mh=require("multihashes"),multibase=require("multibase"),multicodec=require("multicodec"),CIDUtil=require("./cid-util"),uint8ArrayConcat=require("uint8arrays/concat"),uint8ArrayToString=require("uint8arrays/to-string"),uint8ArrayEquals=require("uint8arrays/equals"),codecs=multicodec.nameToCode,codecInts=Object.keys(codecs).reduce(((p,name)=>(p[codecs[name]]=name,p)),{}),symbol=Symbol.for("@ipld/js-cid/CID");class CID{constructor(version,codec,multihash,multibaseName){if(this.version,this.codec,this.multihash,Object.defineProperty(this,symbol,{value:!0}),CID.isCID(version)){const cid=version;return this.version=cid.version,this.codec=cid.codec,this.multihash=cid.multihash,void(this.multibaseName=cid.multibaseName||(0===cid.version?"base58btc":"base32"))}if("string"==typeof version){const baseName=multibase.isEncoded(version);if(baseName){const cid=multibase.decode(version);this.version=parseInt(cid[0].toString(),16),this.codec=multicodec.getCodec(cid.slice(1)),this.multihash=multicodec.rmPrefix(cid.slice(1)),this.multibaseName=baseName}else this.version=0,this.codec="dag-pb",this.multihash=mh.fromB58String(version),this.multibaseName="base58btc";return CID.validateCID(this),void Object.defineProperty(this,"string",{value:version})}if(version instanceof Uint8Array){const v=parseInt(version[0].toString(),16);if(1===v){const cid=version;this.version=v,this.codec=multicodec.getCodec(cid.slice(1)),this.multihash=multicodec.rmPrefix(cid.slice(1)),this.multibaseName="base32"}else this.version=0,this.codec="dag-pb",this.multihash=version,this.multibaseName="base58btc";CID.validateCID(this)}else this.version=version,"number"==typeof codec&&(codec=codecInts[codec]),this.codec=codec,this.multihash=multihash,this.multibaseName=multibaseName||(0===version?"base58btc":"base32"),CID.validateCID(this)}get bytes(){let bytes=this._bytes;if(!bytes){if(0===this.version)bytes=this.multihash;else{if(1!==this.version)throw new Error("unsupported version");{const codec=multicodec.getCodeVarint(this.codec);bytes=uint8ArrayConcat([[1],codec,this.multihash],1+codec.byteLength+this.multihash.byteLength)}}Object.defineProperty(this,"_bytes",{value:bytes})}return bytes}get prefix(){const codec=multicodec.getCodeVarint(this.codec),multihash=mh.prefix(this.multihash);return uint8ArrayConcat([[this.version],codec,multihash],1+codec.byteLength+multihash.byteLength)}get code(){return codecs[this.codec]}toV0(){if("dag-pb"!==this.codec)throw new Error("Cannot convert a non dag-pb CID to CIDv0");const{name:name,length:length}=mh.decode(this.multihash);if("sha2-256"!==name)throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");if(32!==length)throw new Error("Cannot convert non 32 byte multihash CID to CIDv0");return new CID(0,this.codec,this.multihash)}toV1(){return new CID(1,this.codec,this.multihash)}toBaseEncodedString(base=this.multibaseName){if(this.string&&0!==this.string.length&&base===this.multibaseName)return this.string;let str;if(0===this.version){if("base58btc"!==base)throw new Error("not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()");str=mh.toB58String(this.multihash)}else{if(1!==this.version)throw new Error("unsupported version");str=uint8ArrayToString(multibase.encode(base,this.bytes))}return base===this.multibaseName&&Object.defineProperty(this,"string",{value:str}),str}[Symbol.for("nodejs.util.inspect.custom")](){return"CID("+this.toString()+")"}toString(base){return this.toBaseEncodedString(base)}toJSON(){return{codec:this.codec,version:this.version,hash:this.multihash}}equals(other){return this.codec===other.codec&&this.version===other.version&&uint8ArrayEquals(this.multihash,other.multihash)}static validateCID(other){const errorMsg=CIDUtil.checkCIDComponents(other);if(errorMsg)throw new Error(errorMsg)}static isCID(value){return value instanceof CID||Boolean(value&&value[symbol])}}CID.codecs=codecs,module.exports=CID;