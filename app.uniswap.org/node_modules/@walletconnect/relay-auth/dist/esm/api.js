import*as ed25519 from"@stablelib/ed25519";import{randomBytes}from"@stablelib/random";import{fromMiliseconds}from"@walletconnect/time";import{JWT_IRIDIUM_ALG,JWT_IRIDIUM_TYP,KEY_PAIR_SEED_LENGTH}from"./constants";import{decodeIss,decodeJWT,encodeData,encodeIss,encodeJWT}from"./utils";export function generateKeyPair(seed=randomBytes(KEY_PAIR_SEED_LENGTH)){return ed25519.generateKeyPairFromSeed(seed)}export async function signJWT(sub,aud,ttl,keyPair,iat=fromMiliseconds(Date.now())){const header={alg:JWT_IRIDIUM_ALG,typ:JWT_IRIDIUM_TYP},payload={iss:encodeIss(keyPair.publicKey),sub:sub,aud:aud,iat:iat,exp:iat+ttl},data=encodeData({header:header,payload:payload}),signature=ed25519.sign(keyPair.secretKey,data);return encodeJWT({header:header,payload:payload,signature:signature})}export async function verifyJWT(jwt){const{header:header,payload:payload,data:data,signature:signature}=decodeJWT(jwt);if(header.alg!==JWT_IRIDIUM_ALG||header.typ!==JWT_IRIDIUM_TYP)throw new Error("JWT must use EdDSA algorithm");const publicKey=decodeIss(payload.iss);return ed25519.verify(publicKey,data,signature)}