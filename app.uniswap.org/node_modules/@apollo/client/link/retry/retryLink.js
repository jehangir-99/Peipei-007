import{__awaiter,__extends,__generator}from"tslib";import{ApolloLink}from"../core/index.js";import{Observable}from"../../utilities/index.js";import{buildDelayFunction}from"./delayFunction.js";import{buildRetryFunction}from"./retryFunction.js";var RetryableOperation=function(){function RetryableOperation(observer,operation,forward,delayFor,retryIf){var _this=this;this.observer=observer,this.operation=operation,this.forward=forward,this.delayFor=delayFor,this.retryIf=retryIf,this.retryCount=0,this.currentSubscription=null,this.onError=function(error){return __awaiter(_this,void 0,void 0,(function(){return __generator(this,(function(_a){switch(_a.label){case 0:return this.retryCount+=1,[4,this.retryIf(this.retryCount,this.operation,error)];case 1:return _a.sent()?(this.scheduleRetry(this.delayFor(this.retryCount,this.operation,error)),[2]):(this.observer.error(error),[2])}}))}))},this.try()}return RetryableOperation.prototype.cancel=function(){this.currentSubscription&&this.currentSubscription.unsubscribe(),clearTimeout(this.timerId),this.timerId=void 0,this.currentSubscription=null},RetryableOperation.prototype.try=function(){this.currentSubscription=this.forward(this.operation).subscribe({next:this.observer.next.bind(this.observer),error:this.onError,complete:this.observer.complete.bind(this.observer)})},RetryableOperation.prototype.scheduleRetry=function(delay){var _this=this;if(this.timerId)throw new Error("RetryLink BUG! Encountered overlapping retries");this.timerId=setTimeout((function(){_this.timerId=void 0,_this.try()}),delay)},RetryableOperation}(),RetryLink=function(_super){function RetryLink(options){var _this=_super.call(this)||this,_a=options||{},attempts=_a.attempts,delay=_a.delay;return _this.delayFor="function"==typeof delay?delay:buildDelayFunction(delay),_this.retryIf="function"==typeof attempts?attempts:buildRetryFunction(attempts),_this}return __extends(RetryLink,_super),RetryLink.prototype.request=function(operation,nextLink){var _this=this;return new Observable((function(observer){var retryable=new RetryableOperation(observer,operation,nextLink,_this.delayFor,_this.retryIf);return function(){retryable.cancel()}}))},RetryLink}(ApolloLink);export{RetryLink};