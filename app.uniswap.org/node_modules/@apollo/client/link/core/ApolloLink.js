import{newInvariantError,invariant}from"../../utilities/globals/index.js";import{Observable}from"../../utilities/index.js";import{validateOperation,createOperation,transformOperation}from"../utils/index.js";function passthrough(op,forward){return forward?forward(op):Observable.of()}function toLink(handler){return"function"==typeof handler?new ApolloLink(handler):handler}function isTerminating(link){return link.request.length<=1}var ApolloLink=function(){function ApolloLink(request){request&&(this.request=request)}return ApolloLink.empty=function(){return new ApolloLink((function(){return Observable.of()}))},ApolloLink.from=function(links){return 0===links.length?ApolloLink.empty():links.map(toLink).reduce((function(x,y){return x.concat(y)}))},ApolloLink.split=function(test,left,right){var ret,leftLink=toLink(left),rightLink=toLink(right||new ApolloLink(passthrough));return ret=isTerminating(leftLink)&&isTerminating(rightLink)?new ApolloLink((function(operation){return test(operation)?leftLink.request(operation)||Observable.of():rightLink.request(operation)||Observable.of()})):new ApolloLink((function(operation,forward){return test(operation)?leftLink.request(operation,forward)||Observable.of():rightLink.request(operation,forward)||Observable.of()})),Object.assign(ret,{left:leftLink,right:rightLink})},ApolloLink.execute=function(link,operation){return link.request(createOperation(operation.context,transformOperation(validateOperation(operation))))||Observable.of()},ApolloLink.concat=function(first,second){var firstLink=toLink(first);if(isTerminating(firstLink))return!1!==globalThis.__DEV__&&invariant.warn(35,firstLink),firstLink;var ret,nextLink=toLink(second);return ret=isTerminating(nextLink)?new ApolloLink((function(operation){return firstLink.request(operation,(function(op){return nextLink.request(op)||Observable.of()}))||Observable.of()})):new ApolloLink((function(operation,forward){return firstLink.request(operation,(function(op){return nextLink.request(op,forward)||Observable.of()}))||Observable.of()})),Object.assign(ret,{left:firstLink,right:nextLink})},ApolloLink.prototype.split=function(test,left,right){return this.concat(ApolloLink.split(test,left,right||new ApolloLink(passthrough)))},ApolloLink.prototype.concat=function(next){return ApolloLink.concat(this,next)},ApolloLink.prototype.request=function(operation,forward){throw newInvariantError(36)},ApolloLink.prototype.onError=function(error,observer){if(observer&&observer.error)return observer.error(error),!1;throw error},ApolloLink.prototype.setOnError=function(fn){return this.onError=fn,this},ApolloLink}();export{ApolloLink};