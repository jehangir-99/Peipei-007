import{__assign,__spreadArray}from"tslib";import{print}from"../../utilities/index.js";var defaultHttpOptions={includeQuery:!0,includeExtensions:!1,preserveHeaderCase:!1},defaultHeaders={accept:"*/*","content-type":"application/json"},defaultOptions={method:"POST"};export var fallbackHttpConfig={http:defaultHttpOptions,headers:defaultHeaders,options:defaultOptions};export var defaultPrinter=function(ast,printer){return printer(ast)};export function selectHttpOptionsAndBody(operation,fallbackConfig){for(var configs=[],_i=2;_i<arguments.length;_i++)configs[_i-2]=arguments[_i];return configs.unshift(fallbackConfig),selectHttpOptionsAndBodyInternal.apply(void 0,__spreadArray([operation,defaultPrinter],configs,!1))}export function selectHttpOptionsAndBodyInternal(operation,printer){for(var configs=[],_i=2;_i<arguments.length;_i++)configs[_i-2]=arguments[_i];var options={},http={};configs.forEach((function(config){options=__assign(__assign(__assign({},options),config.options),{headers:__assign(__assign({},options.headers),config.headers)}),config.credentials&&(options.credentials=config.credentials),http=__assign(__assign({},http),config.http)})),options.headers&&(options.headers=removeDuplicateHeaders(options.headers,http.preserveHeaderCase));var operationName=operation.operationName,extensions=operation.extensions,variables=operation.variables,query=operation.query,body={operationName:operationName,variables:variables};return http.includeExtensions&&(body.extensions=extensions),http.includeQuery&&(body.query=printer(query,print)),{options:options,body:body}}function removeDuplicateHeaders(headers,preserveHeaderCase){if(!preserveHeaderCase){var normalizedHeaders_1=Object.create(null);return Object.keys(Object(headers)).forEach((function(name){normalizedHeaders_1[name.toLowerCase()]=headers[name]})),normalizedHeaders_1}var headerData=Object.create(null);Object.keys(Object(headers)).forEach((function(name){headerData[name.toLowerCase()]={originalName:name,value:headers[name]}}));var normalizedHeaders=Object.create(null);return Object.keys(headerData).forEach((function(name){normalizedHeaders[headerData[name].originalName]=headerData[name].value})),normalizedHeaders}