import{canUseAsyncIteratorSymbol}from"../../../utilities/index.js";export default function nodeStreamIterator(stream){var cleanup=null,error=null,done=!1,data=[],waiting=[];function onData(chunk){if(!error){if(waiting.length){var shiftedArr=waiting.shift();if(Array.isArray(shiftedArr)&&shiftedArr[0])return shiftedArr[0]({value:chunk,done:!1})}data.push(chunk)}}function onError(err){error=err,waiting.slice().forEach((function(pair){pair[1](err)})),!cleanup||cleanup()}function onEnd(){done=!0,waiting.slice().forEach((function(pair){pair[0]({value:void 0,done:!0})})),!cleanup||cleanup()}cleanup=function(){cleanup=null,stream.removeListener("data",onData),stream.removeListener("error",onError),stream.removeListener("end",onEnd),stream.removeListener("finish",onEnd),stream.removeListener("close",onEnd)},stream.on("data",onData),stream.on("error",onError),stream.on("end",onEnd),stream.on("finish",onEnd),stream.on("close",onEnd);var iterator={next:function(){return new Promise((function(resolve,reject){return error?reject(error):data.length?resolve({value:data.shift(),done:!1}):done?resolve({value:void 0,done:!0}):void waiting.push([resolve,reject])}))}};return canUseAsyncIteratorSymbol&&(iterator[Symbol.asyncIterator]=function(){return this}),iterator}