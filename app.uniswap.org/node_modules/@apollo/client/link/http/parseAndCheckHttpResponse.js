import{__assign,__awaiter,__generator}from"tslib";import{responseIterator}from"./responseIterator.js";import{throwServerError}from"../utils/index.js";import{PROTOCOL_ERRORS_SYMBOL}from"../../errors/index.js";import{isApolloPayloadResult}from"../../utilities/common/incrementalResult.js";var hasOwnProperty=Object.prototype.hasOwnProperty;export function readMultipartBody(response,nextValue){return __awaiter(this,void 0,void 0,(function(){var decoder,contentType,boundaryVal,boundary,buffer,iterator,running,_a,value,done,chunk,searchFrom,bi,message,i,headers,contentType_1,body,result,next,_b,_c,_d;return __generator(this,(function(_e){switch(_e.label){case 0:if(void 0===TextDecoder)throw new Error("TextDecoder must be defined in the environment: please import a polyfill.");decoder=new TextDecoder("utf-8"),contentType=null===(_d=response.headers)||void 0===_d?void 0:_d.get("content-type"),"boundary=",boundaryVal=(null==contentType?void 0:contentType.includes("boundary="))?null==contentType?void 0:contentType.substring((null==contentType?void 0:contentType.indexOf("boundary="))+9).replace(/['"]/g,"").replace(/\;(.*)/gm,"").trim():"-",boundary="\r\n--".concat(boundaryVal),buffer="",iterator=responseIterator(response),running=!0,_e.label=1;case 1:return running?[4,iterator.next()]:[3,3];case 2:for(_a=_e.sent(),value=_a.value,done=_a.done,chunk="string"==typeof value?value:decoder.decode(value),searchFrom=buffer.length-boundary.length+1,running=!done,bi=(buffer+=chunk).indexOf(boundary,searchFrom);bi>-1;){if(message=void 0,_b=[buffer.slice(0,bi),buffer.slice(bi+boundary.length)],buffer=_b[1],i=(message=_b[0]).indexOf("\r\n\r\n"),headers=parseHeaders(message.slice(0,i)),(contentType_1=headers["content-type"])&&-1===contentType_1.toLowerCase().indexOf("application/json"))throw new Error("Unsupported patch content type: application/json is required.");if(body=message.slice(i))if(result=parseJsonBody(response,body),Object.keys(result).length>1||"data"in result||"incremental"in result||"errors"in result||"payload"in result)if(isApolloPayloadResult(result)){if(next={},"payload"in result){if(1===Object.keys(result).length&&null===result.payload)return[2];next=__assign({},result.payload)}"errors"in result&&(next=__assign(__assign({},next),{extensions:__assign(__assign({},"extensions"in next?next.extensions:null),(_c={},_c[PROTOCOL_ERRORS_SYMBOL]=result.errors,_c))})),nextValue(next)}else nextValue(result);else if(1===Object.keys(result).length&&"hasNext"in result&&!result.hasNext)return[2];bi=buffer.indexOf(boundary)}return[3,1];case 3:return[2]}}))}))}export function parseHeaders(headerText){var headersInit={};return headerText.split("\n").forEach((function(line){var i=line.indexOf(":");if(i>-1){var name_1=line.slice(0,i).trim().toLowerCase(),value=line.slice(i+1).trim();headersInit[name_1]=value}})),headersInit}export function parseJsonBody(response,bodyText){if(response.status>=300){throwServerError(response,function(){try{return JSON.parse(bodyText)}catch(err){return bodyText}}(),"Response not successful: Received status code ".concat(response.status))}try{return JSON.parse(bodyText)}catch(err){var parseError=err;throw parseError.name="ServerParseError",parseError.response=response,parseError.statusCode=response.status,parseError.bodyText=bodyText,parseError}}export function handleError(err,observer){err.result&&err.result.errors&&err.result.data&&observer.next(err.result),observer.error(err)}export function parseAndCheckHttpResponse(operations){return function(response){return response.text().then((function(bodyText){return parseJsonBody(response,bodyText)})).then((function(result){return Array.isArray(result)||hasOwnProperty.call(result,"data")||hasOwnProperty.call(result,"errors")||throwServerError(response,result,"Server response was missing for query '".concat(Array.isArray(operations)?operations.map((function(op){return op.operationName})):operations.operationName,"'.")),result}))}}