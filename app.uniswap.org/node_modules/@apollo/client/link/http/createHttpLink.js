import{__assign,__rest}from"tslib";import{invariant}from"../../utilities/globals/index.js";import{ApolloLink}from"../core/index.js";import{Observable,hasDirectives}from"../../utilities/index.js";import{serializeFetchParameter}from"./serializeFetchParameter.js";import{selectURI}from"./selectURI.js";import{handleError,readMultipartBody,parseAndCheckHttpResponse}from"./parseAndCheckHttpResponse.js";import{checkFetcher}from"./checkFetcher.js";import{selectHttpOptionsAndBodyInternal,defaultPrinter,fallbackHttpConfig}from"./selectHttpOptionsAndBody.js";import{rewriteURIForGET}from"./rewriteURIForGET.js";import{fromError,filterOperationVariables}from"../utils/index.js";import{maybe,getMainDefinition,removeClientSetsFromDocument}from"../../utilities/index.js";var backupFetch=maybe((function(){return fetch}));export var createHttpLink=function(linkOptions){void 0===linkOptions&&(linkOptions={});var _a=linkOptions.uri,uri=void 0===_a?"/graphql":_a,preferredFetch=linkOptions.fetch,_b=linkOptions.print,print=void 0===_b?defaultPrinter:_b,includeExtensions=linkOptions.includeExtensions,preserveHeaderCase=linkOptions.preserveHeaderCase,useGETForQueries=linkOptions.useGETForQueries,_c=linkOptions.includeUnusedVariables,includeUnusedVariables=void 0!==_c&&_c,requestOptions=__rest(linkOptions,["uri","fetch","print","includeExtensions","preserveHeaderCase","useGETForQueries","includeUnusedVariables"]);!1!==globalThis.__DEV__&&checkFetcher(preferredFetch||backupFetch);var linkConfig={http:{includeExtensions:includeExtensions,preserveHeaderCase:preserveHeaderCase},options:requestOptions.fetchOptions,credentials:requestOptions.credentials,headers:requestOptions.headers};return new ApolloLink((function(operation){var chosenURI=selectURI(operation,uri),context=operation.getContext(),clientAwarenessHeaders={};if(context.clientAwareness){var _a=context.clientAwareness,name_1=_a.name,version=_a.version;name_1&&(clientAwarenessHeaders["apollographql-client-name"]=name_1),version&&(clientAwarenessHeaders["apollographql-client-version"]=version)}var contextHeaders=__assign(__assign({},clientAwarenessHeaders),context.headers),contextConfig={http:context.http,options:context.fetchOptions,credentials:context.credentials,headers:contextHeaders};if(hasDirectives(["client"],operation.query)){var transformedQuery=removeClientSetsFromDocument(operation.query);if(!transformedQuery)return fromError(new Error("HttpLink: Trying to send a client-only query to the server. To send to the server, ensure a non-client field is added to the query or set the `transformOptions.removeClientFields` option to `true`."));operation.query=transformedQuery}var controller,_b=selectHttpOptionsAndBodyInternal(operation,print,fallbackHttpConfig,linkConfig,contextConfig),options=_b.options,body=_b.body;body.variables&&!includeUnusedVariables&&(body.variables=filterOperationVariables(body.variables,operation.query)),options.signal||"undefined"==typeof AbortController||(controller=new AbortController,options.signal=controller.signal);var d,isSubscription="OperationDefinition"===(d=getMainDefinition(operation.query)).kind&&"subscription"===d.operation,hasDefer=hasDirectives(["defer"],operation.query);if(useGETForQueries&&!operation.query.definitions.some((function(d){return"OperationDefinition"===d.kind&&"mutation"===d.operation}))&&(options.method="GET"),hasDefer||isSubscription){options.headers=options.headers||{};var acceptHeader="multipart/mixed;";isSubscription&&hasDefer&&!1!==globalThis.__DEV__&&invariant.warn(38),isSubscription?acceptHeader+="boundary=graphql;subscriptionSpec=1.0,application/json":hasDefer&&(acceptHeader+="deferSpec=20220824,application/json"),options.headers.accept=acceptHeader}if("GET"===options.method){var _c=rewriteURIForGET(chosenURI,body),newURI=_c.newURI,parseError=_c.parseError;if(parseError)return fromError(parseError);chosenURI=newURI}else try{options.body=serializeFetchParameter(body,"Payload")}catch(parseError){return fromError(parseError)}return new Observable((function(observer){var currentFetch=preferredFetch||maybe((function(){return fetch}))||backupFetch,observerNext=observer.next.bind(observer);return currentFetch(chosenURI,options).then((function(response){var _a;operation.setContext({response:response});var ctype=null===(_a=response.headers)||void 0===_a?void 0:_a.get("content-type");return null!==ctype&&/^multipart\/mixed/i.test(ctype)?readMultipartBody(response,observerNext):parseAndCheckHttpResponse(operation)(response).then(observerNext)})).then((function(){controller=void 0,observer.complete()})).catch((function(err){controller=void 0,handleError(err,observer)})),function(){controller&&controller.abort()}}))}))};