import{__extends}from"tslib";import{Observable}from"./Observable.js";import{iterateObserversSafely}from"./iteration.js";import{fixObservableSubclass}from"./subclassing.js";function isPromiseLike(value){return value&&"function"==typeof value.then}var Concast=function(_super){function Concast(sources){var _this=_super.call(this,(function(observer){return _this.addObserver(observer),function(){return _this.removeObserver(observer)}}))||this;return _this.observers=new Set,_this.promise=new Promise((function(resolve,reject){_this.resolve=resolve,_this.reject=reject})),_this.handlers={next:function(result){null!==_this.sub&&(_this.latest=["next",result],_this.notify("next",result),iterateObserversSafely(_this.observers,"next",result))},error:function(error){var sub=_this.sub;null!==sub&&(sub&&setTimeout((function(){return sub.unsubscribe()})),_this.sub=null,_this.latest=["error",error],_this.reject(error),_this.notify("error",error),iterateObserversSafely(_this.observers,"error",error))},complete:function(){var _a=_this,sub=_a.sub,_b=_a.sources;if(null!==sub){var value=(void 0===_b?[]:_b).shift();value?isPromiseLike(value)?value.then((function(obs){return _this.sub=obs.subscribe(_this.handlers)}),_this.handlers.error):_this.sub=value.subscribe(_this.handlers):(sub&&setTimeout((function(){return sub.unsubscribe()})),_this.sub=null,_this.latest&&"next"===_this.latest[0]?_this.resolve(_this.latest[1]):_this.resolve(),_this.notify("complete"),iterateObserversSafely(_this.observers,"complete"))}}},_this.nextResultListeners=new Set,_this.cancel=function(reason){_this.reject(reason),_this.sources=[],_this.handlers.complete()},_this.promise.catch((function(_){})),"function"==typeof sources&&(sources=[new Observable(sources)]),isPromiseLike(sources)?sources.then((function(iterable){return _this.start(iterable)}),_this.handlers.error):_this.start(sources),_this}return __extends(Concast,_super),Concast.prototype.start=function(sources){void 0===this.sub&&(this.sources=Array.from(sources),this.handlers.complete())},Concast.prototype.deliverLastMessage=function(observer){if(this.latest){var nextOrError=this.latest[0],method=observer[nextOrError];method&&method.call(observer,this.latest[1]),null===this.sub&&"next"===nextOrError&&observer.complete&&observer.complete()}},Concast.prototype.addObserver=function(observer){this.observers.has(observer)||(this.deliverLastMessage(observer),this.observers.add(observer))},Concast.prototype.removeObserver=function(observer){this.observers.delete(observer)&&this.observers.size<1&&this.handlers.complete()},Concast.prototype.notify=function(method,arg){var nextResultListeners=this.nextResultListeners;nextResultListeners.size&&(this.nextResultListeners=new Set,nextResultListeners.forEach((function(listener){return listener(method,arg)})))},Concast.prototype.beforeNext=function(callback){var called=!1;this.nextResultListeners.add((function(method,arg){called||(called=!0,callback(method,arg))}))},Concast}(Observable);export{Concast};fixObservableSubclass(Concast);