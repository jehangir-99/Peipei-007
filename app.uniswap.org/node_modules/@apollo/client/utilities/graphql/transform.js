import{__assign,__spreadArray}from"tslib";import{invariant}from"../globals/index.js";import{visit,Kind}from"graphql";import{checkDocument,getOperationDefinition,getFragmentDefinition,getFragmentDefinitions,getMainDefinition}from"./getFromAST.js";import{isField}from"./storeUtils.js";import{createFragmentMap}from"./fragments.js";import{isArray,isNonEmptyArray}from"../common/arrays.js";var TYPENAME_FIELD={kind:Kind.FIELD,name:{kind:Kind.NAME,value:"__typename"}};function isEmpty(op,fragmentMap){return!op||op.selectionSet.selections.every((function(selection){return selection.kind===Kind.FRAGMENT_SPREAD&&isEmpty(fragmentMap[selection.name.value],fragmentMap)}))}function nullIfDocIsEmpty(doc){return isEmpty(getOperationDefinition(doc)||getFragmentDefinition(doc),createFragmentMap(getFragmentDefinitions(doc)))?null:doc}function getDirectiveMatcher(configs){var names=new Map,tests=new Map;return configs.forEach((function(directive){directive&&(directive.name?names.set(directive.name,directive):directive.test&&tests.set(directive.test,directive))})),function(directive){var config=names.get(directive.name.value);return!config&&tests.size&&tests.forEach((function(testConfig,test){test(directive)&&(config=testConfig)})),config}}function makeInUseGetterFunction(defaultKey){var map=new Map;return function(key){void 0===key&&(key=defaultKey);var inUse=map.get(key);return inUse||map.set(key,inUse={variables:new Set,fragmentSpreads:new Set}),inUse}}export function removeDirectivesFromDocument(directives,doc){checkDocument(doc);for(var getInUseByOperationName=makeInUseGetterFunction(""),getInUseByFragmentName=makeInUseGetterFunction(""),getInUse=function(ancestors){for(var p=0,ancestor=void 0;p<ancestors.length&&(ancestor=ancestors[p]);++p)if(!isArray(ancestor)){if(ancestor.kind===Kind.OPERATION_DEFINITION)return getInUseByOperationName(ancestor.name&&ancestor.name.value);if(ancestor.kind===Kind.FRAGMENT_DEFINITION)return getInUseByFragmentName(ancestor.name.value)}return!1!==globalThis.__DEV__&&invariant.error(84),null},operationCount=0,i=doc.definitions.length-1;i>=0;--i)doc.definitions[i].kind===Kind.OPERATION_DEFINITION&&++operationCount;var directiveMatcher=getDirectiveMatcher(directives),shouldRemoveField=function(nodeDirectives){return isNonEmptyArray(nodeDirectives)&&nodeDirectives.map(directiveMatcher).some((function(config){return config&&config.remove}))},originalFragmentDefsByPath=new Map,firstVisitMadeChanges=!1,fieldOrInlineFragmentVisitor={enter:function(node){if(shouldRemoveField(node.directives))return firstVisitMadeChanges=!0,null}},docWithoutDirectiveSubtrees=visit(doc,{Field:fieldOrInlineFragmentVisitor,InlineFragment:fieldOrInlineFragmentVisitor,VariableDefinition:{enter:function(){return!1}},Variable:{enter:function(node,_key,_parent,_path,ancestors){var inUse=getInUse(ancestors);inUse&&inUse.variables.add(node.name.value)}},FragmentSpread:{enter:function(node,_key,_parent,_path,ancestors){if(shouldRemoveField(node.directives))return firstVisitMadeChanges=!0,null;var inUse=getInUse(ancestors);inUse&&inUse.fragmentSpreads.add(node.name.value)}},FragmentDefinition:{enter:function(node,_key,_parent,path){originalFragmentDefsByPath.set(JSON.stringify(path),node)},leave:function(node,_key,_parent,path){return node===originalFragmentDefsByPath.get(JSON.stringify(path))?node:operationCount>0&&node.selectionSet.selections.every((function(selection){return selection.kind===Kind.FIELD&&"__typename"===selection.name.value}))?(getInUseByFragmentName(node.name.value).removed=!0,firstVisitMadeChanges=!0,null):void 0}},Directive:{leave:function(node){if(directiveMatcher(node))return firstVisitMadeChanges=!0,null}}});if(!firstVisitMadeChanges)return doc;var populateTransitiveVars=function(inUse){return inUse.transitiveVars||(inUse.transitiveVars=new Set(inUse.variables),inUse.removed||inUse.fragmentSpreads.forEach((function(childFragmentName){populateTransitiveVars(getInUseByFragmentName(childFragmentName)).transitiveVars.forEach((function(varName){inUse.transitiveVars.add(varName)}))}))),inUse},allFragmentNamesUsed=new Set;docWithoutDirectiveSubtrees.definitions.forEach((function(def){def.kind===Kind.OPERATION_DEFINITION?populateTransitiveVars(getInUseByOperationName(def.name&&def.name.value)).fragmentSpreads.forEach((function(childFragmentName){allFragmentNamesUsed.add(childFragmentName)})):def.kind!==Kind.FRAGMENT_DEFINITION||0!==operationCount||getInUseByFragmentName(def.name.value).removed||allFragmentNamesUsed.add(def.name.value)})),allFragmentNamesUsed.forEach((function(fragmentName){populateTransitiveVars(getInUseByFragmentName(fragmentName)).fragmentSpreads.forEach((function(childFragmentName){allFragmentNamesUsed.add(childFragmentName)}))}));var enterVisitor={enter:function(node){if(fragmentName=node.name.value,!allFragmentNamesUsed.has(fragmentName)||getInUseByFragmentName(fragmentName).removed)return null;var fragmentName}};return nullIfDocIsEmpty(visit(docWithoutDirectiveSubtrees,{FragmentSpread:enterVisitor,FragmentDefinition:enterVisitor,OperationDefinition:{leave:function(node){if(node.variableDefinitions){var usedVariableNames_1=populateTransitiveVars(getInUseByOperationName(node.name&&node.name.value)).transitiveVars;if(usedVariableNames_1.size<node.variableDefinitions.length)return __assign(__assign({},node),{variableDefinitions:node.variableDefinitions.filter((function(varDef){return usedVariableNames_1.has(varDef.variable.name.value)}))})}}}}))}export var addTypenameToDocument=Object.assign((function(doc){return visit(doc,{SelectionSet:{enter:function(node,_key,parent){if(!parent||parent.kind!==Kind.OPERATION_DEFINITION){var selections=node.selections;if(selections)if(!selections.some((function(selection){return isField(selection)&&("__typename"===selection.name.value||0===selection.name.value.lastIndexOf("__",0))}))){var field=parent;if(!(isField(field)&&field.directives&&field.directives.some((function(d){return"export"===d.name.value}))))return __assign(__assign({},node),{selections:__spreadArray(__spreadArray([],selections,!0),[TYPENAME_FIELD],!1)})}}}}})}),{added:function(field){return field===TYPENAME_FIELD}});var connectionRemoveConfig={test:function(directive){var willRemove="connection"===directive.name.value;return willRemove&&(directive.arguments&&directive.arguments.some((function(arg){return"key"===arg.name.value}))||!1!==globalThis.__DEV__&&invariant.warn(85)),willRemove}};export function removeConnectionDirectiveFromDocument(doc){return removeDirectivesFromDocument([connectionRemoveConfig],checkDocument(doc))}function hasDirectivesInSelectionSet(directives,selectionSet,nestedCheck){return void 0===nestedCheck&&(nestedCheck=!0),!!selectionSet&&selectionSet.selections&&selectionSet.selections.some((function(selection){return hasDirectivesInSelection(directives,selection,nestedCheck)}))}function hasDirectivesInSelection(directives,selection,nestedCheck){return void 0===nestedCheck&&(nestedCheck=!0),!isField(selection)||!!selection.directives&&(selection.directives.some(getDirectiveMatcher(directives))||nestedCheck&&hasDirectivesInSelectionSet(directives,selection.selectionSet,nestedCheck))}function getArgumentMatcher(config){return function(argument){return config.some((function(aConfig){return argument.value&&argument.value.kind===Kind.VARIABLE&&argument.value.name&&(aConfig.name===argument.value.name.value||aConfig.test&&aConfig.test(argument))}))}}export function removeArgumentsFromDocument(config,doc){var argMatcher=getArgumentMatcher(config);return nullIfDocIsEmpty(visit(doc,{OperationDefinition:{enter:function(node){return __assign(__assign({},node),{variableDefinitions:node.variableDefinitions?node.variableDefinitions.filter((function(varDef){return!config.some((function(arg){return arg.name===varDef.variable.name.value}))})):[]})}},Field:{enter:function(node){if(config.some((function(argConfig){return argConfig.remove}))){var argMatchCount_1=0;if(node.arguments&&node.arguments.forEach((function(arg){argMatcher(arg)&&(argMatchCount_1+=1)})),1===argMatchCount_1)return null}}},Argument:{enter:function(node){if(argMatcher(node))return null}}}))}export function removeFragmentSpreadFromDocument(config,doc){function enter(node){if(config.some((function(def){return def.name===node.name.value})))return null}return nullIfDocIsEmpty(visit(doc,{FragmentSpread:{enter:enter},FragmentDefinition:{enter:enter}}))}export function buildQueryFromSelectionSet(document){return"query"===getMainDefinition(document).operation?document:visit(document,{OperationDefinition:{enter:function(node){return __assign(__assign({},node),{operation:"query"})}}})}export function removeClientSetsFromDocument(document){return checkDocument(document),removeDirectivesFromDocument([{test:function(directive){return"client"===directive.name.value},remove:!0}],document)}