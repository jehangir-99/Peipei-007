import{__assign,__spreadArray}from"tslib";import{isNonNullObject}from"./objects.js";var hasOwnProperty=Object.prototype.hasOwnProperty;export function mergeDeep(){for(var sources=[],_i=0;_i<arguments.length;_i++)sources[_i]=arguments[_i];return mergeDeepArray(sources)}export function mergeDeepArray(sources){var target=sources[0]||{},count=sources.length;if(count>1)for(var merger=new DeepMerger,i=1;i<count;++i)target=merger.merge(target,sources[i]);return target}var defaultReconciler=function(target,source,property){return this.merge(target[property],source[property])},DeepMerger=function(){function DeepMerger(reconciler){void 0===reconciler&&(reconciler=defaultReconciler),this.reconciler=reconciler,this.isObject=isNonNullObject,this.pastCopies=new Set}return DeepMerger.prototype.merge=function(target,source){for(var _this=this,context=[],_i=2;_i<arguments.length;_i++)context[_i-2]=arguments[_i];return isNonNullObject(source)&&isNonNullObject(target)?(Object.keys(source).forEach((function(sourceKey){if(hasOwnProperty.call(target,sourceKey)){var targetValue=target[sourceKey];if(source[sourceKey]!==targetValue){var result=_this.reconciler.apply(_this,__spreadArray([target,source,sourceKey],context,!1));result!==targetValue&&((target=_this.shallowCopyForMerge(target))[sourceKey]=result)}}else(target=_this.shallowCopyForMerge(target))[sourceKey]=source[sourceKey]})),target):source},DeepMerger.prototype.shallowCopyForMerge=function(value){return isNonNullObject(value)&&(this.pastCopies.has(value)||(value=Array.isArray(value)?value.slice(0):__assign({__proto__:Object.getPrototypeOf(value)},value),this.pastCopies.add(value))),value},DeepMerger}();export{DeepMerger};