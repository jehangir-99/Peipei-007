import{__assign}from"tslib";import*as React from"rehackt";import{mergeOptions}from"../../utilities/index.js";import{equal}from"@wry/equality";import{DocumentType,verifyDocumentType}from"../parser/index.js";import{ApolloError}from"../../errors/index.js";import{useApolloClient}from"./useApolloClient.js";export function useMutation(mutation,options){var client=useApolloClient(null==options?void 0:options.client);verifyDocumentType(mutation,DocumentType.Mutation);var _a=React.useState({called:!1,loading:!1,client:client}),result=_a[0],setResult=_a[1],ref=React.useRef({result:result,mutationId:0,isMounted:!0,client:client,mutation:mutation,options:options});Object.assign(ref.current,{client:client,options:options,mutation:mutation});var execute=React.useCallback((function(executeOptions){void 0===executeOptions&&(executeOptions={});var _a=ref.current,options=_a.options,mutation=_a.mutation,baseOptions=__assign(__assign({},options),{mutation:mutation}),client=executeOptions.client||ref.current.client;ref.current.result.loading||baseOptions.ignoreResults||!ref.current.isMounted||setResult(ref.current.result={loading:!0,error:void 0,data:void 0,called:!0,client:client});var mutationId=++ref.current.mutationId,clientOptions=mergeOptions(baseOptions,executeOptions);return client.mutate(clientOptions).then((function(response){var _a,_b,data=response.data,errors=response.errors,error=errors&&errors.length>0?new ApolloError({graphQLErrors:errors}):void 0,onError=executeOptions.onError||(null===(_a=ref.current.options)||void 0===_a?void 0:_a.onError);if(error&&onError&&onError(error,clientOptions),mutationId===ref.current.mutationId&&!clientOptions.ignoreResults){var result_1={called:!0,loading:!1,data:data,error:error,client:client};ref.current.isMounted&&!equal(ref.current.result,result_1)&&setResult(ref.current.result=result_1)}var onCompleted=executeOptions.onCompleted||(null===(_b=ref.current.options)||void 0===_b?void 0:_b.onCompleted);return error||null==onCompleted||onCompleted(response.data,clientOptions),response})).catch((function(error){var _a;if(mutationId===ref.current.mutationId&&ref.current.isMounted){var result_2={loading:!1,error:error,data:void 0,called:!0,client:client};equal(ref.current.result,result_2)||setResult(ref.current.result=result_2)}var onError=executeOptions.onError||(null===(_a=ref.current.options)||void 0===_a?void 0:_a.onError);if(onError)return onError(error,clientOptions),{data:void 0,errors:error};throw error}))}),[]),reset=React.useCallback((function(){if(ref.current.isMounted){var result_3={called:!1,loading:!1,client:client};Object.assign(ref.current,{mutationId:0,result:result_3}),setResult(result_3)}}),[]);return React.useEffect((function(){return ref.current.isMounted=!0,function(){ref.current.isMounted=!1}}),[]),[execute,__assign({reset:reset},result)]}