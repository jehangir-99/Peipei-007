import*as React from"rehackt";import{assertWrappedQueryRef,getWrappedPromise,unwrapQueryRef,updateWrappedQueryRef}from"../internal/index.js";import{__use,wrapHook}from"./internal/index.js";import{toApolloError}from"./useSuspenseQuery.js";import{useSyncExternalStore}from"./useSyncExternalStore.js";import{useApolloClient}from"./useApolloClient.js";export function useReadQuery(queryRef){var unwrapped=unwrapQueryRef(queryRef);return wrapHook("useReadQuery",_useReadQuery,unwrapped?unwrapped.observable:useApolloClient())(queryRef)}function _useReadQuery(queryRef){assertWrappedQueryRef(queryRef);var internalQueryRef=React.useMemo((function(){return unwrapQueryRef(queryRef)}),[queryRef]),getPromise=React.useCallback((function(){return getWrappedPromise(queryRef)}),[queryRef]);internalQueryRef.disposed&&(internalQueryRef.reinitialize(),updateWrappedQueryRef(queryRef,internalQueryRef.promise)),React.useEffect((function(){return internalQueryRef.retain()}),[internalQueryRef]);var promise=useSyncExternalStore(React.useCallback((function(forceUpdate){return internalQueryRef.listen((function(promise){updateWrappedQueryRef(queryRef,promise),forceUpdate()}))}),[internalQueryRef]),getPromise,getPromise),result=__use(promise);return React.useMemo((function(){return{data:result.data,networkStatus:result.networkStatus,error:toApolloError(result)}}),[result])}