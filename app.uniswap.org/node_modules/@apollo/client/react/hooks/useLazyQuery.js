import{__assign}from"tslib";import*as React from"rehackt";import{mergeOptions}from"../../utilities/index.js";import{useInternalState}from"./useQuery.js";import{useApolloClient}from"./useApolloClient.js";var EAGER_METHODS=["refetch","reobserve","fetchMore","updateQuery","startPolling","subscribeToMore"];export function useLazyQuery(query,options){var _a,execOptionsRef=React.useRef(),optionsRef=React.useRef(),queryRef=React.useRef(),merged=mergeOptions(options,execOptionsRef.current||{}),document=null!==(_a=null==merged?void 0:merged.query)&&void 0!==_a?_a:query;optionsRef.current=options,queryRef.current=document;var internalState=useInternalState(useApolloClient(options&&options.client),document),useQueryResult=internalState.useQuery(__assign(__assign({},merged),{skip:!execOptionsRef.current})),initialFetchPolicy=useQueryResult.observable.options.initialFetchPolicy||internalState.getDefaultFetchPolicy(),result=Object.assign(useQueryResult,{called:!!execOptionsRef.current}),eagerMethods=React.useMemo((function(){for(var eagerMethods={},_loop_1=function(key){var method=result[key];eagerMethods[key]=function(){return execOptionsRef.current||(execOptionsRef.current=Object.create(null),internalState.forceUpdateState()),method.apply(this,arguments)}},_i=0,EAGER_METHODS_1=EAGER_METHODS;_i<EAGER_METHODS_1.length;_i++){_loop_1(EAGER_METHODS_1[_i])}return eagerMethods}),[]);Object.assign(result,eagerMethods);var execute=React.useCallback((function(executeOptions){execOptionsRef.current=executeOptions?__assign(__assign({},executeOptions),{fetchPolicy:executeOptions.fetchPolicy||initialFetchPolicy}):{fetchPolicy:initialFetchPolicy};var options=mergeOptions(optionsRef.current,__assign({query:queryRef.current},execOptionsRef.current)),promise=internalState.executeQuery(__assign(__assign({},options),{skip:!1})).then((function(queryResult){return Object.assign(queryResult,eagerMethods)}));return promise.catch((function(){})),promise}),[]);return[execute,result]}