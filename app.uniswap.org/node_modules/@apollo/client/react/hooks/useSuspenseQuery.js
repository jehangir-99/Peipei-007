import{__assign,__spreadArray}from"tslib";import*as React from"rehackt";import{invariant}from"../../utilities/globals/index.js";import{ApolloError,NetworkStatus}from"../../core/index.js";import{isNonEmptyArray}from"../../utilities/index.js";import{useApolloClient}from"./useApolloClient.js";import{DocumentType,verifyDocumentType}from"../parser/index.js";import{__use,useDeepMemo,wrapHook}from"./internal/index.js";import{getSuspenseCache}from"../internal/index.js";import{canonicalStringify}from"../../cache/index.js";import{skipToken}from"./constants.js";export function useSuspenseQuery(query,options){return void 0===options&&(options=Object.create(null)),wrapHook("useSuspenseQuery",_useSuspenseQuery,useApolloClient("object"==typeof options?options.client:void 0))(query,options)}function _useSuspenseQuery(query,options){var client=useApolloClient(options.client),suspenseCache=getSuspenseCache(client),watchQueryOptions=useWatchQueryOptions({client:client,query:query,options:options}),fetchPolicy=watchQueryOptions.fetchPolicy,variables=watchQueryOptions.variables,_a=options.queryKey,queryKey=void 0===_a?[]:_a,cacheKey=__spreadArray([query,canonicalStringify(variables)],[].concat(queryKey),!0),queryRef=suspenseCache.getQueryRef(cacheKey,(function(){return client.watchQuery(watchQueryOptions)})),_b=React.useState([queryRef.key,queryRef.promise]),current=_b[0],setPromise=_b[1];current[0]!==queryRef.key&&(current[0]=queryRef.key,current[1]=queryRef.promise);var promise=current[1];queryRef.didChangeOptions(watchQueryOptions)&&(current[1]=promise=queryRef.applyOptions(watchQueryOptions)),React.useEffect((function(){var dispose=queryRef.retain(),removeListener=queryRef.listen((function(promise){setPromise([queryRef.key,promise])}));return function(){removeListener(),dispose()}}),[queryRef]);var skipResult=React.useMemo((function(){var error=toApolloError(queryRef.result);return{loading:!1,data:queryRef.result.data,networkStatus:error?NetworkStatus.error:NetworkStatus.ready,error:error}}),[queryRef.result]),result="standby"===fetchPolicy?skipResult:__use(promise),fetchMore=React.useCallback((function(options){var promise=queryRef.fetchMore(options);return setPromise([queryRef.key,queryRef.promise]),promise}),[queryRef]),refetch=React.useCallback((function(variables){var promise=queryRef.refetch(variables);return setPromise([queryRef.key,queryRef.promise]),promise}),[queryRef]),subscribeToMore=React.useCallback((function(options){return queryRef.observable.subscribeToMore(options)}),[queryRef]);return React.useMemo((function(){return{client:client,data:result.data,error:toApolloError(result),networkStatus:result.networkStatus,fetchMore:fetchMore,refetch:refetch,subscribeToMore:subscribeToMore}}),[client,fetchMore,refetch,result,subscribeToMore])}function validateOptions(options){var query=options.query,fetchPolicy=options.fetchPolicy,returnPartialData=options.returnPartialData;verifyDocumentType(query,DocumentType.Query),validateFetchPolicy(fetchPolicy),validatePartialDataReturn(fetchPolicy,returnPartialData)}function validateFetchPolicy(fetchPolicy){void 0===fetchPolicy&&(fetchPolicy="cache-first");invariant(["cache-first","network-only","no-cache","cache-and-network"].includes(fetchPolicy),56,fetchPolicy)}function validatePartialDataReturn(fetchPolicy,returnPartialData){"no-cache"===fetchPolicy&&returnPartialData&&!1!==globalThis.__DEV__&&invariant.warn(57)}export function toApolloError(result){return isNonEmptyArray(result.errors)?new ApolloError({graphQLErrors:result.errors}):result.error}export function useWatchQueryOptions(_a){var client=_a.client,query=_a.query,options=_a.options;return useDeepMemo((function(){var _a;if(options===skipToken)return{query:query,fetchPolicy:"standby"};var fetchPolicy=options.fetchPolicy||(null===(_a=client.defaultOptions.watchQuery)||void 0===_a?void 0:_a.fetchPolicy)||"cache-first",watchQueryOptions=__assign(__assign({},options),{fetchPolicy:fetchPolicy,query:query,notifyOnNetworkStatusChange:!1,nextFetchPolicy:void 0});return!1!==globalThis.__DEV__&&validateOptions(watchQueryOptions),options.skip&&(watchQueryOptions.fetchPolicy="standby"),watchQueryOptions}),[client,options,query])}