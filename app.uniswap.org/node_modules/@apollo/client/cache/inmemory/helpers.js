import{isReference,isField,DeepMerger,resultKeyNameFromField,shouldInclude,isNonNullObject,compact,createFragmentMap,getFragmentDefinitions,isArray}from"../../utilities/index.js";export var hasOwn=Object.prototype.hasOwnProperty;export function isNullish(value){return null==value}export{isArray};export function defaultDataIdFromObject(_a,context){var __typename=_a.__typename,id=_a.id,_id=_a._id;if("string"==typeof __typename&&(context&&(context.keyObject=isNullish(id)?isNullish(_id)?void 0:{_id:_id}:{id:id}),isNullish(id)&&!isNullish(_id)&&(id=_id),!isNullish(id)))return"".concat(__typename,":").concat("number"==typeof id||"string"==typeof id?id:JSON.stringify(id))}var defaultConfig={dataIdFromObject:defaultDataIdFromObject,addTypename:!0,resultCaching:!0,canonizeResults:!1};export function normalizeConfig(config){return compact(defaultConfig,config)}export function shouldCanonizeResults(config){var value=config.canonizeResults;return void 0===value?defaultConfig.canonizeResults:value}export function getTypenameFromStoreObject(store,objectOrReference){return isReference(objectOrReference)?store.get(objectOrReference.__ref,"__typename"):objectOrReference&&objectOrReference.__typename}export var TypeOrFieldNameRegExp=/^[_a-z][_0-9a-z]*/i;export function fieldNameFromStoreName(storeFieldName){var match=storeFieldName.match(TypeOrFieldNameRegExp);return match?match[0]:storeFieldName}export function selectionSetMatchesResult(selectionSet,result,variables){return!!isNonNullObject(result)&&(isArray(result)?result.every((function(item){return selectionSetMatchesResult(selectionSet,item,variables)})):selectionSet.selections.every((function(field){if(isField(field)&&shouldInclude(field,variables)){var key=resultKeyNameFromField(field);return hasOwn.call(result,key)&&(!field.selectionSet||selectionSetMatchesResult(field.selectionSet,result[key],variables))}return!0})))}export function storeValueIsStoreObject(value){return isNonNullObject(value)&&!isReference(value)&&!isArray(value)}export function makeProcessedFieldsMerger(){return new DeepMerger}export function extractFragmentContext(document,fragments){var fragmentMap=createFragmentMap(getFragmentDefinitions(document));return{fragmentMap:fragmentMap,lookupFragment:function(name){var def=fragmentMap[name];return!def&&fragments&&(def=fragments.lookup(name)),def||null}}}