import{invariant}from"../../utilities/globals/index.js";import{argumentsObjectFromField,DeepMerger,isNonEmptyArray,isNonNullObject}from"../../utilities/index.js";import{hasOwn,isArray}from"./helpers.js";var specifierInfoCache=Object.create(null);function lookupSpecifierInfo(spec){var cacheKey=JSON.stringify(spec);return specifierInfoCache[cacheKey]||(specifierInfoCache[cacheKey]=Object.create(null))}export function keyFieldsFnFromSpecifier(specifier){var info=lookupSpecifierInfo(specifier);return info.keyFieldsFn||(info.keyFieldsFn=function(object,context){var extract=function(from,key){return context.readField(key,from)},keyObject=context.keyObject=collectSpecifierPaths(specifier,(function(schemaKeyPath){var extracted=extractKeyPath(context.storeObject,schemaKeyPath,extract);return void 0===extracted&&object!==context.storeObject&&hasOwn.call(object,schemaKeyPath[0])&&(extracted=extractKeyPath(object,schemaKeyPath,extractKey)),invariant(void 0!==extracted,4,schemaKeyPath.join("."),object),extracted}));return"".concat(context.typename,":").concat(JSON.stringify(keyObject))})}export function keyArgsFnFromSpecifier(specifier){var info=lookupSpecifierInfo(specifier);return info.keyArgsFn||(info.keyArgsFn=function(args,_a){var field=_a.field,variables=_a.variables,fieldName=_a.fieldName,collected=collectSpecifierPaths(specifier,(function(keyPath){var firstKey=keyPath[0],firstChar=firstKey.charAt(0);if("@"!==firstChar)if("$"!==firstChar){if(args)return extractKeyPath(args,keyPath)}else{var variableName=firstKey.slice(1);if(variables&&hasOwn.call(variables,variableName)){var varKeyPath=keyPath.slice(0);return varKeyPath[0]=variableName,extractKeyPath(variables,varKeyPath)}}else if(field&&isNonEmptyArray(field.directives)){var directiveName_1=firstKey.slice(1),d=field.directives.find((function(d){return d.name.value===directiveName_1})),directiveArgs=d&&argumentsObjectFromField(d,variables);return directiveArgs&&extractKeyPath(directiveArgs,keyPath.slice(1))}})),suffix=JSON.stringify(collected);return(args||"{}"!==suffix)&&(fieldName+=":"+suffix),fieldName})}export function collectSpecifierPaths(specifier,extractor){var merger=new DeepMerger;return getSpecifierPaths(specifier).reduce((function(collected,path){var _a,toMerge=extractor(path);if(void 0!==toMerge){for(var i=path.length-1;i>=0;--i)(_a={})[path[i]]=toMerge,toMerge=_a;collected=merger.merge(collected,toMerge)}return collected}),Object.create(null))}export function getSpecifierPaths(spec){var info=lookupSpecifierInfo(spec);if(!info.paths){var paths_1=info.paths=[],currentPath_1=[];spec.forEach((function(s,i){isArray(s)?(getSpecifierPaths(s).forEach((function(p){return paths_1.push(currentPath_1.concat(p))})),currentPath_1.length=0):(currentPath_1.push(s),isArray(spec[i+1])||(paths_1.push(currentPath_1.slice(0)),currentPath_1.length=0))}))}return info.paths}function extractKey(object,key){return object[key]}export function extractKeyPath(object,path,extract){return extract=extract||extractKey,normalize(path.reduce((function reducer(obj,key){return isArray(obj)?obj.map((function(child){return reducer(child,key)})):obj&&extract(obj,key)}),object))}function normalize(value){return isNonNullObject(value)?isArray(value)?value.map(normalize):collectSpecifierPaths(Object.keys(value).sort(),(function(path){return extractKeyPath(value,path)})):value}