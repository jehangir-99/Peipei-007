import hashString from"@emotion/hash";import unitless from"@emotion/unitless";import memoize from"@emotion/memoize";var ILLEGAL_ESCAPE_SEQUENCE_ERROR="You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences",UNDEFINED_AS_OBJECT_KEY_ERROR="You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).",hyphenateRegex=/[A-Z]|^ms/g,animationRegex=/_EMO_([^_]+?)_([^]*?)_EMO_/g,isCustomProperty=function(property){return 45===property.charCodeAt(1)},isProcessableValue=function(value){return null!=value&&"boolean"!=typeof value},processStyleName=memoize((function(styleName){return isCustomProperty(styleName)?styleName:styleName.replace(hyphenateRegex,"-$&").toLowerCase()})),processStyleValue=function(key,value){switch(key){case"animation":case"animationName":if("string"==typeof value)return value.replace(animationRegex,(function(match,p1,p2){return cursor={name:p1,styles:p2,next:cursor},p1}))}return 1===unitless[key]||isCustomProperty(key)||"number"!=typeof value||0===value?value:value+"px"};if("production"!==process.env.NODE_ENV){var contentValuePattern=/(attr|calc|counters?|url)\(/,contentValues=["normal","none","counter","open-quote","close-quote","no-open-quote","no-close-quote","initial","inherit","unset"],oldProcessStyleValue=processStyleValue,msPattern=/^-ms-/,hyphenPattern=/-(.)/g,hyphenatedCache={};processStyleValue=function(key,value){"content"===key&&("string"!=typeof value||-1===contentValues.indexOf(value)&&!contentValuePattern.test(value)&&(value.charAt(0)!==value.charAt(value.length-1)||'"'!==value.charAt(0)&&"'"!==value.charAt(0)))&&console.error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\""+value+"\"'`");var processed=oldProcessStyleValue(key,value);return""===processed||isCustomProperty(key)||-1===key.indexOf("-")||void 0!==hyphenatedCache[key]||(hyphenatedCache[key]=!0,console.error("Using kebab-case for css properties in objects is not supported. Did you mean "+key.replace(msPattern,"ms-").replace(hyphenPattern,(function(str,_char){return _char.toUpperCase()}))+"?")),processed}}var shouldWarnAboutInterpolatingClassNameFromCss=!0;function handleInterpolation(mergedProps,registered,interpolation,couldBeSelectorInterpolation){if(null==interpolation)return"";if(void 0!==interpolation.__emotion_styles){if("production"!==process.env.NODE_ENV&&"NO_COMPONENT_SELECTOR"===interpolation.toString())throw new Error("Component selectors can only be used in conjunction with babel-plugin-emotion.");return interpolation}switch(typeof interpolation){case"boolean":return"";case"object":if(1===interpolation.anim)return cursor={name:interpolation.name,styles:interpolation.styles,next:cursor},interpolation.name;if(void 0!==interpolation.styles){var next=interpolation.next;if(void 0!==next)for(;void 0!==next;)cursor={name:next.name,styles:next.styles,next:cursor},next=next.next;var styles=interpolation.styles+";";return"production"!==process.env.NODE_ENV&&void 0!==interpolation.map&&(styles+=interpolation.map),styles}return createStringFromObject(mergedProps,registered,interpolation);case"function":if(void 0!==mergedProps){var previousCursor=cursor,result=interpolation(mergedProps);return cursor=previousCursor,handleInterpolation(mergedProps,registered,result,couldBeSelectorInterpolation)}"production"!==process.env.NODE_ENV&&console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");break;case"string":if("production"!==process.env.NODE_ENV){var matched=[],replaced=interpolation.replace(animationRegex,(function(match,p1,p2){var fakeVarName="animation"+matched.length;return matched.push("const "+fakeVarName+" = keyframes`"+p2.replace(/^@keyframes animation-\w+/,"")+"`"),"${"+fakeVarName+"}"}));matched.length&&console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n"+[].concat(matched,["`"+replaced+"`"]).join("\n")+"\n\nYou should wrap it with `css` like this:\n\ncss`"+replaced+"`")}}if(null==registered)return interpolation;var cached=registered[interpolation];return"production"!==process.env.NODE_ENV&&couldBeSelectorInterpolation&&shouldWarnAboutInterpolatingClassNameFromCss&&void 0!==cached&&(console.error("Interpolating a className from css`` is not recommended and will cause problems with composition.\nInterpolating a className from css`` will be completely unsupported in a future major version of Emotion"),shouldWarnAboutInterpolatingClassNameFromCss=!1),void 0===cached||couldBeSelectorInterpolation?interpolation:cached}function createStringFromObject(mergedProps,registered,obj){var string="";if(Array.isArray(obj))for(var i=0;i<obj.length;i++)string+=handleInterpolation(mergedProps,registered,obj[i],!1);else for(var _key in obj){var value=obj[_key];if("object"!=typeof value)null!=registered&&void 0!==registered[value]?string+=_key+"{"+registered[value]+"}":isProcessableValue(value)&&(string+=processStyleName(_key)+":"+processStyleValue(_key,value)+";");else{if("NO_COMPONENT_SELECTOR"===_key&&"production"!==process.env.NODE_ENV)throw new Error("Component selectors can only be used in conjunction with babel-plugin-emotion.");if(!Array.isArray(value)||"string"!=typeof value[0]||null!=registered&&void 0!==registered[value[0]]){var interpolated=handleInterpolation(mergedProps,registered,value,!1);switch(_key){case"animation":case"animationName":string+=processStyleName(_key)+":"+interpolated+";";break;default:"production"!==process.env.NODE_ENV&&"undefined"===_key&&console.error(UNDEFINED_AS_OBJECT_KEY_ERROR),string+=_key+"{"+interpolated+"}"}}else for(var _i=0;_i<value.length;_i++)isProcessableValue(value[_i])&&(string+=processStyleName(_key)+":"+processStyleValue(_key,value[_i])+";")}}return string}var sourceMapPattern,cursor,labelPattern=/label:\s*([^\s;\n{]+)\s*;/g;"production"!==process.env.NODE_ENV&&(sourceMapPattern=/\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//);var serializeStyles=function(args,registered,mergedProps){if(1===args.length&&"object"==typeof args[0]&&null!==args[0]&&void 0!==args[0].styles)return args[0];var stringMode=!0,styles="";cursor=void 0;var sourceMap,strings=args[0];null==strings||void 0===strings.raw?(stringMode=!1,styles+=handleInterpolation(mergedProps,registered,strings,!1)):("production"!==process.env.NODE_ENV&&void 0===strings[0]&&console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR),styles+=strings[0]);for(var i=1;i<args.length;i++)styles+=handleInterpolation(mergedProps,registered,args[i],46===styles.charCodeAt(styles.length-1)),stringMode&&("production"!==process.env.NODE_ENV&&void 0===strings[i]&&console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR),styles+=strings[i]);"production"!==process.env.NODE_ENV&&(styles=styles.replace(sourceMapPattern,(function(match){return sourceMap=match,""}))),labelPattern.lastIndex=0;for(var match,identifierName="";null!==(match=labelPattern.exec(styles));)identifierName+="-"+match[1];var name=hashString(styles)+identifierName;return"production"!==process.env.NODE_ENV?{name:name,styles:styles,map:sourceMap,next:cursor,toString:function(){return"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."}}:{name:name,styles:styles,next:cursor}};export{serializeStyles};