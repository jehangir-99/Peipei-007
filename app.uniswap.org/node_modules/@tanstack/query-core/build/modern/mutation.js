import{notifyManager}from"./notifyManager.js";import{Removable}from"./removable.js";import{canFetch,createRetryer}from"./retryer.js";var Mutation=class extends Removable{#observers;#defaultOptions;#mutationCache;#retryer;constructor(config){super(),this.mutationId=config.mutationId,this.#defaultOptions=config.defaultOptions,this.#mutationCache=config.mutationCache,this.#observers=[],this.state=config.state||getDefaultState(),this.setOptions(config.options),this.scheduleGc()}setOptions(options){this.options={...this.#defaultOptions,...options},this.updateGcTime(this.options.gcTime)}get meta(){return this.options.meta}addObserver(observer){this.#observers.includes(observer)||(this.#observers.push(observer),this.clearGcTimeout(),this.#mutationCache.notify({type:"observerAdded",mutation:this,observer:observer}))}removeObserver(observer){this.#observers=this.#observers.filter((x=>x!==observer)),this.scheduleGc(),this.#mutationCache.notify({type:"observerRemoved",mutation:this,observer:observer})}optionalRemove(){this.#observers.length||("pending"===this.state.status?this.scheduleGc():this.#mutationCache.remove(this))}continue(){return this.#retryer?.continue()??this.execute(this.state.variables)}async execute(variables){const executeMutation=()=>(this.#retryer=createRetryer({fn:()=>this.options.mutationFn?this.options.mutationFn(variables):Promise.reject(new Error("No mutationFn found")),onFail:(failureCount,error)=>{this.#dispatch({type:"failed",failureCount:failureCount,error:error})},onPause:()=>{this.#dispatch({type:"pause"})},onContinue:()=>{this.#dispatch({type:"continue"})},retry:this.options.retry??0,retryDelay:this.options.retryDelay,networkMode:this.options.networkMode}),this.#retryer.promise),restored="pending"===this.state.status;try{if(!restored){this.#dispatch({type:"pending",variables:variables}),await(this.#mutationCache.config.onMutate?.(variables,this));const context=await(this.options.onMutate?.(variables));context!==this.state.context&&this.#dispatch({type:"pending",context:context,variables:variables})}const data=await executeMutation();return await(this.#mutationCache.config.onSuccess?.(data,variables,this.state.context,this)),await(this.options.onSuccess?.(data,variables,this.state.context)),await(this.#mutationCache.config.onSettled?.(data,null,this.state.variables,this.state.context,this)),await(this.options.onSettled?.(data,null,variables,this.state.context)),this.#dispatch({type:"success",data:data}),data}catch(error){try{throw await(this.#mutationCache.config.onError?.(error,variables,this.state.context,this)),await(this.options.onError?.(error,variables,this.state.context)),await(this.#mutationCache.config.onSettled?.(void 0,error,this.state.variables,this.state.context,this)),await(this.options.onSettled?.(void 0,error,variables,this.state.context)),error}finally{this.#dispatch({type:"error",error:error})}}}#dispatch(action){this.state=(state=>{switch(action.type){case"failed":return{...state,failureCount:action.failureCount,failureReason:action.error};case"pause":return{...state,isPaused:!0};case"continue":return{...state,isPaused:!1};case"pending":return{...state,context:action.context,data:void 0,failureCount:0,failureReason:null,error:null,isPaused:!canFetch(this.options.networkMode),status:"pending",variables:action.variables,submittedAt:Date.now()};case"success":return{...state,data:action.data,failureCount:0,failureReason:null,error:null,status:"success",isPaused:!1};case"error":return{...state,data:void 0,error:action.error,failureCount:state.failureCount+1,failureReason:action.error,isPaused:!1,status:"error"}}})(this.state),notifyManager.batch((()=>{this.#observers.forEach((observer=>{observer.onMutationUpdate(action)})),this.#mutationCache.notify({mutation:this,type:"updated",action:action})}))}};function getDefaultState(){return{context:void 0,data:void 0,error:null,failureCount:0,failureReason:null,isPaused:!1,status:"idle",variables:void 0,submittedAt:0}}export{Mutation,getDefaultState};