import{hashQueryKeyByOptions,matchQuery}from"./utils.js";import{Query}from"./query.js";import{notifyManager}from"./notifyManager.js";import{Subscribable}from"./subscribable.js";var QueryCache=class extends Subscribable{constructor(config={}){super(),this.config=config,this.#queries=new Map}#queries;build(client,options,state){const queryKey=options.queryKey,queryHash=options.queryHash??hashQueryKeyByOptions(queryKey,options);let query=this.get(queryHash);return query||(query=new Query({cache:this,queryKey:queryKey,queryHash:queryHash,options:client.defaultQueryOptions(options),state:state,defaultOptions:client.getQueryDefaults(queryKey)}),this.add(query)),query}add(query){this.#queries.has(query.queryHash)||(this.#queries.set(query.queryHash,query),this.notify({type:"added",query:query}))}remove(query){const queryInMap=this.#queries.get(query.queryHash);queryInMap&&(query.destroy(),queryInMap===query&&this.#queries.delete(query.queryHash),this.notify({type:"removed",query:query}))}clear(){notifyManager.batch((()=>{this.getAll().forEach((query=>{this.remove(query)}))}))}get(queryHash){return this.#queries.get(queryHash)}getAll(){return[...this.#queries.values()]}find(filters){const defaultedFilters={exact:!0,...filters};return this.getAll().find((query=>matchQuery(defaultedFilters,query)))}findAll(filters={}){const queries=this.getAll();return Object.keys(filters).length>0?queries.filter((query=>matchQuery(filters,query))):queries}notify(event){notifyManager.batch((()=>{this.listeners.forEach((listener=>{listener(event)}))}))}onFocus(){notifyManager.batch((()=>{this.getAll().forEach((query=>{query.onFocus()}))}))}onOnline(){notifyManager.batch((()=>{this.getAll().forEach((query=>{query.onOnline()}))}))}};export{QueryCache};