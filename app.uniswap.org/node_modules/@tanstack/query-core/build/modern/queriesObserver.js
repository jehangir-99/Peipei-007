import{notifyManager}from"./notifyManager.js";import{QueryObserver}from"./queryObserver.js";import{Subscribable}from"./subscribable.js";import{replaceEqualDeep}from"./utils.js";function difference(array1,array2){return array1.filter((x=>!array2.includes(x)))}function replaceAt(array,index,value){const copy=array.slice(0);return copy[index]=value,copy}var QueriesObserver=class extends Subscribable{#client;#result;#queries;#observers;#combinedResult;constructor(client,queries,_options){super(),this.#client=client,this.#queries=[],this.#observers=[],this.#result=[],this.setQueries(queries)}onSubscribe(){1===this.listeners.size&&this.#observers.forEach((observer=>{observer.subscribe((result=>{this.#onUpdate(observer,result)}))}))}onUnsubscribe(){this.listeners.size||this.destroy()}destroy(){this.listeners=new Set,this.#observers.forEach((observer=>{observer.destroy()}))}setQueries(queries,_options,notifyOptions){this.#queries=queries,notifyManager.batch((()=>{const prevObservers=this.#observers,newObserverMatches=this.#findMatchingObservers(this.#queries);newObserverMatches.forEach((match=>match.observer.setOptions(match.defaultedQueryOptions,notifyOptions)));const newObservers=newObserverMatches.map((match=>match.observer)),newResult=newObservers.map((observer=>observer.getCurrentResult())),hasIndexChange=newObservers.some(((observer,index)=>observer!==prevObservers[index]));(prevObservers.length!==newObservers.length||hasIndexChange)&&(this.#observers=newObservers,this.#result=newResult,this.hasListeners()&&(difference(prevObservers,newObservers).forEach((observer=>{observer.destroy()})),difference(newObservers,prevObservers).forEach((observer=>{observer.subscribe((result=>{this.#onUpdate(observer,result)}))})),this.#notify()))}))}getCurrentResult(){return this.#result}getQueries(){return this.#observers.map((observer=>observer.getCurrentQuery()))}getObservers(){return this.#observers}getOptimisticResult(queries,combine){const matches=this.#findMatchingObservers(queries),result=matches.map((match=>match.observer.getOptimisticResult(match.defaultedQueryOptions)));return[result,r=>this.#combineResult(r??result,combine),()=>matches.map(((match,index)=>{const observerResult=result[index];return match.defaultedQueryOptions.notifyOnChangeProps?observerResult:match.observer.trackResult(observerResult,(accessedProp=>{matches.forEach((m=>{m.observer.trackProp(accessedProp)}))}))}))]}#combineResult(input,combine){return combine?replaceEqualDeep(this.#combinedResult,combine(input)):input}#findMatchingObservers(queries){const prevObservers=this.#observers,prevObserversMap=new Map(prevObservers.map((observer=>[observer.options.queryHash,observer]))),defaultedQueryOptions=queries.map((options=>this.#client.defaultQueryOptions(options))),matchingObservers=defaultedQueryOptions.flatMap((defaultedOptions=>{const match=prevObserversMap.get(defaultedOptions.queryHash);return null!=match?[{defaultedQueryOptions:defaultedOptions,observer:match}]:[]})),matchedQueryHashes=new Set(matchingObservers.map((match=>match.defaultedQueryOptions.queryHash))),unmatchedQueries=defaultedQueryOptions.filter((defaultedOptions=>!matchedQueryHashes.has(defaultedOptions.queryHash))),getObserver=options=>{const defaultedOptions=this.#client.defaultQueryOptions(options);return this.#observers.find((o=>o.options.queryHash===defaultedOptions.queryHash))??new QueryObserver(this.#client,defaultedOptions)},newOrReusedObservers=unmatchedQueries.map((options=>({defaultedQueryOptions:options,observer:getObserver(options)})));return matchingObservers.concat(newOrReusedObservers).sort(((a,b)=>defaultedQueryOptions.indexOf(a.defaultedQueryOptions)-defaultedQueryOptions.indexOf(b.defaultedQueryOptions)))}#onUpdate(observer,result){const index=this.#observers.indexOf(observer);-1!==index&&(this.#result=replaceAt(this.#result,index,result),this.#notify())}#notify(){notifyManager.batch((()=>{this.listeners.forEach((listener=>{listener(this.#result)}))}))}};export{QueriesObserver};