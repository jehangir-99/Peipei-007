function createNotifyManager(){let queue=[],transactions=0,notifyFn=callback=>{callback()},batchNotifyFn=callback=>{callback()},scheduleFn=cb=>setTimeout(cb,0);const schedule=callback=>{transactions?queue.push(callback):scheduleFn((()=>{notifyFn(callback)}))},flush=()=>{const originalQueue=queue;queue=[],originalQueue.length&&scheduleFn((()=>{batchNotifyFn((()=>{originalQueue.forEach((callback=>{notifyFn(callback)}))}))}))};return{batch:callback=>{let result;transactions++;try{result=callback()}finally{transactions--,transactions||flush()}return result},batchCalls:callback=>(...args)=>{schedule((()=>{callback(...args)}))},schedule:schedule,setNotifyFunction:fn=>{notifyFn=fn},setBatchNotifyFunction:fn=>{batchNotifyFn=fn},setScheduler:fn=>{scheduleFn=fn}}}var notifyManager=createNotifyManager();export{createNotifyManager,notifyManager};