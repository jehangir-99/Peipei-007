import{focusManager}from"./focusManager.js";import{onlineManager}from"./onlineManager.js";import{isServer,sleep}from"./utils.js";function defaultRetryDelay(failureCount){return Math.min(1e3*2**failureCount,3e4)}function canFetch(networkMode){return"online"!==(networkMode??"online")||onlineManager.isOnline()}var CancelledError=class{constructor(options){this.revert=options?.revert,this.silent=options?.silent}};function isCancelledError(value){return value instanceof CancelledError}function createRetryer(config){let continueFn,promiseResolve,promiseReject,isRetryCancelled=!1,failureCount=0,isResolved=!1;const promise=new Promise(((outerResolve,outerReject)=>{promiseResolve=outerResolve,promiseReject=outerReject})),shouldPause=()=>!focusManager.isFocused()||"always"!==config.networkMode&&!onlineManager.isOnline(),resolve=value=>{isResolved||(isResolved=!0,config.onSuccess?.(value),continueFn?.(),promiseResolve(value))},reject=value=>{isResolved||(isResolved=!0,config.onError?.(value),continueFn?.(),promiseReject(value))},pause=()=>new Promise((continueResolve=>{continueFn=value=>{const canContinue=isResolved||!shouldPause();return canContinue&&continueResolve(value),canContinue},config.onPause?.()})).then((()=>{continueFn=void 0,isResolved||config.onContinue?.()})),run=()=>{if(isResolved)return;let promiseOrValue;try{promiseOrValue=config.fn()}catch(error){promiseOrValue=Promise.reject(error)}Promise.resolve(promiseOrValue).then(resolve).catch((error=>{if(isResolved)return;const retry=config.retry??(isServer?0:3),retryDelay=config.retryDelay??defaultRetryDelay,delay="function"==typeof retryDelay?retryDelay(failureCount,error):retryDelay,shouldRetry=!0===retry||"number"==typeof retry&&failureCount<retry||"function"==typeof retry&&retry(failureCount,error);!isRetryCancelled&&shouldRetry?(failureCount++,config.onFail?.(failureCount,error),sleep(delay).then((()=>{if(shouldPause())return pause()})).then((()=>{isRetryCancelled?reject(error):run()}))):reject(error)}))};return canFetch(config.networkMode)?run():pause().then(run),{promise:promise,cancel:cancelOptions=>{isResolved||(reject(new CancelledError(cancelOptions)),config.abort?.())},continue:()=>{const didContinue=continueFn?.();return didContinue?promise:Promise.resolve()},cancelRetry:()=>{isRetryCancelled=!0},continueRetry:()=>{isRetryCancelled=!1}}}export{CancelledError,canFetch,createRetryer,isCancelledError};