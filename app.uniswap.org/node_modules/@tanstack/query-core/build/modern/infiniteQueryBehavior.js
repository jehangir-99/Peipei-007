import{addToEnd,addToStart,skipToken}from"./utils.js";function infiniteQueryBehavior(pages){return{onFetch:(context,query)=>{const fetchFn=async()=>{const options=context.options,direction=context.fetchOptions?.meta?.fetchMore?.direction,oldPages=context.state.data?.pages||[],oldPageParams=context.state.data?.pageParams||[],empty={pages:[],pageParams:[]};let cancelled=!1;const queryFn=context.options.queryFn&&context.options.queryFn!==skipToken?context.options.queryFn:()=>("production"!==process.env.NODE_ENV&&context.options.queryFn===skipToken&&console.error(`Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${context.options.queryHash}'`),Promise.reject(new Error(`Missing queryFn: '${context.options.queryHash}'`))),fetchPage=async(data,param,previous)=>{if(cancelled)return Promise.reject();if(null==param&&data.pages.length)return Promise.resolve(data);const queryFnContext={queryKey:context.queryKey,pageParam:param,direction:previous?"backward":"forward",meta:context.options.meta};var object;object=queryFnContext,Object.defineProperty(object,"signal",{enumerable:!0,get:()=>(context.signal.aborted?cancelled=!0:context.signal.addEventListener("abort",(()=>{cancelled=!0})),context.signal)});const page=await queryFn(queryFnContext),{maxPages:maxPages}=context.options,addTo=previous?addToStart:addToEnd;return{pages:addTo(data.pages,page,maxPages),pageParams:addTo(data.pageParams,param,maxPages)}};let result;if(direction&&oldPages.length){const previous="backward"===direction,oldData={pages:oldPages,pageParams:oldPageParams},param=(previous?getPreviousPageParam:getNextPageParam)(options,oldData);result=await fetchPage(oldData,param,previous)}else{result=await fetchPage(empty,oldPageParams[0]??options.initialPageParam);const remainingPages=pages??oldPages.length;for(let i=1;i<remainingPages;i++){const param=getNextPageParam(options,result);result=await fetchPage(result,param)}}return result};context.options.persister?context.fetchFn=()=>context.options.persister?.(fetchFn,{queryKey:context.queryKey,meta:context.options.meta,signal:context.signal},query):context.fetchFn=fetchFn}}}function getNextPageParam(options,{pages:pages,pageParams:pageParams}){const lastIndex=pages.length-1;return options.getNextPageParam(pages[lastIndex],pages,pageParams[lastIndex],pageParams)}function getPreviousPageParam(options,{pages:pages,pageParams:pageParams}){return options.getPreviousPageParam?.(pages[0],pages,pageParams[0],pageParams)}function hasNextPage(options,data){return!!data&&null!=getNextPageParam(options,data)}function hasPreviousPage(options,data){return!(!data||!options.getPreviousPageParam)&&null!=getPreviousPageParam(options,data)}export{hasNextPage,hasPreviousPage,infiniteQueryBehavior};