import{functionalUpdate,hashKey,hashQueryKeyByOptions,noop,partialMatchKey,skipToken}from"./utils.js";import{QueryCache}from"./queryCache.js";import{MutationCache}from"./mutationCache.js";import{focusManager}from"./focusManager.js";import{onlineManager}from"./onlineManager.js";import{notifyManager}from"./notifyManager.js";import{infiniteQueryBehavior}from"./infiniteQueryBehavior.js";var QueryClient=class{#queryCache;#mutationCache;#defaultOptions;#queryDefaults;#mutationDefaults;#mountCount;#unsubscribeFocus;#unsubscribeOnline;constructor(config={}){this.#queryCache=config.queryCache||new QueryCache,this.#mutationCache=config.mutationCache||new MutationCache,this.#defaultOptions=config.defaultOptions||{},this.#queryDefaults=new Map,this.#mutationDefaults=new Map,this.#mountCount=0}mount(){this.#mountCount++,1===this.#mountCount&&(this.#unsubscribeFocus=focusManager.subscribe((async focused=>{focused&&(await this.resumePausedMutations(),this.#queryCache.onFocus())})),this.#unsubscribeOnline=onlineManager.subscribe((async online=>{online&&(await this.resumePausedMutations(),this.#queryCache.onOnline())})))}unmount(){this.#mountCount--,0===this.#mountCount&&(this.#unsubscribeFocus?.(),this.#unsubscribeFocus=void 0,this.#unsubscribeOnline?.(),this.#unsubscribeOnline=void 0)}isFetching(filters){return this.#queryCache.findAll({...filters,fetchStatus:"fetching"}).length}isMutating(filters){return this.#mutationCache.findAll({...filters,status:"pending"}).length}getQueryData(queryKey){const options=this.defaultQueryOptions({queryKey:queryKey});return this.#queryCache.get(options.queryHash)?.state.data}ensureQueryData(options){const cachedData=this.getQueryData(options.queryKey);if(void 0===cachedData)return this.fetchQuery(options);{const defaultedOptions=this.defaultQueryOptions(options),query=this.#queryCache.build(this,defaultedOptions);return options.revalidateIfStale&&query.isStaleByTime(defaultedOptions.staleTime)&&this.prefetchQuery(defaultedOptions),Promise.resolve(cachedData)}}getQueriesData(filters){return this.#queryCache.findAll(filters).map((({queryKey:queryKey,state:state})=>[queryKey,state.data]))}setQueryData(queryKey,updater,options){const defaultedOptions=this.defaultQueryOptions({queryKey:queryKey}),query=this.#queryCache.get(defaultedOptions.queryHash),prevData=query?.state.data,data=functionalUpdate(updater,prevData);if(void 0!==data)return this.#queryCache.build(this,defaultedOptions).setData(data,{...options,manual:!0})}setQueriesData(filters,updater,options){return notifyManager.batch((()=>this.#queryCache.findAll(filters).map((({queryKey:queryKey})=>[queryKey,this.setQueryData(queryKey,updater,options)]))))}getQueryState(queryKey){const options=this.defaultQueryOptions({queryKey:queryKey});return this.#queryCache.get(options.queryHash)?.state}removeQueries(filters){const queryCache=this.#queryCache;notifyManager.batch((()=>{queryCache.findAll(filters).forEach((query=>{queryCache.remove(query)}))}))}resetQueries(filters,options){const queryCache=this.#queryCache,refetchFilters={type:"active",...filters};return notifyManager.batch((()=>(queryCache.findAll(filters).forEach((query=>{query.reset()})),this.refetchQueries(refetchFilters,options))))}cancelQueries(filters={},cancelOptions={}){const defaultedCancelOptions={revert:!0,...cancelOptions},promises=notifyManager.batch((()=>this.#queryCache.findAll(filters).map((query=>query.cancel(defaultedCancelOptions)))));return Promise.all(promises).then(noop).catch(noop)}invalidateQueries(filters={},options={}){return notifyManager.batch((()=>{if(this.#queryCache.findAll(filters).forEach((query=>{query.invalidate()})),"none"===filters.refetchType)return Promise.resolve();const refetchFilters={...filters,type:filters.refetchType??filters.type??"active"};return this.refetchQueries(refetchFilters,options)}))}refetchQueries(filters={},options){const fetchOptions={...options,cancelRefetch:options?.cancelRefetch??!0},promises=notifyManager.batch((()=>this.#queryCache.findAll(filters).filter((query=>!query.isDisabled())).map((query=>{let promise=query.fetch(void 0,fetchOptions);return fetchOptions.throwOnError||(promise=promise.catch(noop)),"paused"===query.state.fetchStatus?Promise.resolve():promise}))));return Promise.all(promises).then(noop)}fetchQuery(options){const defaultedOptions=this.defaultQueryOptions(options);void 0===defaultedOptions.retry&&(defaultedOptions.retry=!1);const query=this.#queryCache.build(this,defaultedOptions);return query.isStaleByTime(defaultedOptions.staleTime)?query.fetch(defaultedOptions):Promise.resolve(query.state.data)}prefetchQuery(options){return this.fetchQuery(options).then(noop).catch(noop)}fetchInfiniteQuery(options){return options.behavior=infiniteQueryBehavior(options.pages),this.fetchQuery(options)}prefetchInfiniteQuery(options){return this.fetchInfiniteQuery(options).then(noop).catch(noop)}resumePausedMutations(){return onlineManager.isOnline()?this.#mutationCache.resumePausedMutations():Promise.resolve()}getQueryCache(){return this.#queryCache}getMutationCache(){return this.#mutationCache}getDefaultOptions(){return this.#defaultOptions}setDefaultOptions(options){this.#defaultOptions=options}setQueryDefaults(queryKey,options){this.#queryDefaults.set(hashKey(queryKey),{queryKey:queryKey,defaultOptions:options})}getQueryDefaults(queryKey){const defaults=[...this.#queryDefaults.values()];let result={};return defaults.forEach((queryDefault=>{partialMatchKey(queryKey,queryDefault.queryKey)&&(result={...result,...queryDefault.defaultOptions})})),result}setMutationDefaults(mutationKey,options){this.#mutationDefaults.set(hashKey(mutationKey),{mutationKey:mutationKey,defaultOptions:options})}getMutationDefaults(mutationKey){const defaults=[...this.#mutationDefaults.values()];let result={};return defaults.forEach((queryDefault=>{partialMatchKey(mutationKey,queryDefault.mutationKey)&&(result={...result,...queryDefault.defaultOptions})})),result}defaultQueryOptions(options){if(options._defaulted)return options;const defaultedOptions={...this.#defaultOptions.queries,...this.getQueryDefaults(options.queryKey),...options,_defaulted:!0};return defaultedOptions.queryHash||(defaultedOptions.queryHash=hashQueryKeyByOptions(defaultedOptions.queryKey,defaultedOptions)),void 0===defaultedOptions.refetchOnReconnect&&(defaultedOptions.refetchOnReconnect="always"!==defaultedOptions.networkMode),void 0===defaultedOptions.throwOnError&&(defaultedOptions.throwOnError=!!defaultedOptions.suspense),!defaultedOptions.networkMode&&defaultedOptions.persister&&(defaultedOptions.networkMode="offlineFirst"),!0!==defaultedOptions.enabled&&defaultedOptions.queryFn===skipToken&&(defaultedOptions.enabled=!1),defaultedOptions}defaultMutationOptions(options){return options?._defaulted?options:{...this.#defaultOptions.mutations,...options?.mutationKey&&this.getMutationDefaults(options.mutationKey),...options,_defaulted:!0}}clear(){this.#queryCache.clear(),this.#mutationCache.clear()}};export{QueryClient};