import{defaultMemoize,defaultEqualityCheck}from"./defaultMemoize";export{defaultMemoize,defaultEqualityCheck};function getDependencies(funcs){var dependencies=Array.isArray(funcs[0])?funcs[0]:funcs;if(!dependencies.every((function(dep){return"function"==typeof dep}))){var dependencyTypes=dependencies.map((function(dep){return"function"==typeof dep?"function "+(dep.name||"unnamed")+"()":typeof dep})).join(", ");throw new Error("createSelector expects all input-selectors to be functions, but received the following types: ["+dependencyTypes+"]")}return dependencies}export function createSelectorCreator(memoize){for(var _len=arguments.length,memoizeOptionsFromArgs=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)memoizeOptionsFromArgs[_key-1]=arguments[_key];return function(){for(var _len2=arguments.length,funcs=new Array(_len2),_key2=0;_key2<_len2;_key2++)funcs[_key2]=arguments[_key2];var _lastResult,_recomputations=0,directlyPassedOptions={memoizeOptions:void 0},resultFunc=funcs.pop();if("object"==typeof resultFunc&&(directlyPassedOptions=resultFunc,resultFunc=funcs.pop()),"function"!=typeof resultFunc)throw new Error("createSelector expects an output function after the inputs, but received: ["+typeof resultFunc+"]");var _directlyPassedOption2=directlyPassedOptions.memoizeOptions,memoizeOptions=void 0===_directlyPassedOption2?memoizeOptionsFromArgs:_directlyPassedOption2,finalMemoizeOptions=Array.isArray(memoizeOptions)?memoizeOptions:[memoizeOptions],dependencies=getDependencies(funcs),memoizedResultFunc=memoize.apply(void 0,[function(){return _recomputations++,resultFunc.apply(null,arguments)}].concat(finalMemoizeOptions)),selector=memoize((function(){for(var params=[],length=dependencies.length,i=0;i<length;i++)params.push(dependencies[i].apply(null,arguments));return _lastResult=memoizedResultFunc.apply(null,params)}));return Object.assign(selector,{resultFunc:resultFunc,memoizedResultFunc:memoizedResultFunc,dependencies:dependencies,lastResult:function(){return _lastResult},recomputations:function(){return _recomputations},resetRecomputations:function(){return _recomputations=0}}),selector}}export var createSelector=createSelectorCreator(defaultMemoize);export var createStructuredSelector=function(selectors,selectorCreator){if(void 0===selectorCreator&&(selectorCreator=createSelector),"object"!=typeof selectors)throw new Error("createStructuredSelector expects first argument to be an object where each property is a selector, instead received a "+typeof selectors);var objectKeys=Object.keys(selectors),resultSelector=selectorCreator(objectKeys.map((function(key){return selectors[key]})),(function(){for(var _len3=arguments.length,values=new Array(_len3),_key3=0;_key3<_len3;_key3++)values[_key3]=arguments[_key3];return values.reduce((function(composition,value,index){return composition[objectKeys[index]]=value,composition}),{})}));return resultSelector};