const SemVer=require("../classes/semver"),Range=require("../classes/range"),gt=require("../functions/gt"),minVersion=(range,loose)=>{range=new Range(range,loose);let minver=new SemVer("0.0.0");if(range.test(minver))return minver;if(minver=new SemVer("0.0.0-0"),range.test(minver))return minver;minver=null;for(let i=0;i<range.set.length;++i){const comparators=range.set[i];let setMin=null;comparators.forEach((comparator=>{const compver=new SemVer(comparator.semver.version);switch(comparator.operator){case">":0===compver.prerelease.length?compver.patch++:compver.prerelease.push(0),compver.raw=compver.format();case"":case">=":setMin&&!gt(compver,setMin)||(setMin=compver);break;case"<":case"<=":break;default:throw new Error(`Unexpected operation: ${comparator.operator}`)}})),!setMin||minver&&!gt(minver,setMin)||(minver=setMin)}return minver&&range.test(minver)?minver:null};module.exports=minVersion;