import{ticks,tickIncrement}from"d3-array";import continuous,{copy}from"./continuous.js";import{initRange}from"./init.js";import tickFormat from"./tickFormat.js";export function linearish(scale){var domain=scale.domain;return scale.ticks=function(count){var d=domain();return ticks(d[0],d[d.length-1],null==count?10:count)},scale.tickFormat=function(count,specifier){var d=domain();return tickFormat(d[0],d[d.length-1],null==count?10:count,specifier)},scale.nice=function(count){null==count&&(count=10);var prestep,step,d=domain(),i0=0,i1=d.length-1,start=d[i0],stop=d[i1],maxIter=10;for(stop<start&&(step=start,start=stop,stop=step,step=i0,i0=i1,i1=step);maxIter-- >0;){if((step=tickIncrement(start,stop,count))===prestep)return d[i0]=start,d[i1]=stop,domain(d);if(step>0)start=Math.floor(start/step)*step,stop=Math.ceil(stop/step)*step;else{if(!(step<0))break;start=Math.ceil(start*step)/step,stop=Math.floor(stop*step)/step}prestep=step}return scale},scale}export default function linear(){var scale=continuous();return scale.copy=function(){return copy(scale,linear())},initRange.apply(scale,arguments),linearish(scale)}