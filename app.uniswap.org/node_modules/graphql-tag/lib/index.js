import{__assign}from"tslib";import{parse}from"graphql";var docCache=new Map,fragmentSourceMap=new Map,printFragmentWarnings=!0,experimentalFragmentVariables=!1;function normalize(string){return string.replace(/[\s,]+/g," ").trim()}function cacheKeyFromLoc(loc){return normalize(loc.source.body.substring(loc.start,loc.end))}function processFragments(ast){var seenKeys=new Set,definitions=[];return ast.definitions.forEach((function(fragmentDefinition){if("FragmentDefinition"===fragmentDefinition.kind){var fragmentName=fragmentDefinition.name.value,sourceKey=cacheKeyFromLoc(fragmentDefinition.loc),sourceKeySet=fragmentSourceMap.get(fragmentName);sourceKeySet&&!sourceKeySet.has(sourceKey)?printFragmentWarnings&&console.warn("Warning: fragment with name "+fragmentName+" already exists.\ngraphql-tag enforces all fragment names across your application to be unique; read more about\nthis in the docs: http://dev.apollodata.com/core/fragments.html#unique-names"):sourceKeySet||fragmentSourceMap.set(fragmentName,sourceKeySet=new Set),sourceKeySet.add(sourceKey),seenKeys.has(sourceKey)||(seenKeys.add(sourceKey),definitions.push(fragmentDefinition))}else definitions.push(fragmentDefinition)})),__assign(__assign({},ast),{definitions:definitions})}function stripLoc(doc){var workSet=new Set(doc.definitions);workSet.forEach((function(node){node.loc&&delete node.loc,Object.keys(node).forEach((function(key){var value=node[key];value&&"object"==typeof value&&workSet.add(value)}))}));var loc=doc.loc;return loc&&(delete loc.startToken,delete loc.endToken),doc}function parseDocument(source){var cacheKey=normalize(source);if(!docCache.has(cacheKey)){var parsed=parse(source,{experimentalFragmentVariables:experimentalFragmentVariables,allowLegacyFragmentVariables:experimentalFragmentVariables});if(!parsed||"Document"!==parsed.kind)throw new Error("Not a valid GraphQL document.");docCache.set(cacheKey,stripLoc(processFragments(parsed)))}return docCache.get(cacheKey)}export function gql(literals){for(var args=[],_i=1;_i<arguments.length;_i++)args[_i-1]=arguments[_i];"string"==typeof literals&&(literals=[literals]);var result=literals[0];return args.forEach((function(arg,i){arg&&"Document"===arg.kind?result+=arg.loc.source.body:result+=arg,result+=literals[i+1]})),parseDocument(result)}export function resetCaches(){docCache.clear(),fragmentSourceMap.clear()}export function disableFragmentWarnings(){printFragmentWarnings=!1}export function enableExperimentalFragmentVariables(){experimentalFragmentVariables=!0}export function disableExperimentalFragmentVariables(){experimentalFragmentVariables=!1}var extras={gql:gql,resetCaches:resetCaches,disableFragmentWarnings:disableFragmentWarnings,enableExperimentalFragmentVariables:enableExperimentalFragmentVariables,disableExperimentalFragmentVariables:disableExperimentalFragmentVariables};!function(gql_1){gql_1.gql=extras.gql,gql_1.resetCaches=extras.resetCaches,gql_1.disableFragmentWarnings=extras.disableFragmentWarnings,gql_1.enableExperimentalFragmentVariables=extras.enableExperimentalFragmentVariables,gql_1.disableExperimentalFragmentVariables=extras.disableExperimentalFragmentVariables}(gql||(gql={})),gql.default=gql;export default gql;