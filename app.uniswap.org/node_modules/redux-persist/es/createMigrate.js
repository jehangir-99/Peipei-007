import{DEFAULT_VERSION}from"./constants";export default function createMigrate(migrations,config){var debug=(config||{}).debug;return function(state,currentVersion){if(!state)return"production"!==process.env.NODE_ENV&&debug&&console.log("redux-persist: no inbound state, skipping migration"),Promise.resolve(void 0);var inboundVersion=state._persist&&void 0!==state._persist.version?state._persist.version:DEFAULT_VERSION;if(inboundVersion===currentVersion)return"production"!==process.env.NODE_ENV&&debug&&console.log("redux-persist: versions match, noop migration"),Promise.resolve(state);if(inboundVersion>currentVersion)return"production"!==process.env.NODE_ENV&&console.error("redux-persist: downgrading version is not supported"),Promise.resolve(state);var migrationKeys=Object.keys(migrations).map((function(ver){return parseInt(ver)})).filter((function(key){return currentVersion>=key&&key>inboundVersion})).sort((function(a,b){return a-b}));"production"!==process.env.NODE_ENV&&debug&&console.log("redux-persist: migrationKeys",migrationKeys);try{var migratedState=migrationKeys.reduce((function(state,versionKey){return"production"!==process.env.NODE_ENV&&debug&&console.log("redux-persist: running migration for versionKey",versionKey),migrations[versionKey](state)}),state);return Promise.resolve(migratedState)}catch(err){return Promise.reject(err)}}}