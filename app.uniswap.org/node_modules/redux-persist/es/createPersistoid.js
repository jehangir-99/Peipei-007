import{KEY_PREFIX,REHYDRATE}from"./constants";export default function createPersistoid(config){var serialize,blacklist=config.blacklist||null,whitelist=config.whitelist||null,transforms=config.transforms||[],throttle=config.throttle||0,storageKey="".concat(void 0!==config.keyPrefix?config.keyPrefix:KEY_PREFIX).concat(config.key),storage=config.storage;serialize=!1===config.serialize?function(x){return x}:"function"==typeof config.serialize?config.serialize:defaultSerialize;var writeFailHandler=config.writeFailHandler||null,lastState={},stagedState={},keysToProcess=[],timeIterator=null,writePromise=null;function processNextKey(){if(0===keysToProcess.length)return timeIterator&&clearInterval(timeIterator),void(timeIterator=null);var key=keysToProcess.shift(),endState=transforms.reduce((function(subState,transformer){return transformer.in(subState,key,lastState)}),lastState[key]);if(void 0!==endState)try{stagedState[key]=serialize(endState)}catch(err){console.error("redux-persist/createPersistoid: error serializing state",err)}else delete stagedState[key];0===keysToProcess.length&&(Object.keys(stagedState).forEach((function(key){void 0===lastState[key]&&delete stagedState[key]})),writePromise=storage.setItem(storageKey,serialize(stagedState)).catch(onWriteFail))}function passWhitelistBlacklist(key){return(!whitelist||-1!==whitelist.indexOf(key)||"_persist"===key)&&(!blacklist||-1===blacklist.indexOf(key))}function onWriteFail(err){writeFailHandler&&writeFailHandler(err),err&&"production"!==process.env.NODE_ENV&&console.error("Error storing data",err)}return{update:function(state){Object.keys(state).forEach((function(key){passWhitelistBlacklist(key)&&lastState[key]!==state[key]&&-1===keysToProcess.indexOf(key)&&keysToProcess.push(key)})),Object.keys(lastState).forEach((function(key){void 0===state[key]&&passWhitelistBlacklist(key)&&-1===keysToProcess.indexOf(key)&&void 0!==lastState[key]&&keysToProcess.push(key)})),null===timeIterator&&(timeIterator=setInterval(processNextKey,throttle)),lastState=state},flush:function(){for(;0!==keysToProcess.length;)processNextKey();return writePromise||Promise.resolve()}}}function defaultSerialize(data){return JSON.stringify(data)}