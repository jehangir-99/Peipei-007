"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var int_1=require("@stablelib/int");function readInt16BE(array,offset){return void 0===offset&&(offset=0),(array[offset+0]<<8|array[offset+1])<<16>>16}function readUint16BE(array,offset){return void 0===offset&&(offset=0),(array[offset+0]<<8|array[offset+1])>>>0}function readInt16LE(array,offset){return void 0===offset&&(offset=0),(array[offset+1]<<8|array[offset])<<16>>16}function readUint16LE(array,offset){return void 0===offset&&(offset=0),(array[offset+1]<<8|array[offset])>>>0}function writeUint16BE(value,out,offset){return void 0===out&&(out=new Uint8Array(2)),void 0===offset&&(offset=0),out[offset+0]=value>>>8,out[offset+1]=value>>>0,out}function writeUint16LE(value,out,offset){return void 0===out&&(out=new Uint8Array(2)),void 0===offset&&(offset=0),out[offset+0]=value>>>0,out[offset+1]=value>>>8,out}function readInt32BE(array,offset){return void 0===offset&&(offset=0),array[offset]<<24|array[offset+1]<<16|array[offset+2]<<8|array[offset+3]}function readUint32BE(array,offset){return void 0===offset&&(offset=0),(array[offset]<<24|array[offset+1]<<16|array[offset+2]<<8|array[offset+3])>>>0}function readInt32LE(array,offset){return void 0===offset&&(offset=0),array[offset+3]<<24|array[offset+2]<<16|array[offset+1]<<8|array[offset]}function readUint32LE(array,offset){return void 0===offset&&(offset=0),(array[offset+3]<<24|array[offset+2]<<16|array[offset+1]<<8|array[offset])>>>0}function writeUint32BE(value,out,offset){return void 0===out&&(out=new Uint8Array(4)),void 0===offset&&(offset=0),out[offset+0]=value>>>24,out[offset+1]=value>>>16,out[offset+2]=value>>>8,out[offset+3]=value>>>0,out}function writeUint32LE(value,out,offset){return void 0===out&&(out=new Uint8Array(4)),void 0===offset&&(offset=0),out[offset+0]=value>>>0,out[offset+1]=value>>>8,out[offset+2]=value>>>16,out[offset+3]=value>>>24,out}function readInt64BE(array,offset){void 0===offset&&(offset=0);var hi=readInt32BE(array,offset),lo=readInt32BE(array,offset+4);return 4294967296*hi+lo-4294967296*(lo>>31)}function readUint64BE(array,offset){return void 0===offset&&(offset=0),4294967296*readUint32BE(array,offset)+readUint32BE(array,offset+4)}function readInt64LE(array,offset){void 0===offset&&(offset=0);var lo=readInt32LE(array,offset);return 4294967296*readInt32LE(array,offset+4)+lo-4294967296*(lo>>31)}function readUint64LE(array,offset){void 0===offset&&(offset=0);var lo=readUint32LE(array,offset);return 4294967296*readUint32LE(array,offset+4)+lo}function writeUint64BE(value,out,offset){return void 0===out&&(out=new Uint8Array(8)),void 0===offset&&(offset=0),writeUint32BE(value/4294967296>>>0,out,offset),writeUint32BE(value>>>0,out,offset+4),out}function writeUint64LE(value,out,offset){return void 0===out&&(out=new Uint8Array(8)),void 0===offset&&(offset=0),writeUint32LE(value>>>0,out,offset),writeUint32LE(value/4294967296>>>0,out,offset+4),out}function readUintBE(bitLength,array,offset){if(void 0===offset&&(offset=0),bitLength%8!=0)throw new Error("readUintBE supports only bitLengths divisible by 8");if(bitLength/8>array.length-offset)throw new Error("readUintBE: array is too short for the given bitLength");for(var result=0,mul=1,i=bitLength/8+offset-1;i>=offset;i--)result+=array[i]*mul,mul*=256;return result}function readUintLE(bitLength,array,offset){if(void 0===offset&&(offset=0),bitLength%8!=0)throw new Error("readUintLE supports only bitLengths divisible by 8");if(bitLength/8>array.length-offset)throw new Error("readUintLE: array is too short for the given bitLength");for(var result=0,mul=1,i=offset;i<offset+bitLength/8;i++)result+=array[i]*mul,mul*=256;return result}function writeUintBE(bitLength,value,out,offset){if(void 0===out&&(out=new Uint8Array(bitLength/8)),void 0===offset&&(offset=0),bitLength%8!=0)throw new Error("writeUintBE supports only bitLengths divisible by 8");if(!int_1.isSafeInteger(value))throw new Error("writeUintBE value must be an integer");for(var div=1,i=bitLength/8+offset-1;i>=offset;i--)out[i]=value/div&255,div*=256;return out}function writeUintLE(bitLength,value,out,offset){if(void 0===out&&(out=new Uint8Array(bitLength/8)),void 0===offset&&(offset=0),bitLength%8!=0)throw new Error("writeUintLE supports only bitLengths divisible by 8");if(!int_1.isSafeInteger(value))throw new Error("writeUintLE value must be an integer");for(var div=1,i=offset;i<offset+bitLength/8;i++)out[i]=value/div&255,div*=256;return out}function readFloat32BE(array,offset){return void 0===offset&&(offset=0),new DataView(array.buffer,array.byteOffset,array.byteLength).getFloat32(offset)}function readFloat32LE(array,offset){return void 0===offset&&(offset=0),new DataView(array.buffer,array.byteOffset,array.byteLength).getFloat32(offset,!0)}function readFloat64BE(array,offset){return void 0===offset&&(offset=0),new DataView(array.buffer,array.byteOffset,array.byteLength).getFloat64(offset)}function readFloat64LE(array,offset){return void 0===offset&&(offset=0),new DataView(array.buffer,array.byteOffset,array.byteLength).getFloat64(offset,!0)}function writeFloat32BE(value,out,offset){return void 0===out&&(out=new Uint8Array(4)),void 0===offset&&(offset=0),new DataView(out.buffer,out.byteOffset,out.byteLength).setFloat32(offset,value),out}function writeFloat32LE(value,out,offset){return void 0===out&&(out=new Uint8Array(4)),void 0===offset&&(offset=0),new DataView(out.buffer,out.byteOffset,out.byteLength).setFloat32(offset,value,!0),out}function writeFloat64BE(value,out,offset){return void 0===out&&(out=new Uint8Array(8)),void 0===offset&&(offset=0),new DataView(out.buffer,out.byteOffset,out.byteLength).setFloat64(offset,value),out}function writeFloat64LE(value,out,offset){return void 0===out&&(out=new Uint8Array(8)),void 0===offset&&(offset=0),new DataView(out.buffer,out.byteOffset,out.byteLength).setFloat64(offset,value,!0),out}exports.readInt16BE=readInt16BE,exports.readUint16BE=readUint16BE,exports.readInt16LE=readInt16LE,exports.readUint16LE=readUint16LE,exports.writeUint16BE=writeUint16BE,exports.writeInt16BE=writeUint16BE,exports.writeUint16LE=writeUint16LE,exports.writeInt16LE=writeUint16LE,exports.readInt32BE=readInt32BE,exports.readUint32BE=readUint32BE,exports.readInt32LE=readInt32LE,exports.readUint32LE=readUint32LE,exports.writeUint32BE=writeUint32BE,exports.writeInt32BE=writeUint32BE,exports.writeUint32LE=writeUint32LE,exports.writeInt32LE=writeUint32LE,exports.readInt64BE=readInt64BE,exports.readUint64BE=readUint64BE,exports.readInt64LE=readInt64LE,exports.readUint64LE=readUint64LE,exports.writeUint64BE=writeUint64BE,exports.writeInt64BE=writeUint64BE,exports.writeUint64LE=writeUint64LE,exports.writeInt64LE=writeUint64LE,exports.readUintBE=readUintBE,exports.readUintLE=readUintLE,exports.writeUintBE=writeUintBE,exports.writeUintLE=writeUintLE,exports.readFloat32BE=readFloat32BE,exports.readFloat32LE=readFloat32LE,exports.readFloat64BE=readFloat64BE,exports.readFloat64LE=readFloat64LE,exports.writeFloat32BE=writeFloat32BE,exports.writeFloat32LE=writeFloat32LE,exports.writeFloat64BE=writeFloat64BE,exports.writeFloat64LE=writeFloat64LE;