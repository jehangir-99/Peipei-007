"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.randomStringForEntropy=exports.randomString=exports.randomUint32=exports.randomBytes=exports.defaultRandomSource=void 0;const system_1=require("./source/system"),binary_1=require("@stablelib/binary"),wipe_1=require("@stablelib/wipe");function randomBytes(length,prng=exports.defaultRandomSource){return prng.randomBytes(length)}function randomUint32(prng=exports.defaultRandomSource){const buf=randomBytes(4,prng),result=(0,binary_1.readUint32LE)(buf);return(0,wipe_1.wipe)(buf),result}exports.defaultRandomSource=new system_1.SystemRandomSource,exports.randomBytes=randomBytes,exports.randomUint32=randomUint32;const ALPHANUMERIC="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";function randomString(length,charset=ALPHANUMERIC,prng=exports.defaultRandomSource){if(charset.length<2)throw new Error("randomString charset is too short");if(charset.length>256)throw new Error("randomString charset is too long");let out="";const charsLen=charset.length,maxByte=256-256%charsLen;for(;length>0;){const buf=randomBytes(Math.ceil(256*length/maxByte),prng);for(let i=0;i<buf.length&&length>0;i++){const randomByte=buf[i];randomByte<maxByte&&(out+=charset.charAt(randomByte%charsLen),length--)}(0,wipe_1.wipe)(buf)}return out}function randomStringForEntropy(bits,charset=ALPHANUMERIC,prng=exports.defaultRandomSource){return randomString(Math.ceil(bits/(Math.log(charset.length)/Math.LN2)),charset,prng)}exports.randomString=randomString,exports.randomStringForEntropy=randomStringForEntropy;