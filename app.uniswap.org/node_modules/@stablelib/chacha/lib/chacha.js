"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var binary_1=require("@stablelib/binary"),wipe_1=require("@stablelib/wipe"),ROUNDS=20;function core(out,input,key){for(var j0=1634760805,j1=857760878,j2=2036477234,j3=1797285236,j4=key[3]<<24|key[2]<<16|key[1]<<8|key[0],j5=key[7]<<24|key[6]<<16|key[5]<<8|key[4],j6=key[11]<<24|key[10]<<16|key[9]<<8|key[8],j7=key[15]<<24|key[14]<<16|key[13]<<8|key[12],j8=key[19]<<24|key[18]<<16|key[17]<<8|key[16],j9=key[23]<<24|key[22]<<16|key[21]<<8|key[20],j10=key[27]<<24|key[26]<<16|key[25]<<8|key[24],j11=key[31]<<24|key[30]<<16|key[29]<<8|key[28],j12=input[3]<<24|input[2]<<16|input[1]<<8|input[0],j13=input[7]<<24|input[6]<<16|input[5]<<8|input[4],j14=input[11]<<24|input[10]<<16|input[9]<<8|input[8],j15=input[15]<<24|input[14]<<16|input[13]<<8|input[12],x0=j0,x1=j1,x2=j2,x3=j3,x4=j4,x5=j5,x6=j6,x7=j7,x8=j8,x9=j9,x10=j10,x11=j11,x12=j12,x13=j13,x14=j14,x15=j15,i=0;i<ROUNDS;i+=2)x4=(x4^=x8=x8+(x12=(x12^=x0=x0+x4|0)>>>16|x12<<16)|0)>>>20|x4<<12,x5=(x5^=x9=x9+(x13=(x13^=x1=x1+x5|0)>>>16|x13<<16)|0)>>>20|x5<<12,x6=(x6^=x10=x10+(x14=(x14^=x2=x2+x6|0)>>>16|x14<<16)|0)>>>20|x6<<12,x7=(x7^=x11=x11+(x15=(x15^=x3=x3+x7|0)>>>16|x15<<16)|0)>>>20|x7<<12,x6=(x6^=x10=x10+(x14=(x14^=x2=x2+x6|0)>>>24|x14<<8)|0)>>>25|x6<<7,x7=(x7^=x11=x11+(x15=(x15^=x3=x3+x7|0)>>>24|x15<<8)|0)>>>25|x7<<7,x5=(x5^=x9=x9+(x13=(x13^=x1=x1+x5|0)>>>24|x13<<8)|0)>>>25|x5<<7,x4=(x4^=x8=x8+(x12=(x12^=x0=x0+x4|0)>>>24|x12<<8)|0)>>>25|x4<<7,x5=(x5^=x10=x10+(x15=(x15^=x0=x0+x5|0)>>>16|x15<<16)|0)>>>20|x5<<12,x6=(x6^=x11=x11+(x12=(x12^=x1=x1+x6|0)>>>16|x12<<16)|0)>>>20|x6<<12,x7=(x7^=x8=x8+(x13=(x13^=x2=x2+x7|0)>>>16|x13<<16)|0)>>>20|x7<<12,x4=(x4^=x9=x9+(x14=(x14^=x3=x3+x4|0)>>>16|x14<<16)|0)>>>20|x4<<12,x7=(x7^=x8=x8+(x13=(x13^=x2=x2+x7|0)>>>24|x13<<8)|0)>>>25|x7<<7,x4=(x4^=x9=x9+(x14=(x14^=x3=x3+x4|0)>>>24|x14<<8)|0)>>>25|x4<<7,x6=(x6^=x11=x11+(x12=(x12^=x1=x1+x6|0)>>>24|x12<<8)|0)>>>25|x6<<7,x5=(x5^=x10=x10+(x15=(x15^=x0=x0+x5|0)>>>24|x15<<8)|0)>>>25|x5<<7;binary_1.writeUint32LE(x0+j0|0,out,0),binary_1.writeUint32LE(x1+j1|0,out,4),binary_1.writeUint32LE(x2+j2|0,out,8),binary_1.writeUint32LE(x3+j3|0,out,12),binary_1.writeUint32LE(x4+j4|0,out,16),binary_1.writeUint32LE(x5+j5|0,out,20),binary_1.writeUint32LE(x6+j6|0,out,24),binary_1.writeUint32LE(x7+j7|0,out,28),binary_1.writeUint32LE(x8+j8|0,out,32),binary_1.writeUint32LE(x9+j9|0,out,36),binary_1.writeUint32LE(x10+j10|0,out,40),binary_1.writeUint32LE(x11+j11|0,out,44),binary_1.writeUint32LE(x12+j12|0,out,48),binary_1.writeUint32LE(x13+j13|0,out,52),binary_1.writeUint32LE(x14+j14|0,out,56),binary_1.writeUint32LE(x15+j15|0,out,60)}function streamXOR(key,nonce,src,dst,nonceInplaceCounterLength){if(void 0===nonceInplaceCounterLength&&(nonceInplaceCounterLength=0),32!==key.length)throw new Error("ChaCha: key size must be 32 bytes");if(dst.length<src.length)throw new Error("ChaCha: destination is shorter than source");var nc,counterLength;if(0===nonceInplaceCounterLength){if(8!==nonce.length&&12!==nonce.length)throw new Error("ChaCha nonce must be 8 or 12 bytes");counterLength=(nc=new Uint8Array(16)).length-nonce.length,nc.set(nonce,counterLength)}else{if(16!==nonce.length)throw new Error("ChaCha nonce with counter must be 16 bytes");nc=nonce,counterLength=nonceInplaceCounterLength}for(var block=new Uint8Array(64),i=0;i<src.length;i+=64){core(block,nc,key);for(var j=i;j<i+64&&j<src.length;j++)dst[j]=src[j]^block[j-i];incrementCounter(nc,0,counterLength)}return wipe_1.wipe(block),0===nonceInplaceCounterLength&&wipe_1.wipe(nc),dst}function stream(key,nonce,dst,nonceInplaceCounterLength){return void 0===nonceInplaceCounterLength&&(nonceInplaceCounterLength=0),wipe_1.wipe(dst),streamXOR(key,nonce,dst,dst,nonceInplaceCounterLength)}function incrementCounter(counter,pos,len){for(var carry=1;len--;)carry=carry+(255&counter[pos])|0,counter[pos]=255&carry,carry>>>=8,pos++;if(carry>0)throw new Error("ChaCha: counter overflow")}exports.streamXOR=streamXOR,exports.stream=stream;