"use strict";
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */Object.defineProperty(exports,"__esModule",{value:!0}),exports.randomBytes=exports.wrapXOFConstructorWithOpts=exports.wrapConstructorWithOpts=exports.wrapConstructor=exports.checkOpts=exports.Hash=exports.concatBytes=exports.toBytes=exports.utf8ToBytes=exports.asyncLoop=exports.nextTick=exports.hexToBytes=exports.bytesToHex=exports.isLE=exports.rotr=exports.createView=exports.u32=exports.u8=void 0;const crypto_1=require("@noble/hashes/crypto"),u8a=a=>a instanceof Uint8Array,u8=arr=>new Uint8Array(arr.buffer,arr.byteOffset,arr.byteLength);exports.u8=u8;const u32=arr=>new Uint32Array(arr.buffer,arr.byteOffset,Math.floor(arr.byteLength/4));exports.u32=u32;const createView=arr=>new DataView(arr.buffer,arr.byteOffset,arr.byteLength);exports.createView=createView;const rotr=(word,shift)=>word<<32-shift|word>>>shift;if(exports.rotr=rotr,exports.isLE=68===new Uint8Array(new Uint32Array([287454020]).buffer)[0],!exports.isLE)throw new Error("Non little-endian hardware is not supported");const hexes=Array.from({length:256},((_,i)=>i.toString(16).padStart(2,"0")));function bytesToHex(bytes){if(!u8a(bytes))throw new Error("Uint8Array expected");let hex="";for(let i=0;i<bytes.length;i++)hex+=hexes[bytes[i]];return hex}function hexToBytes(hex){if("string"!=typeof hex)throw new Error("hex string expected, got "+typeof hex);const len=hex.length;if(len%2)throw new Error("padded hex string expected, got unpadded hex of length "+len);const array=new Uint8Array(len/2);for(let i=0;i<array.length;i++){const j=2*i,hexByte=hex.slice(j,j+2),byte=Number.parseInt(hexByte,16);if(Number.isNaN(byte)||byte<0)throw new Error("Invalid byte sequence");array[i]=byte}return array}exports.bytesToHex=bytesToHex,exports.hexToBytes=hexToBytes;const nextTick=async()=>{};async function asyncLoop(iters,tick,cb){let ts=Date.now();for(let i=0;i<iters;i++){cb(i);const diff=Date.now()-ts;diff>=0&&diff<tick||(await(0,exports.nextTick)(),ts+=diff)}}function utf8ToBytes(str){if("string"!=typeof str)throw new Error("utf8ToBytes expected string, got "+typeof str);return new Uint8Array((new TextEncoder).encode(str))}function toBytes(data){if("string"==typeof data&&(data=utf8ToBytes(data)),!u8a(data))throw new Error("expected Uint8Array, got "+typeof data);return data}function concatBytes(...arrays){const r=new Uint8Array(arrays.reduce(((sum,a)=>sum+a.length),0));let pad=0;return arrays.forEach((a=>{if(!u8a(a))throw new Error("Uint8Array expected");r.set(a,pad),pad+=a.length})),r}exports.nextTick=nextTick,exports.asyncLoop=asyncLoop,exports.utf8ToBytes=utf8ToBytes,exports.toBytes=toBytes,exports.concatBytes=concatBytes;class Hash{clone(){return this._cloneInto()}}exports.Hash=Hash;const toStr={}.toString;function checkOpts(defaults,opts){if(void 0!==opts&&"[object Object]"!==toStr.call(opts))throw new Error("Options should be object or undefined");return Object.assign(defaults,opts)}function wrapConstructor(hashCons){const hashC=msg=>hashCons().update(toBytes(msg)).digest(),tmp=hashCons();return hashC.outputLen=tmp.outputLen,hashC.blockLen=tmp.blockLen,hashC.create=()=>hashCons(),hashC}function wrapConstructorWithOpts(hashCons){const hashC=(msg,opts)=>hashCons(opts).update(toBytes(msg)).digest(),tmp=hashCons({});return hashC.outputLen=tmp.outputLen,hashC.blockLen=tmp.blockLen,hashC.create=opts=>hashCons(opts),hashC}function wrapXOFConstructorWithOpts(hashCons){const hashC=(msg,opts)=>hashCons(opts).update(toBytes(msg)).digest(),tmp=hashCons({});return hashC.outputLen=tmp.outputLen,hashC.blockLen=tmp.blockLen,hashC.create=opts=>hashCons(opts),hashC}function randomBytes(bytesLength=32){if(crypto_1.crypto&&"function"==typeof crypto_1.crypto.getRandomValues)return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));throw new Error("crypto.getRandomValues must be defined")}exports.checkOpts=checkOpts,exports.wrapConstructor=wrapConstructor,exports.wrapConstructorWithOpts=wrapConstructorWithOpts,exports.wrapXOFConstructorWithOpts=wrapXOFConstructorWithOpts,exports.randomBytes=randomBytes;