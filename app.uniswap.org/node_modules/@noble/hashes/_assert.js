"use strict";function number(n){if(!Number.isSafeInteger(n)||n<0)throw new Error(`Wrong positive integer: ${n}`)}function bool(b){if("boolean"!=typeof b)throw new Error(`Expected boolean, not ${b}`)}function bytes(b,...lengths){if(!(b instanceof Uint8Array))throw new Error("Expected Uint8Array");if(lengths.length>0&&!lengths.includes(b.length))throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`)}function hash(hash){if("function"!=typeof hash||"function"!=typeof hash.create)throw new Error("Hash should be wrapped by utils.wrapConstructor");number(hash.outputLen),number(hash.blockLen)}function exists(instance,checkFinished=!0){if(instance.destroyed)throw new Error("Hash instance has been destroyed");if(checkFinished&&instance.finished)throw new Error("Hash#digest() has already been called")}function output(out,instance){bytes(out);const min=instance.outputLen;if(out.length<min)throw new Error(`digestInto() expects output buffer of length at least ${min}`)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.output=exports.exists=exports.hash=exports.bytes=exports.bool=exports.number=void 0,exports.number=number,exports.bool=bool,exports.bytes=bytes,exports.hash=hash,exports.exists=exists,exports.output=output;const assert={number:number,bool:bool,bytes:bytes,hash:hash,exists:exists,output:output};exports.default=assert;