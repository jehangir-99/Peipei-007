"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.validateObject=exports.createHmacDrbg=exports.bitMask=exports.bitSet=exports.bitGet=exports.bitLen=exports.utf8ToBytes=exports.equalBytes=exports.concatBytes=exports.ensureBytes=exports.numberToVarBytesBE=exports.numberToBytesLE=exports.numberToBytesBE=exports.bytesToNumberLE=exports.bytesToNumberBE=exports.hexToBytes=exports.hexToNumber=exports.numberToHexUnpadded=exports.bytesToHex=void 0;
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const _0n=BigInt(0),_1n=BigInt(1),_2n=BigInt(2),u8a=a=>a instanceof Uint8Array,hexes=Array.from({length:256},((_,i)=>i.toString(16).padStart(2,"0")));function bytesToHex(bytes){if(!u8a(bytes))throw new Error("Uint8Array expected");let hex="";for(let i=0;i<bytes.length;i++)hex+=hexes[bytes[i]];return hex}function numberToHexUnpadded(num){const hex=num.toString(16);return 1&hex.length?`0${hex}`:hex}function hexToNumber(hex){if("string"!=typeof hex)throw new Error("hex string expected, got "+typeof hex);return BigInt(""===hex?"0":`0x${hex}`)}function hexToBytes(hex){if("string"!=typeof hex)throw new Error("hex string expected, got "+typeof hex);const len=hex.length;if(len%2)throw new Error("padded hex string expected, got unpadded hex of length "+len);const array=new Uint8Array(len/2);for(let i=0;i<array.length;i++){const j=2*i,hexByte=hex.slice(j,j+2),byte=Number.parseInt(hexByte,16);if(Number.isNaN(byte)||byte<0)throw new Error("Invalid byte sequence");array[i]=byte}return array}function bytesToNumberBE(bytes){return hexToNumber(bytesToHex(bytes))}function bytesToNumberLE(bytes){if(!u8a(bytes))throw new Error("Uint8Array expected");return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()))}function numberToBytesBE(n,len){return hexToBytes(n.toString(16).padStart(2*len,"0"))}function numberToBytesLE(n,len){return numberToBytesBE(n,len).reverse()}function numberToVarBytesBE(n){return hexToBytes(numberToHexUnpadded(n))}function ensureBytes(title,hex,expectedLength){let res;if("string"==typeof hex)try{res=hexToBytes(hex)}catch(e){throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`)}else{if(!u8a(hex))throw new Error(`${title} must be hex string or Uint8Array`);res=Uint8Array.from(hex)}const len=res.length;if("number"==typeof expectedLength&&len!==expectedLength)throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);return res}function concatBytes(...arrays){const r=new Uint8Array(arrays.reduce(((sum,a)=>sum+a.length),0));let pad=0;return arrays.forEach((a=>{if(!u8a(a))throw new Error("Uint8Array expected");r.set(a,pad),pad+=a.length})),r}function equalBytes(b1,b2){if(b1.length!==b2.length)return!1;for(let i=0;i<b1.length;i++)if(b1[i]!==b2[i])return!1;return!0}function utf8ToBytes(str){if("string"!=typeof str)throw new Error("utf8ToBytes expected string, got "+typeof str);return new Uint8Array((new TextEncoder).encode(str))}function bitLen(n){let len;for(len=0;n>_0n;n>>=_1n,len+=1);return len}function bitGet(n,pos){return n>>BigInt(pos)&_1n}exports.bytesToHex=bytesToHex,exports.numberToHexUnpadded=numberToHexUnpadded,exports.hexToNumber=hexToNumber,exports.hexToBytes=hexToBytes,exports.bytesToNumberBE=bytesToNumberBE,exports.bytesToNumberLE=bytesToNumberLE,exports.numberToBytesBE=numberToBytesBE,exports.numberToBytesLE=numberToBytesLE,exports.numberToVarBytesBE=numberToVarBytesBE,exports.ensureBytes=ensureBytes,exports.concatBytes=concatBytes,exports.equalBytes=equalBytes,exports.utf8ToBytes=utf8ToBytes,exports.bitLen=bitLen,exports.bitGet=bitGet;const bitSet=(n,pos,value)=>n|(value?_1n:_0n)<<BigInt(pos);exports.bitSet=bitSet;const bitMask=n=>(_2n<<BigInt(n-1))-_1n;exports.bitMask=bitMask;const u8n=data=>new Uint8Array(data),u8fr=arr=>Uint8Array.from(arr);function createHmacDrbg(hashLen,qByteLen,hmacFn){if("number"!=typeof hashLen||hashLen<2)throw new Error("hashLen must be a number");if("number"!=typeof qByteLen||qByteLen<2)throw new Error("qByteLen must be a number");if("function"!=typeof hmacFn)throw new Error("hmacFn must be a function");let v=u8n(hashLen),k=u8n(hashLen),i=0;const reset=()=>{v.fill(1),k.fill(0),i=0},h=(...b)=>hmacFn(k,v,...b),reseed=(seed=u8n())=>{k=h(u8fr([0]),seed),v=h(),0!==seed.length&&(k=h(u8fr([1]),seed),v=h())},gen=()=>{if(i++>=1e3)throw new Error("drbg: tried 1000 values");let len=0;const out=[];for(;len<qByteLen;){v=h();const sl=v.slice();out.push(sl),len+=v.length}return concatBytes(...out)};return(seed,pred)=>{let res;for(reset(),reseed(seed);!(res=pred(gen()));)reseed();return reset(),res}}exports.createHmacDrbg=createHmacDrbg;const validatorFns={bigint:val=>"bigint"==typeof val,function:val=>"function"==typeof val,boolean:val=>"boolean"==typeof val,string:val=>"string"==typeof val,stringOrUint8Array:val=>"string"==typeof val||val instanceof Uint8Array,isSafeInteger:val=>Number.isSafeInteger(val),array:val=>Array.isArray(val),field:(val,object)=>object.Fp.isValid(val),hash:val=>"function"==typeof val&&Number.isSafeInteger(val.outputLen)};function validateObject(object,validators,optValidators={}){const checkField=(fieldName,type,isOptional)=>{const checkVal=validatorFns[type];if("function"!=typeof checkVal)throw new Error(`Invalid validator "${type}", expected function`);const val=object[fieldName];if(!(isOptional&&void 0===val||checkVal(val,object)))throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`)};for(const[fieldName,type]of Object.entries(validators))checkField(fieldName,type,!1);for(const[fieldName,type]of Object.entries(optValidators))checkField(fieldName,type,!0);return object}exports.validateObject=validateObject;