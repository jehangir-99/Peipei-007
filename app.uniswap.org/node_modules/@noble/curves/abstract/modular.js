"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.mapHashToField=exports.getMinHashLength=exports.getFieldBytesLength=exports.hashToPrivateScalar=exports.FpSqrtEven=exports.FpSqrtOdd=exports.Field=exports.nLength=exports.FpIsSquare=exports.FpDiv=exports.FpInvertBatch=exports.FpPow=exports.validateField=exports.isNegativeLE=exports.FpSqrt=exports.tonelliShanks=exports.invert=exports.pow2=exports.pow=exports.mod=void 0;
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const utils_js_1=require("./utils.js"),_0n=BigInt(0),_1n=BigInt(1),_2n=BigInt(2),_3n=BigInt(3),_4n=BigInt(4),_5n=BigInt(5),_8n=BigInt(8),_9n=BigInt(9),_16n=BigInt(16);function mod(a,b){const result=a%b;return result>=_0n?result:b+result}function pow(num,power,modulo){if(modulo<=_0n||power<_0n)throw new Error("Expected power/modulo > 0");if(modulo===_1n)return _0n;let res=_1n;for(;power>_0n;)power&_1n&&(res=res*num%modulo),num=num*num%modulo,power>>=_1n;return res}function pow2(x,power,modulo){let res=x;for(;power-- >_0n;)res*=res,res%=modulo;return res}function invert(number,modulo){if(number===_0n||modulo<=_0n)throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);let a=mod(number,modulo),b=modulo,x=_0n,y=_1n,u=_1n,v=_0n;for(;a!==_0n;){const q=b/a,r=b%a,m=x-u*q,n=y-v*q;b=a,a=r,x=u,y=v,u=m,v=n}if(b!==_1n)throw new Error("invert: does not exist");return mod(x,modulo)}function tonelliShanks(P){const legendreC=(P-_1n)/_2n;let Q,S,Z;for(Q=P-_1n,S=0;Q%_2n===_0n;Q/=_2n,S++);for(Z=_2n;Z<P&&pow(Z,legendreC,P)!==P-_1n;Z++);if(1===S){const p1div4=(P+_1n)/_4n;return function(Fp,n){const root=Fp.pow(n,p1div4);if(!Fp.eql(Fp.sqr(root),n))throw new Error("Cannot find square root");return root}}const Q1div2=(Q+_1n)/_2n;return function(Fp,n){if(Fp.pow(n,legendreC)===Fp.neg(Fp.ONE))throw new Error("Cannot find square root");let r=S,g=Fp.pow(Fp.mul(Fp.ONE,Z),Q),x=Fp.pow(n,Q1div2),b=Fp.pow(n,Q);for(;!Fp.eql(b,Fp.ONE);){if(Fp.eql(b,Fp.ZERO))return Fp.ZERO;let m=1;for(let t2=Fp.sqr(b);m<r&&!Fp.eql(t2,Fp.ONE);m++)t2=Fp.sqr(t2);const ge=Fp.pow(g,_1n<<BigInt(r-m-1));g=Fp.sqr(ge),x=Fp.mul(x,ge),b=Fp.mul(b,g),r=m}return x}}function FpSqrt(P){if(P%_4n===_3n){const p1div4=(P+_1n)/_4n;return function(Fp,n){const root=Fp.pow(n,p1div4);if(!Fp.eql(Fp.sqr(root),n))throw new Error("Cannot find square root");return root}}if(P%_8n===_5n){const c1=(P-_5n)/_8n;return function(Fp,n){const n2=Fp.mul(n,_2n),v=Fp.pow(n2,c1),nv=Fp.mul(n,v),i=Fp.mul(Fp.mul(nv,_2n),v),root=Fp.mul(nv,Fp.sub(i,Fp.ONE));if(!Fp.eql(Fp.sqr(root),n))throw new Error("Cannot find square root");return root}}return tonelliShanks(P)}exports.mod=mod,exports.pow=pow,exports.pow2=pow2,exports.invert=invert,exports.tonelliShanks=tonelliShanks,exports.FpSqrt=FpSqrt;const isNegativeLE=(num,modulo)=>(mod(num,modulo)&_1n)===_1n;exports.isNegativeLE=isNegativeLE;const FIELD_FIELDS=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];function validateField(field){const opts=FIELD_FIELDS.reduce(((map,val)=>(map[val]="function",map)),{ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"});return(0,utils_js_1.validateObject)(field,opts)}function FpPow(f,num,power){if(power<_0n)throw new Error("Expected power > 0");if(power===_0n)return f.ONE;if(power===_1n)return num;let p=f.ONE,d=num;for(;power>_0n;)power&_1n&&(p=f.mul(p,d)),d=f.sqr(d),power>>=_1n;return p}function FpInvertBatch(f,nums){const tmp=new Array(nums.length),lastMultiplied=nums.reduce(((acc,num,i)=>f.is0(num)?acc:(tmp[i]=acc,f.mul(acc,num))),f.ONE),inverted=f.inv(lastMultiplied);return nums.reduceRight(((acc,num,i)=>f.is0(num)?acc:(tmp[i]=f.mul(acc,tmp[i]),f.mul(acc,num))),inverted),tmp}function FpDiv(f,lhs,rhs){return f.mul(lhs,"bigint"==typeof rhs?invert(rhs,f.ORDER):f.inv(rhs))}function FpIsSquare(f){const legendreConst=(f.ORDER-_1n)/_2n;return x=>{const p=f.pow(x,legendreConst);return f.eql(p,f.ZERO)||f.eql(p,f.ONE)}}function nLength(n,nBitLength){const _nBitLength=void 0!==nBitLength?nBitLength:n.toString(2).length;return{nBitLength:_nBitLength,nByteLength:Math.ceil(_nBitLength/8)}}function Field(ORDER,bitLen,isLE=!1,redef={}){if(ORDER<=_0n)throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);const{nBitLength:BITS,nByteLength:BYTES}=nLength(ORDER,bitLen);if(BYTES>2048)throw new Error("Field lengths over 2048 bytes are not supported");const sqrtP=FpSqrt(ORDER),f=Object.freeze({ORDER:ORDER,BITS:BITS,BYTES:BYTES,MASK:(0,utils_js_1.bitMask)(BITS),ZERO:_0n,ONE:_1n,create:num=>mod(num,ORDER),isValid:num=>{if("bigint"!=typeof num)throw new Error("Invalid field element: expected bigint, got "+typeof num);return _0n<=num&&num<ORDER},is0:num=>num===_0n,isOdd:num=>(num&_1n)===_1n,neg:num=>mod(-num,ORDER),eql:(lhs,rhs)=>lhs===rhs,sqr:num=>mod(num*num,ORDER),add:(lhs,rhs)=>mod(lhs+rhs,ORDER),sub:(lhs,rhs)=>mod(lhs-rhs,ORDER),mul:(lhs,rhs)=>mod(lhs*rhs,ORDER),pow:(num,power)=>FpPow(f,num,power),div:(lhs,rhs)=>mod(lhs*invert(rhs,ORDER),ORDER),sqrN:num=>num*num,addN:(lhs,rhs)=>lhs+rhs,subN:(lhs,rhs)=>lhs-rhs,mulN:(lhs,rhs)=>lhs*rhs,inv:num=>invert(num,ORDER),sqrt:redef.sqrt||(n=>sqrtP(f,n)),invertBatch:lst=>FpInvertBatch(f,lst),cmov:(a,b,c)=>c?b:a,toBytes:num=>isLE?(0,utils_js_1.numberToBytesLE)(num,BYTES):(0,utils_js_1.numberToBytesBE)(num,BYTES),fromBytes:bytes=>{if(bytes.length!==BYTES)throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);return isLE?(0,utils_js_1.bytesToNumberLE)(bytes):(0,utils_js_1.bytesToNumberBE)(bytes)}});return Object.freeze(f)}function FpSqrtOdd(Fp,elm){if(!Fp.isOdd)throw new Error("Field doesn't have isOdd");const root=Fp.sqrt(elm);return Fp.isOdd(root)?root:Fp.neg(root)}function FpSqrtEven(Fp,elm){if(!Fp.isOdd)throw new Error("Field doesn't have isOdd");const root=Fp.sqrt(elm);return Fp.isOdd(root)?Fp.neg(root):root}function hashToPrivateScalar(hash,groupOrder,isLE=!1){const hashLen=(hash=(0,utils_js_1.ensureBytes)("privateHash",hash)).length,minLen=nLength(groupOrder).nByteLength+8;if(minLen<24||hashLen<minLen||hashLen>1024)throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);return mod(isLE?(0,utils_js_1.bytesToNumberLE)(hash):(0,utils_js_1.bytesToNumberBE)(hash),groupOrder-_1n)+_1n}function getFieldBytesLength(fieldOrder){if("bigint"!=typeof fieldOrder)throw new Error("field order must be bigint");const bitLength=fieldOrder.toString(2).length;return Math.ceil(bitLength/8)}function getMinHashLength(fieldOrder){const length=getFieldBytesLength(fieldOrder);return length+Math.ceil(length/2)}function mapHashToField(key,fieldOrder,isLE=!1){const len=key.length,fieldLen=getFieldBytesLength(fieldOrder),minLen=getMinHashLength(fieldOrder);if(len<16||len<minLen||len>1024)throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);const reduced=mod(isLE?(0,utils_js_1.bytesToNumberBE)(key):(0,utils_js_1.bytesToNumberLE)(key),fieldOrder-_1n)+_1n;return isLE?(0,utils_js_1.numberToBytesLE)(reduced,fieldLen):(0,utils_js_1.numberToBytesBE)(reduced,fieldLen)}exports.validateField=validateField,exports.FpPow=FpPow,exports.FpInvertBatch=FpInvertBatch,exports.FpDiv=FpDiv,exports.FpIsSquare=FpIsSquare,exports.nLength=nLength,exports.Field=Field,exports.FpSqrtOdd=FpSqrtOdd,exports.FpSqrtEven=FpSqrtEven,exports.hashToPrivateScalar=hashToPrivateScalar,exports.getFieldBytesLength=getFieldBytesLength,exports.getMinHashLength=getMinHashLength,exports.mapHashToField=mapHashToField;