"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.encodeToCurve=exports.hashToCurve=exports.schnorr=exports.secp256k1=void 0;
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const sha256_1=require("@noble/hashes/sha256"),utils_1=require("@noble/hashes/utils"),modular_js_1=require("./abstract/modular.js"),weierstrass_js_1=require("./abstract/weierstrass.js"),utils_js_1=require("./abstract/utils.js"),hash_to_curve_js_1=require("./abstract/hash-to-curve.js"),_shortw_utils_js_1=require("./_shortw_utils.js"),secp256k1P=BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),secp256k1N=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),_1n=BigInt(1),_2n=BigInt(2),divNearest=(a,b)=>(a+b/_2n)/b;function sqrtMod(y){const P=secp256k1P,_3n=BigInt(3),_6n=BigInt(6),_11n=BigInt(11),_22n=BigInt(22),_23n=BigInt(23),_44n=BigInt(44),_88n=BigInt(88),b2=y*y*y%P,b3=b2*b2*y%P,b6=(0,modular_js_1.pow2)(b3,_3n,P)*b3%P,b9=(0,modular_js_1.pow2)(b6,_3n,P)*b3%P,b11=(0,modular_js_1.pow2)(b9,_2n,P)*b2%P,b22=(0,modular_js_1.pow2)(b11,_11n,P)*b11%P,b44=(0,modular_js_1.pow2)(b22,_22n,P)*b22%P,b88=(0,modular_js_1.pow2)(b44,_44n,P)*b44%P,b176=(0,modular_js_1.pow2)(b88,_88n,P)*b88%P,b220=(0,modular_js_1.pow2)(b176,_44n,P)*b44%P,b223=(0,modular_js_1.pow2)(b220,_3n,P)*b3%P,t1=(0,modular_js_1.pow2)(b223,_23n,P)*b22%P,t2=(0,modular_js_1.pow2)(t1,_6n,P)*b2%P,root=(0,modular_js_1.pow2)(t2,_2n,P);if(!Fp.eql(Fp.sqr(root),y))throw new Error("Cannot find square root");return root}const Fp=(0,modular_js_1.Field)(secp256k1P,void 0,void 0,{sqrt:sqrtMod});exports.secp256k1=(0,_shortw_utils_js_1.createCurve)({a:BigInt(0),b:BigInt(7),Fp:Fp,n:secp256k1N,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),h:BigInt(1),lowS:!0,endo:{beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar:k=>{const n=secp256k1N,a1=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),b1=-_1n*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),a2=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),b2=a1,POW_2_128=BigInt("0x100000000000000000000000000000000"),c1=divNearest(b2*k,n),c2=divNearest(-b1*k,n);let k1=(0,modular_js_1.mod)(k-c1*a1-c2*a2,n),k2=(0,modular_js_1.mod)(-c1*b1-c2*b2,n);const k1neg=k1>POW_2_128,k2neg=k2>POW_2_128;if(k1neg&&(k1=n-k1),k2neg&&(k2=n-k2),k1>POW_2_128||k2>POW_2_128)throw new Error("splitScalar: Endomorphism failed, k="+k);return{k1neg:k1neg,k1:k1,k2neg:k2neg,k2:k2}}}},sha256_1.sha256);const _0n=BigInt(0),fe=x=>"bigint"==typeof x&&_0n<x&&x<secp256k1P,ge=x=>"bigint"==typeof x&&_0n<x&&x<secp256k1N,TAGGED_HASH_PREFIXES={};function taggedHash(tag,...messages){let tagP=TAGGED_HASH_PREFIXES[tag];if(void 0===tagP){const tagH=(0,sha256_1.sha256)(Uint8Array.from(tag,(c=>c.charCodeAt(0))));tagP=(0,utils_js_1.concatBytes)(tagH,tagH),TAGGED_HASH_PREFIXES[tag]=tagP}return(0,sha256_1.sha256)((0,utils_js_1.concatBytes)(tagP,...messages))}const pointToBytes=point=>point.toRawBytes(!0).slice(1),numTo32b=n=>(0,utils_js_1.numberToBytesBE)(n,32),modP=x=>(0,modular_js_1.mod)(x,secp256k1P),modN=x=>(0,modular_js_1.mod)(x,secp256k1N),Point=exports.secp256k1.ProjectivePoint,GmulAdd=(Q,a,b)=>Point.BASE.multiplyAndAddUnsafe(Q,a,b);function schnorrGetExtPubKey(priv){let d_=exports.secp256k1.utils.normPrivateKeyToScalar(priv),p=Point.fromPrivateKey(d_);return{scalar:p.hasEvenY()?d_:modN(-d_),bytes:pointToBytes(p)}}function lift_x(x){if(!fe(x))throw new Error("bad x: need 0 < x < p");const xx=modP(x*x);let y=sqrtMod(modP(xx*x+BigInt(7)));y%_2n!==_0n&&(y=modP(-y));const p=new Point(x,y,_1n);return p.assertValidity(),p}function challenge(...args){return modN((0,utils_js_1.bytesToNumberBE)(taggedHash("BIP0340/challenge",...args)))}function schnorrGetPublicKey(privateKey){return schnorrGetExtPubKey(privateKey).bytes}function schnorrSign(message,privateKey,auxRand=(0,utils_1.randomBytes)(32)){const m=(0,utils_js_1.ensureBytes)("message",message),{bytes:px,scalar:d}=schnorrGetExtPubKey(privateKey),a=(0,utils_js_1.ensureBytes)("auxRand",auxRand,32),t=numTo32b(d^(0,utils_js_1.bytesToNumberBE)(taggedHash("BIP0340/aux",a))),rand=taggedHash("BIP0340/nonce",t,px,m),k_=modN((0,utils_js_1.bytesToNumberBE)(rand));if(k_===_0n)throw new Error("sign failed: k is zero");const{bytes:rx,scalar:k}=schnorrGetExtPubKey(k_),e=challenge(rx,px,m),sig=new Uint8Array(64);if(sig.set(rx,0),sig.set(numTo32b(modN(k+e*d)),32),!schnorrVerify(sig,m,px))throw new Error("sign: Invalid signature produced");return sig}function schnorrVerify(signature,message,publicKey){const sig=(0,utils_js_1.ensureBytes)("signature",signature,64),m=(0,utils_js_1.ensureBytes)("message",message),pub=(0,utils_js_1.ensureBytes)("publicKey",publicKey,32);try{const P=lift_x((0,utils_js_1.bytesToNumberBE)(pub)),r=(0,utils_js_1.bytesToNumberBE)(sig.subarray(0,32));if(!fe(r))return!1;const s=(0,utils_js_1.bytesToNumberBE)(sig.subarray(32,64));if(!ge(s))return!1;const e=challenge(numTo32b(r),pointToBytes(P),m),R=GmulAdd(P,s,modN(-e));return!(!R||!R.hasEvenY()||R.toAffine().x!==r)}catch(error){return!1}}exports.schnorr={getPublicKey:schnorrGetPublicKey,sign:schnorrSign,verify:schnorrVerify,utils:{randomPrivateKey:exports.secp256k1.utils.randomPrivateKey,lift_x:lift_x,pointToBytes:pointToBytes,numberToBytesBE:utils_js_1.numberToBytesBE,bytesToNumberBE:utils_js_1.bytesToNumberBE,taggedHash:taggedHash,mod:modular_js_1.mod}};const isoMap=(()=>(0,hash_to_curve_js_1.isogenyMap)(Fp,[["0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7","0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581","0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262","0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"],["0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b","0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14","0x0000000000000000000000000000000000000000000000000000000000000001"],["0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c","0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3","0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931","0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"],["0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b","0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573","0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f","0x0000000000000000000000000000000000000000000000000000000000000001"]].map((i=>i.map((j=>BigInt(j)))))))(),mapSWU=(()=>(0,weierstrass_js_1.mapToCurveSimpleSWU)(Fp,{A:BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),B:BigInt("1771"),Z:Fp.create(BigInt("-11"))}))(),htf=(()=>(0,hash_to_curve_js_1.createHasher)(exports.secp256k1.ProjectivePoint,(scalars=>{const{x:x,y:y}=mapSWU(Fp.create(scalars[0]));return isoMap(x,y)}),{DST:"secp256k1_XMD:SHA-256_SSWU_RO_",encodeDST:"secp256k1_XMD:SHA-256_SSWU_NU_",p:Fp.ORDER,m:1,k:128,expand:"xmd",hash:sha256_1.sha256}))();exports.hashToCurve=htf.hashToCurve,exports.encodeToCurve=htf.encodeToCurve;