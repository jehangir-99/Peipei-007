"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Eth=void 0;const constants_1=require("../eth/constants"),methods_1=require("../communication/methods"),inputFormatters={defaultBlockParam:(arg="latest")=>arg,returnFullTxObjectParam:(arg=!1)=>arg,blockNumberToHex:arg=>Number.isInteger(arg)?`0x${arg.toString(16)}`:arg};class Eth{constructor(communicator){this.communicator=communicator,this.call=this.buildRequest({call:constants_1.RPC_CALLS.eth_call,formatters:[null,inputFormatters.defaultBlockParam]}),this.getBalance=this.buildRequest({call:constants_1.RPC_CALLS.eth_getBalance,formatters:[null,inputFormatters.defaultBlockParam]}),this.getCode=this.buildRequest({call:constants_1.RPC_CALLS.eth_getCode,formatters:[null,inputFormatters.defaultBlockParam]}),this.getStorageAt=this.buildRequest({call:constants_1.RPC_CALLS.eth_getStorageAt,formatters:[null,inputFormatters.blockNumberToHex,inputFormatters.defaultBlockParam]}),this.getPastLogs=this.buildRequest({call:constants_1.RPC_CALLS.eth_getLogs}),this.getBlockByHash=this.buildRequest({call:constants_1.RPC_CALLS.eth_getBlockByHash,formatters:[null,inputFormatters.returnFullTxObjectParam]}),this.getBlockByNumber=this.buildRequest({call:constants_1.RPC_CALLS.eth_getBlockByNumber,formatters:[inputFormatters.blockNumberToHex,inputFormatters.returnFullTxObjectParam]}),this.getTransactionByHash=this.buildRequest({call:constants_1.RPC_CALLS.eth_getTransactionByHash}),this.getTransactionReceipt=this.buildRequest({call:constants_1.RPC_CALLS.eth_getTransactionReceipt}),this.getTransactionCount=this.buildRequest({call:constants_1.RPC_CALLS.eth_getTransactionCount,formatters:[null,inputFormatters.defaultBlockParam]}),this.getGasPrice=this.buildRequest({call:constants_1.RPC_CALLS.eth_gasPrice}),this.getEstimateGas=transaction=>this.buildRequest({call:constants_1.RPC_CALLS.eth_estimateGas})([transaction]),this.setSafeSettings=this.buildRequest({call:constants_1.RPC_CALLS.safe_setSettings})}buildRequest(args){const{call:call,formatters:formatters}=args;return async params=>{formatters&&Array.isArray(params)&&formatters.forEach(((formatter,i)=>{formatter&&(params[i]=formatter(params[i]))}));const payload={call:call,params:params||[]};return(await this.communicator.send(methods_1.Methods.rpcCall,payload)).data}}}exports.Eth=Eth;