"use strict";var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.Safe=void 0;const viem_1=require("viem"),signatures_1=require("./signatures"),methods_1=require("../communication/methods"),constants_1=require("../eth/constants"),types_1=require("../types"),requirePermissions_1=__importDefault(require("../decorators/requirePermissions"));class Safe{constructor(communicator){this.communicator=communicator}async getChainInfo(){return(await this.communicator.send(methods_1.Methods.getChainInfo,void 0)).data}async getInfo(){return(await this.communicator.send(methods_1.Methods.getSafeInfo,void 0)).data}async experimental_getBalances({currency:currency="usd"}={}){return(await this.communicator.send(methods_1.Methods.getSafeBalances,{currency:currency})).data}async check1271Signature(messageHash,signature="0x"){const safeInfo=await this.getInfo(),encodedIsValidSignatureCall=(0,viem_1.encodeFunctionData)({abi:[{constant:!1,inputs:[{name:"_dataHash",type:"bytes32"},{name:"_signature",type:"bytes"}],name:"isValidSignature",outputs:[{name:"",type:"bytes4"}],payable:!1,stateMutability:"nonpayable",type:"function"}],functionName:"isValidSignature",args:[messageHash,signature]}),payload={call:constants_1.RPC_CALLS.eth_call,params:[{to:safeInfo.safeAddress,data:encodedIsValidSignatureCall},"latest"]};try{return(await this.communicator.send(methods_1.Methods.rpcCall,payload)).data.slice(0,10).toLowerCase()===signatures_1.MAGIC_VALUE}catch(err){return!1}}async check1271SignatureBytes(messageHash,signature="0x"){const safeInfo=await this.getInfo(),encodedIsValidSignatureCall=(0,viem_1.encodeFunctionData)({abi:[{constant:!1,inputs:[{name:"_data",type:"bytes"},{name:"_signature",type:"bytes"}],name:"isValidSignature",outputs:[{name:"",type:"bytes4"}],payable:!1,stateMutability:"nonpayable",type:"function"}],functionName:"isValidSignature",args:[messageHash,signature]}),payload={call:constants_1.RPC_CALLS.eth_call,params:[{to:safeInfo.safeAddress,data:encodedIsValidSignatureCall},"latest"]};try{return(await this.communicator.send(methods_1.Methods.rpcCall,payload)).data.slice(0,10).toLowerCase()===signatures_1.MAGIC_VALUE_BYTES}catch(err){return!1}}calculateMessageHash(message){return(0,viem_1.hashMessage)(message)}calculateTypedMessageHash(typedMessage){const chainId="object"==typeof typedMessage.domain.chainId?typedMessage.domain.chainId.toNumber():Number(typedMessage.domain.chainId);let primaryType=typedMessage.primaryType;if(!primaryType){const fields=Object.values(typedMessage.types),primaryTypes=Object.keys(typedMessage.types).filter((typeName=>fields.every((dataTypes=>dataTypes.every((({type:type})=>type.replace("[","").replace("]","")!==typeName))))));if(0===primaryTypes.length||primaryTypes.length>1)throw new Error("Please specify primaryType");primaryType=primaryTypes[0]}return(0,viem_1.hashTypedData)({message:typedMessage.message,domain:Object.assign(Object.assign({},typedMessage.domain),{chainId:chainId,verifyingContract:typedMessage.domain.verifyingContract,salt:typedMessage.domain.salt}),types:typedMessage.types,primaryType:primaryType})}async getOffChainSignature(messageHash){return(await this.communicator.send(methods_1.Methods.getOffChainSignature,messageHash)).data}async isMessageSigned(message,signature="0x"){let check;if("string"==typeof message&&(check=async()=>{const messageHash=this.calculateMessageHash(message);return await this.isMessageHashSigned(messageHash,signature)}),(0,types_1.isObjectEIP712TypedData)(message)&&(check=async()=>{const messageHash=this.calculateTypedMessageHash(message);return await this.isMessageHashSigned(messageHash,signature)}),check){return await check()}throw new Error("Invalid message type")}async isMessageHashSigned(messageHash,signature="0x"){const checks=[this.check1271Signature.bind(this),this.check1271SignatureBytes.bind(this)];for(const check of checks){if(await check(messageHash,signature))return!0}return!1}async getEnvironmentInfo(){return(await this.communicator.send(methods_1.Methods.getEnvironmentInfo,void 0)).data}async requestAddressBook(){return(await this.communicator.send(methods_1.Methods.requestAddressBook,void 0)).data}}__decorate([(0,requirePermissions_1.default)()],Safe.prototype,"requestAddressBook",null),exports.Safe=Safe;