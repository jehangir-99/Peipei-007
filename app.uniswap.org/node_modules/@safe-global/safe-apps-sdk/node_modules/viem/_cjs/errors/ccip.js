"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.OffchainLookupSenderMismatchError=exports.OffchainLookupResponseMalformedError=exports.OffchainLookupError=void 0;const stringify_js_1=require("../utils/stringify.js"),base_js_1=require("./base.js"),utils_js_1=require("./utils.js");class OffchainLookupError extends base_js_1.BaseError{constructor({callbackSelector:callbackSelector,cause:cause,data:data,extraData:extraData,sender:sender,urls:urls}){super(cause.shortMessage||"An error occurred while fetching for an offchain result.",{cause:cause,metaMessages:[...cause.metaMessages||[],cause.metaMessages?.length?"":[],"Offchain Gateway Call:",urls&&["  Gateway URL(s):",...urls.map((url=>`    ${(0,utils_js_1.getUrl)(url)}`))],`  Sender: ${sender}`,`  Data: ${data}`,`  Callback selector: ${callbackSelector}`,`  Extra data: ${extraData}`].flat()}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupError"})}}exports.OffchainLookupError=OffchainLookupError;class OffchainLookupResponseMalformedError extends base_js_1.BaseError{constructor({result:result,url:url}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${(0,utils_js_1.getUrl)(url)}`,`Response: ${(0,stringify_js_1.stringify)(result)}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupResponseMalformedError"})}}exports.OffchainLookupResponseMalformedError=OffchainLookupResponseMalformedError;class OffchainLookupSenderMismatchError extends base_js_1.BaseError{constructor({sender:sender,to:to}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${to}`,`OffchainLookup sender address: ${sender}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupSenderMismatchError"})}}exports.OffchainLookupSenderMismatchError=OffchainLookupSenderMismatchError;