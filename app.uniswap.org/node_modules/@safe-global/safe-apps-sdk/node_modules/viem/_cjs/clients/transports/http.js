"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.http=void 0;const request_js_1=require("../../errors/request.js"),transport_js_1=require("../../errors/transport.js"),createBatchScheduler_js_1=require("../../utils/promise/createBatchScheduler.js"),rpc_js_1=require("../../utils/rpc.js"),createTransport_js_1=require("./createTransport.js");function http(url,config={}){const{batch:batch,fetchOptions:fetchOptions,key:key="http",name:name="HTTP JSON-RPC",retryDelay:retryDelay}=config;return({chain:chain,retryCount:retryCount_,timeout:timeout_})=>{const{batchSize:batchSize=1e3,wait:wait=0}="object"==typeof batch?batch:{},retryCount=config.retryCount??retryCount_,timeout=timeout_??config.timeout??1e4,url_=url||chain?.rpcUrls.default.http[0];if(!url_)throw new transport_js_1.UrlRequiredError;return(0,createTransport_js_1.createTransport)({key:key,name:name,async request({method:method,params:params}){const body={method:method,params:params},{schedule:schedule}=(0,createBatchScheduler_js_1.createBatchScheduler)({id:`${url}`,wait:wait,shouldSplitBatch:requests=>requests.length>batchSize,fn:body=>rpc_js_1.rpc.http(url_,{body:body,fetchOptions:fetchOptions,timeout:timeout}),sort:(a,b)=>a.id-b.id}),[{error:error,result:result}]=await(async body=>batch?schedule(body):[await rpc_js_1.rpc.http(url_,{body:body,fetchOptions:fetchOptions,timeout:timeout})])(body);if(error)throw new request_js_1.RpcRequestError({body:body,error:error,url:url_});return result},retryCount:retryCount,retryDelay:retryDelay,timeout:timeout,type:"http"},{fetchOptions:fetchOptions,url:url})}}exports.http=http;