"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.decodeAbiParameters=void 0;const abi_js_1=require("../../errors/abi.js"),getAddress_js_1=require("../address/getAddress.js"),size_js_1=require("../data/size.js"),slice_js_1=require("../data/slice.js"),trim_js_1=require("../data/trim.js"),fromHex_js_1=require("../encoding/fromHex.js"),encodeAbiParameters_js_1=require("./encodeAbiParameters.js");function decodeAbiParameters(params,data){if("0x"===data&&params.length>0)throw new abi_js_1.AbiDecodingZeroDataError;if((0,size_js_1.size)(data)&&(0,size_js_1.size)(data)<32)throw new abi_js_1.AbiDecodingDataSizeTooSmallError({data:data,params:params,size:(0,size_js_1.size)(data)});return decodeParams({data:data,params:params})}function decodeParams({data:data,params:params}){const decodedValues=[];let position=0;for(let i=0;i<params.length;i++){if(position>=(0,size_js_1.size)(data))throw new abi_js_1.AbiDecodingDataSizeTooSmallError({data:data,params:params,size:(0,size_js_1.size)(data)});const param=params[i],{consumed:consumed,value:value}=decodeParam({data:data,param:param,position:position});decodedValues.push(value),position+=consumed}return decodedValues}function decodeParam({data:data,param:param,position:position}){const arrayComponents=(0,encodeAbiParameters_js_1.getArrayComponents)(param.type);if(arrayComponents){const[length,type]=arrayComponents;return decodeArray(data,{length:length,param:{...param,type:type},position:position})}if("tuple"===param.type)return decodeTuple(data,{param:param,position:position});if("string"===param.type)return decodeString(data,{position:position});if(param.type.startsWith("bytes"))return decodeBytes(data,{param:param,position:position});const value=(0,slice_js_1.slice)(data,position,position+32,{strict:!0});if(param.type.startsWith("uint")||param.type.startsWith("int"))return decodeNumber(value,{param:param});if("address"===param.type)return decodeAddress(value);if("bool"===param.type)return decodeBool(value);throw new abi_js_1.InvalidAbiDecodingTypeError(param.type,{docsPath:"/docs/contract/decodeAbiParameters"})}function decodeAddress(value){return{consumed:32,value:(0,getAddress_js_1.checksumAddress)((0,slice_js_1.slice)(value,-20))}}function decodeArray(data,{param:param,length:length,position:position}){if(!length){const offset=(0,fromHex_js_1.hexToNumber)((0,slice_js_1.slice)(data,position,position+32,{strict:!0})),length=(0,fromHex_js_1.hexToNumber)((0,slice_js_1.slice)(data,offset,offset+32,{strict:!0}));let consumed=0;const value=[];for(let i=0;i<length;++i){const decodedChild=decodeParam({data:(0,slice_js_1.slice)(data,offset+32),param:param,position:consumed});consumed+=decodedChild.consumed,value.push(decodedChild.value)}return{value:value,consumed:32}}if(hasDynamicChild(param)){const arrayComponents=(0,encodeAbiParameters_js_1.getArrayComponents)(param.type),dynamicChild=!arrayComponents?.[0];let consumed=0;const value=[];for(let i=0;i<length;++i){const offset=(0,fromHex_js_1.hexToNumber)((0,slice_js_1.slice)(data,position,position+32,{strict:!0})),decodedChild=decodeParam({data:(0,slice_js_1.slice)(data,offset),param:param,position:dynamicChild?consumed:32*i});consumed+=decodedChild.consumed,value.push(decodedChild.value)}return{value:value,consumed:32}}let consumed=0;const value=[];for(let i=0;i<length;++i){const decodedChild=decodeParam({data:data,param:param,position:position+consumed});consumed+=decodedChild.consumed,value.push(decodedChild.value)}return{value:value,consumed:consumed}}function decodeBool(value){return{consumed:32,value:(0,fromHex_js_1.hexToBool)(value)}}function decodeBytes(data,{param:param,position:position}){const[_,size]=param.type.split("bytes");if(!size){const offset=(0,fromHex_js_1.hexToNumber)((0,slice_js_1.slice)(data,position,position+32,{strict:!0})),length=(0,fromHex_js_1.hexToNumber)((0,slice_js_1.slice)(data,offset,offset+32,{strict:!0}));if(0===length)return{consumed:32,value:"0x"};return{consumed:32,value:(0,slice_js_1.slice)(data,offset+32,offset+32+length,{strict:!0})}}return{consumed:32,value:(0,slice_js_1.slice)(data,position,position+parseInt(size),{strict:!0})}}function decodeNumber(value,{param:param}){const signed=param.type.startsWith("int");return{consumed:32,value:parseInt(param.type.split("int")[1]||"256")>48?(0,fromHex_js_1.hexToBigInt)(value,{signed:signed}):(0,fromHex_js_1.hexToNumber)(value,{signed:signed})}}function decodeString(data,{position:position}){const offset=(0,fromHex_js_1.hexToNumber)((0,slice_js_1.slice)(data,position,position+32,{strict:!0})),length=(0,fromHex_js_1.hexToNumber)((0,slice_js_1.slice)(data,offset,offset+32,{strict:!0}));if(0===length)return{consumed:32,value:""};return{consumed:32,value:(0,fromHex_js_1.hexToString)((0,trim_js_1.trim)((0,slice_js_1.slice)(data,offset+32,offset+32+length,{strict:!0})))}}function decodeTuple(data,{param:param,position:position}){const hasUnnamedChild=0===param.components.length||param.components.some((({name:name})=>!name)),value=hasUnnamedChild?[]:{};let consumed=0;if(hasDynamicChild(param)){const offset=(0,fromHex_js_1.hexToNumber)((0,slice_js_1.slice)(data,position,position+32,{strict:!0}));for(let i=0;i<param.components.length;++i){const component=param.components[i],decodedChild=decodeParam({data:(0,slice_js_1.slice)(data,offset),param:component,position:consumed});consumed+=decodedChild.consumed,value[hasUnnamedChild?i:component?.name]=decodedChild.value}return{consumed:32,value:value}}for(let i=0;i<param.components.length;++i){const component=param.components[i],decodedChild=decodeParam({data:data,param:component,position:position+consumed});consumed+=decodedChild.consumed,value[hasUnnamedChild?i:component?.name]=decodedChild.value}return{consumed:consumed,value:value}}function hasDynamicChild(param){const{type:type}=param;if("string"===type)return!0;if("bytes"===type)return!0;if(type.endsWith("[]"))return!0;if("tuple"===type)return param.components?.some(hasDynamicChild);const arrayComponents=(0,encodeAbiParameters_js_1.getArrayComponents)(param.type);return!(!arrayComponents||!hasDynamicChild({...param,type:arrayComponents[1]}))}exports.decodeAbiParameters=decodeAbiParameters;