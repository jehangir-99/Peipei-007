"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.stringToBytes=exports.numberToBytes=exports.hexToBytes=exports.boolToBytes=exports.toBytes=void 0;const base_js_1=require("../../errors/base.js"),isHex_js_1=require("../data/isHex.js"),pad_js_1=require("../data/pad.js"),fromHex_js_1=require("./fromHex.js"),toHex_js_1=require("./toHex.js"),encoder=new TextEncoder;function toBytes(value,opts={}){return"number"==typeof value||"bigint"==typeof value?numberToBytes(value,opts):"boolean"==typeof value?boolToBytes(value,opts):(0,isHex_js_1.isHex)(value)?hexToBytes(value,opts):stringToBytes(value,opts)}function boolToBytes(value,opts={}){const bytes=new Uint8Array(1);return bytes[0]=Number(value),"number"==typeof opts.size?((0,fromHex_js_1.assertSize)(bytes,{size:opts.size}),(0,pad_js_1.pad)(bytes,{size:opts.size})):bytes}exports.toBytes=toBytes,exports.boolToBytes=boolToBytes;const charCodeMap={zero:48,nine:57,A:65,F:70,a:97,f:102};function charCodeToBase16(char){return char>=charCodeMap.zero&&char<=charCodeMap.nine?char-charCodeMap.zero:char>=charCodeMap.A&&char<=charCodeMap.F?char-(charCodeMap.A-10):char>=charCodeMap.a&&char<=charCodeMap.f?char-(charCodeMap.a-10):void 0}function hexToBytes(hex_,opts={}){let hex=hex_;opts.size&&((0,fromHex_js_1.assertSize)(hex,{size:opts.size}),hex=(0,pad_js_1.pad)(hex,{dir:"right",size:opts.size}));let hexString=hex.slice(2);hexString.length%2&&(hexString=`0${hexString}`);const length=hexString.length/2,bytes=new Uint8Array(length);for(let index=0,j=0;index<length;index++){const nibbleLeft=charCodeToBase16(hexString.charCodeAt(j++)),nibbleRight=charCodeToBase16(hexString.charCodeAt(j++));if(void 0===nibbleLeft||void 0===nibbleRight)throw new base_js_1.BaseError(`Invalid byte sequence ("${hexString[j-2]}${hexString[j-1]}" in "${hexString}").`);bytes[index]=16*nibbleLeft+nibbleRight}return bytes}function numberToBytes(value,opts){return hexToBytes((0,toHex_js_1.numberToHex)(value,opts))}function stringToBytes(value,opts={}){const bytes=encoder.encode(value);return"number"==typeof opts.size?((0,fromHex_js_1.assertSize)(bytes,{size:opts.size}),(0,pad_js_1.pad)(bytes,{dir:"right",size:opts.size})):bytes}exports.hexToBytes=hexToBytes,exports.numberToBytes=numberToBytes,exports.stringToBytes=stringToBytes;