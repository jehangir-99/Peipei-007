"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getArrayComponents=exports.encodeAbiParameters=void 0;const abi_js_1=require("../../errors/abi.js"),address_js_1=require("../../errors/address.js"),isAddress_js_1=require("../address/isAddress.js"),concat_js_1=require("../data/concat.js"),pad_js_1=require("../data/pad.js"),size_js_1=require("../data/size.js"),slice_js_1=require("../data/slice.js"),toHex_js_1=require("../encoding/toHex.js");function encodeAbiParameters(params,values){if(params.length!==values.length)throw new abi_js_1.AbiEncodingLengthMismatchError({expectedLength:params.length,givenLength:values.length});const data=encodeParams(prepareParams({params:params,values:values}));return 0===data.length?"0x":data}function prepareParams({params:params,values:values}){const preparedParams=[];for(let i=0;i<params.length;i++)preparedParams.push(prepareParam({param:params[i],value:values[i]}));return preparedParams}function prepareParam({param:param,value:value}){const arrayComponents=getArrayComponents(param.type);if(arrayComponents){const[length,type]=arrayComponents;return encodeArray(value,{length:length,param:{...param,type:type}})}if("tuple"===param.type)return encodeTuple(value,{param:param});if("address"===param.type)return encodeAddress(value);if("bool"===param.type)return encodeBool(value);if(param.type.startsWith("uint")||param.type.startsWith("int")){return encodeNumber(value,{signed:param.type.startsWith("int")})}if(param.type.startsWith("bytes"))return encodeBytes(value,{param:param});if("string"===param.type)return encodeString(value);throw new abi_js_1.InvalidAbiEncodingTypeError(param.type,{docsPath:"/docs/contract/encodeAbiParameters"})}function encodeParams(preparedParams){let staticSize=0;for(let i=0;i<preparedParams.length;i++){const{dynamic:dynamic,encoded:encoded}=preparedParams[i];staticSize+=dynamic?32:(0,size_js_1.size)(encoded)}const staticParams=[],dynamicParams=[];let dynamicSize=0;for(let i=0;i<preparedParams.length;i++){const{dynamic:dynamic,encoded:encoded}=preparedParams[i];dynamic?(staticParams.push((0,toHex_js_1.numberToHex)(staticSize+dynamicSize,{size:32})),dynamicParams.push(encoded),dynamicSize+=(0,size_js_1.size)(encoded)):staticParams.push(encoded)}return(0,concat_js_1.concat)([...staticParams,...dynamicParams])}function encodeAddress(value){if(!(0,isAddress_js_1.isAddress)(value))throw new address_js_1.InvalidAddressError({address:value});return{dynamic:!1,encoded:(0,pad_js_1.padHex)(value.toLowerCase())}}function encodeArray(value,{length:length,param:param}){const dynamic=null===length;if(!Array.isArray(value))throw new abi_js_1.InvalidArrayError(value);if(!dynamic&&value.length!==length)throw new abi_js_1.AbiEncodingArrayLengthMismatchError({expectedLength:length,givenLength:value.length,type:`${param.type}[${length}]`});let dynamicChild=!1;const preparedParams=[];for(let i=0;i<value.length;i++){const preparedParam=prepareParam({param:param,value:value[i]});preparedParam.dynamic&&(dynamicChild=!0),preparedParams.push(preparedParam)}if(dynamic||dynamicChild){const data=encodeParams(preparedParams);if(dynamic){const length=(0,toHex_js_1.numberToHex)(preparedParams.length,{size:32});return{dynamic:!0,encoded:preparedParams.length>0?(0,concat_js_1.concat)([length,data]):length}}if(dynamicChild)return{dynamic:!0,encoded:data}}return{dynamic:!1,encoded:(0,concat_js_1.concat)(preparedParams.map((({encoded:encoded})=>encoded)))}}function encodeBytes(value,{param:param}){const[,paramSize]=param.type.split("bytes"),bytesSize=(0,size_js_1.size)(value);if(!paramSize){let value_=value;return bytesSize%32!=0&&(value_=(0,pad_js_1.padHex)(value_,{dir:"right",size:32*Math.ceil((value.length-2)/2/32)})),{dynamic:!0,encoded:(0,concat_js_1.concat)([(0,pad_js_1.padHex)((0,toHex_js_1.numberToHex)(bytesSize,{size:32})),value_])}}if(bytesSize!==parseInt(paramSize))throw new abi_js_1.AbiEncodingBytesSizeMismatchError({expectedSize:parseInt(paramSize),value:value});return{dynamic:!1,encoded:(0,pad_js_1.padHex)(value,{dir:"right"})}}function encodeBool(value){return{dynamic:!1,encoded:(0,pad_js_1.padHex)((0,toHex_js_1.boolToHex)(value))}}function encodeNumber(value,{signed:signed}){return{dynamic:!1,encoded:(0,toHex_js_1.numberToHex)(value,{size:32,signed:signed})}}function encodeString(value){const hexValue=(0,toHex_js_1.stringToHex)(value),partsLength=Math.ceil((0,size_js_1.size)(hexValue)/32),parts=[];for(let i=0;i<partsLength;i++)parts.push((0,pad_js_1.padHex)((0,slice_js_1.slice)(hexValue,32*i,32*(i+1)),{dir:"right"}));return{dynamic:!0,encoded:(0,concat_js_1.concat)([(0,pad_js_1.padHex)((0,toHex_js_1.numberToHex)((0,size_js_1.size)(hexValue),{size:32})),...parts])}}function encodeTuple(value,{param:param}){let dynamic=!1;const preparedParams=[];for(let i=0;i<param.components.length;i++){const param_=param.components[i],preparedParam=prepareParam({param:param_,value:value[Array.isArray(value)?i:param_.name]});preparedParams.push(preparedParam),preparedParam.dynamic&&(dynamic=!0)}return{dynamic:dynamic,encoded:dynamic?encodeParams(preparedParams):(0,concat_js_1.concat)(preparedParams.map((({encoded:encoded})=>encoded)))}}function getArrayComponents(type){const matches=type.match(/^(.*)\[(\d+)?\]$/);return matches?[matches[2]?Number(matches[2]):null,matches[1]]:void 0}exports.encodeAbiParameters=encodeAbiParameters,exports.getArrayComponents=getArrayComponents;