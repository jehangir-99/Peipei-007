"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.encodePacked=void 0;const abi_js_1=require("../../errors/abi.js"),address_js_1=require("../../errors/address.js"),isAddress_js_1=require("../address/isAddress.js"),concat_js_1=require("../data/concat.js"),pad_js_1=require("../data/pad.js"),toHex_js_1=require("../encoding/toHex.js"),regex_js_1=require("../regex.js");function encodePacked(types,values){if(types.length!==values.length)throw new abi_js_1.AbiEncodingLengthMismatchError({expectedLength:types.length,givenLength:values.length});const data=[];for(let i=0;i<types.length;i++){const type=types[i],value=values[i];data.push(encode(type,value))}return(0,concat_js_1.concatHex)(data)}function encode(type,value,isArray=!1){if("address"===type){const address=value;if(!(0,isAddress_js_1.isAddress)(address))throw new address_js_1.InvalidAddressError({address:address});return(0,pad_js_1.pad)(address.toLowerCase(),{size:isArray?32:null})}if("string"===type)return(0,toHex_js_1.stringToHex)(value);if("bytes"===type)return value;if("bool"===type)return(0,pad_js_1.pad)((0,toHex_js_1.boolToHex)(value),{size:isArray?32:1});const intMatch=type.match(regex_js_1.integerRegex);if(intMatch){const[_type,baseType,bits="256"]=intMatch,size=parseInt(bits)/8;return(0,toHex_js_1.numberToHex)(value,{size:isArray?32:size,signed:"int"===baseType})}const bytesMatch=type.match(regex_js_1.bytesRegex);if(bytesMatch){const[_type,size]=bytesMatch;if(parseInt(size)!==(value.length-2)/2)throw new abi_js_1.BytesSizeMismatchError({expectedSize:parseInt(size),givenSize:(value.length-2)/2});return(0,pad_js_1.pad)(value,{dir:"right",size:isArray?32:null})}const arrayMatch=type.match(regex_js_1.arrayRegex);if(arrayMatch&&Array.isArray(value)){const[_type,childType]=arrayMatch,data=[];for(let i=0;i<value.length;i++)data.push(encode(childType,value[i],!0));return 0===data.length?"0x":(0,concat_js_1.concatHex)(data)}throw new abi_js_1.UnsupportedPackedAbiType(type)}exports.encodePacked=encodePacked;