"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.domainSeparator=exports.getTypesForEIP712Domain=exports.validateTypedData=void 0;const abi_js_1=require("../errors/abi.js"),address_js_1=require("../errors/address.js"),isAddress_js_1=require("./address/isAddress.js"),size_js_1=require("./data/size.js"),toHex_js_1=require("./encoding/toHex.js"),regex_js_1=require("./regex.js"),hashTypedData_js_1=require("./signature/hashTypedData.js");function validateTypedData({domain:domain,message:message,primaryType:primaryType,types:types_}){const types=types_,validateData=(struct,value_)=>{for(const param of struct){const{name:name,type:type_}=param,type=type_,value=value_[name],integerMatch=type.match(regex_js_1.integerRegex);if(integerMatch&&("number"==typeof value||"bigint"==typeof value)){const[_type,base,size_]=integerMatch;(0,toHex_js_1.numberToHex)(value,{signed:"int"===base,size:parseInt(size_)/8})}if("address"===type&&"string"==typeof value&&!(0,isAddress_js_1.isAddress)(value))throw new address_js_1.InvalidAddressError({address:value});const bytesMatch=type.match(regex_js_1.bytesRegex);if(bytesMatch){const[_type,size_]=bytesMatch;if(size_&&(0,size_js_1.size)(value)!==parseInt(size_))throw new abi_js_1.BytesSizeMismatchError({expectedSize:parseInt(size_),givenSize:(0,size_js_1.size)(value)})}const struct=types[type];struct&&validateData(struct,value)}};if(types.EIP712Domain&&domain&&validateData(types.EIP712Domain,domain),"EIP712Domain"!==primaryType){const type=types[primaryType];validateData(type,message)}}function getTypesForEIP712Domain({domain:domain}){return["string"==typeof domain?.name&&{name:"name",type:"string"},domain?.version&&{name:"version",type:"string"},"number"==typeof domain?.chainId&&{name:"chainId",type:"uint256"},domain?.verifyingContract&&{name:"verifyingContract",type:"address"},domain?.salt&&{name:"salt",type:"bytes32"}].filter(Boolean)}function domainSeparator({domain:domain}){return(0,hashTypedData_js_1.hashDomain)({domain:domain,types:{EIP712Domain:getTypesForEIP712Domain({domain:domain})}})}exports.validateTypedData=validateTypedData,exports.getTypesForEIP712Domain=getTypesForEIP712Domain,exports.domainSeparator=domainSeparator;