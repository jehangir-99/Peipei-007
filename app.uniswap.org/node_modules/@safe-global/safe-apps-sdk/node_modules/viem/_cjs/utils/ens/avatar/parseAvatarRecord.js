"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.parseAvatarRecord=void 0;const utils_js_1=require("./utils.js");async function parseAvatarRecord(client,{gatewayUrls:gatewayUrls,record:record}){return/eip155:/i.test(record)?parseNftAvatarUri(client,{gatewayUrls:gatewayUrls,record:record}):(0,utils_js_1.parseAvatarUri)({uri:record,gatewayUrls:gatewayUrls})}async function parseNftAvatarUri(client,{gatewayUrls:gatewayUrls,record:record}){const nft=(0,utils_js_1.parseNftUri)(record),nftUri=await(0,utils_js_1.getNftTokenUri)(client,{nft:nft}),{uri:resolvedNftUri,isOnChain:isOnChain,isEncoded:isEncoded}=(0,utils_js_1.resolveAvatarUri)({uri:nftUri,gatewayUrls:gatewayUrls});if(isOnChain&&(resolvedNftUri.includes("data:application/json;base64,")||resolvedNftUri.startsWith("{"))){const encodedJson=isEncoded?atob(resolvedNftUri.replace("data:application/json;base64,","")):resolvedNftUri,decoded=JSON.parse(encodedJson);return(0,utils_js_1.parseAvatarUri)({uri:(0,utils_js_1.getJsonImage)(decoded),gatewayUrls:gatewayUrls})}let uriTokenId=nft.tokenID;return"erc1155"===nft.namespace&&(uriTokenId=uriTokenId.replace("0x","").padStart(64,"0")),(0,utils_js_1.getMetadataAvatarUri)({gatewayUrls:gatewayUrls,uri:resolvedNftUri.replace(/(?:0x)?{id}/,uriTokenId)})}exports.parseAvatarRecord=parseAvatarRecord;