"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.rlpToHex=exports.rlpToBytes=exports.fromRlp=void 0;const base_js_1=require("../../errors/base.js"),encoding_js_1=require("../../errors/encoding.js"),cursor_js_1=require("../cursor.js"),toBytes_js_1=require("./toBytes.js"),toHex_js_1=require("./toHex.js");function fromRlp(value,to="hex"){const bytes=(()=>{if("string"==typeof value){if(value.length>3&&value.length%2!=0)throw new encoding_js_1.InvalidHexValueError(value);return(0,toBytes_js_1.hexToBytes)(value)}return value})();return fromRlpCursor((0,cursor_js_1.createCursor)(bytes),to)}function rlpToBytes(bytes,to="bytes"){return fromRlp(bytes,to)}function rlpToHex(hex,to="hex"){return fromRlp(hex,to)}function fromRlpCursor(cursor,to="hex"){if(0===cursor.bytes.length)return"hex"===to?(0,toHex_js_1.bytesToHex)(cursor.bytes):cursor.bytes;const prefix=cursor.readByte();if(prefix<128&&cursor.decrementPosition(1),prefix<192){const length=readLength(cursor,prefix,128),bytes=cursor.readBytes(length);return"hex"===to?(0,toHex_js_1.bytesToHex)(bytes):bytes}return readList(cursor,readLength(cursor,prefix,192),to)}function readLength(cursor,prefix,offset){if(128===offset&&prefix<128)return 1;if(prefix<=offset+55)return prefix-offset;if(prefix===offset+55+1)return cursor.readUint8();if(prefix===offset+55+2)return cursor.readUint16();if(prefix===offset+55+3)return cursor.readUint24();if(prefix===offset+55+4)return cursor.readUint32();throw new base_js_1.BaseError("Invalid RLP prefix")}function readList(cursor,length,to){const position=cursor.position,value=[];for(;cursor.position-position<length;)value.push(fromRlpCursor(cursor,to));return value}exports.fromRlp=fromRlp,exports.rlpToBytes=rlpToBytes,exports.rlpToHex=rlpToHex;