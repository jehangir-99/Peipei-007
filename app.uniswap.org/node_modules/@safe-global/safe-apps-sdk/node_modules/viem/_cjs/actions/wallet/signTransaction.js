"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.signTransaction=void 0;const parseAccount_js_1=require("../../accounts/utils/parseAccount.js"),account_js_1=require("../../errors/account.js"),assertCurrentChain_js_1=require("../../utils/chain/assertCurrentChain.js"),transactionRequest_js_1=require("../../utils/formatters/transactionRequest.js"),getAction_js_1=require("../../utils/getAction.js"),index_js_1=require("../../utils/index.js"),assertRequest_js_1=require("../../utils/transaction/assertRequest.js"),getChainId_js_1=require("../public/getChainId.js");async function signTransaction(client,args){const{account:account_=client.account,chain:chain=client.chain,...transaction}=args;if(!account_)throw new account_js_1.AccountNotFoundError({docsPath:"/docs/actions/wallet/signTransaction"});const account=(0,parseAccount_js_1.parseAccount)(account_);(0,assertRequest_js_1.assertRequest)({account:account,...args});const chainId=await(0,getAction_js_1.getAction)(client,getChainId_js_1.getChainId,"getChainId")({});null!==chain&&(0,assertCurrentChain_js_1.assertCurrentChain)({currentChainId:chainId,chain:chain});const formatters=chain?.formatters||client.chain?.formatters,format=formatters?.transactionRequest?.format||transactionRequest_js_1.formatTransactionRequest;return"local"===account.type?account.signTransaction({...transaction,chainId:chainId},{serializer:client.chain?.serializers?.transaction}):await client.request({method:"eth_signTransaction",params:[{...format(transaction),chainId:(0,index_js_1.numberToHex)(chainId),from:account.address}]})}exports.signTransaction=signTransaction;