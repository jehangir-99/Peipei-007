"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getRevertErrorData=exports.call=void 0;const parseAccount_js_1=require("../../accounts/utils/parseAccount.js"),abis_js_1=require("../../constants/abis.js"),contract_js_1=require("../../constants/contract.js"),base_js_1=require("../../errors/base.js"),chain_js_1=require("../../errors/chain.js"),contract_js_2=require("../../errors/contract.js"),decodeFunctionResult_js_1=require("../../utils/abi/decodeFunctionResult.js"),encodeFunctionData_js_1=require("../../utils/abi/encodeFunctionData.js"),getChainContractAddress_js_1=require("../../utils/chain/getChainContractAddress.js"),toHex_js_1=require("../../utils/encoding/toHex.js"),getCallError_js_1=require("../../utils/errors/getCallError.js"),extract_js_1=require("../../utils/formatters/extract.js"),transactionRequest_js_1=require("../../utils/formatters/transactionRequest.js"),createBatchScheduler_js_1=require("../../utils/promise/createBatchScheduler.js"),assertRequest_js_1=require("../../utils/transaction/assertRequest.js");async function call(client,args){const{account:account_=client.account,batch:batch=Boolean(client.batch?.multicall),blockNumber:blockNumber,blockTag:blockTag="latest",accessList:accessList,data:data,gas:gas,gasPrice:gasPrice,maxFeePerGas:maxFeePerGas,maxPriorityFeePerGas:maxPriorityFeePerGas,nonce:nonce,to:to,value:value,...rest}=args,account=account_?(0,parseAccount_js_1.parseAccount)(account_):void 0;try{(0,assertRequest_js_1.assertRequest)(args);const block=(blockNumber?(0,toHex_js_1.numberToHex)(blockNumber):void 0)||blockTag,chainFormat=client.chain?.formatters?.transactionRequest?.format,request=(chainFormat||transactionRequest_js_1.formatTransactionRequest)({...(0,extract_js_1.extract)(rest,{format:chainFormat}),from:account?.address,accessList:accessList,data:data,gas:gas,gasPrice:gasPrice,maxFeePerGas:maxFeePerGas,maxPriorityFeePerGas:maxPriorityFeePerGas,nonce:nonce,to:to,value:value});if(batch&&shouldPerformMulticall({request:request}))try{return await scheduleMulticall(client,{...request,blockNumber:blockNumber,blockTag:blockTag})}catch(err){if(!(err instanceof chain_js_1.ClientChainNotConfiguredError||err instanceof chain_js_1.ChainDoesNotSupportContract))throw err}const response=await client.request({method:"eth_call",params:block?[request,block]:[request]});return"0x"===response?{data:void 0}:{data:response}}catch(err){const data=getRevertErrorData(err),{offchainLookup:offchainLookup,offchainLookupSignature:offchainLookupSignature}=await Promise.resolve().then((()=>require("../../utils/ccip.js")));if(data?.slice(0,10)===offchainLookupSignature&&to)return{data:await offchainLookup(client,{data:data,to:to})};throw(0,getCallError_js_1.getCallError)(err,{...args,account:account,chain:client.chain})}}function shouldPerformMulticall({request:request}){const{data:data,to:to,...request_}=request;return!!data&&(!data.startsWith(contract_js_1.aggregate3Signature)&&(!!to&&!(Object.values(request_).filter((x=>void 0!==x)).length>0)))}async function scheduleMulticall(client,args){const{batchSize:batchSize=1024,wait:wait=0}="object"==typeof client.batch?.multicall?client.batch.multicall:{},{blockNumber:blockNumber,blockTag:blockTag="latest",data:data,multicallAddress:multicallAddress_,to:to}=args;let multicallAddress=multicallAddress_;if(!multicallAddress){if(!client.chain)throw new chain_js_1.ClientChainNotConfiguredError;multicallAddress=(0,getChainContractAddress_js_1.getChainContractAddress)({blockNumber:blockNumber,chain:client.chain,contract:"multicall3"})}const block=(blockNumber?(0,toHex_js_1.numberToHex)(blockNumber):void 0)||blockTag,{schedule:schedule}=(0,createBatchScheduler_js_1.createBatchScheduler)({id:`${client.uid}.${block}`,wait:wait,shouldSplitBatch(args){const size=args.reduce(((size,{data:data})=>size+(data.length-2)),0);return size>2*batchSize},fn:async requests=>{const calls=requests.map((request=>({allowFailure:!0,callData:request.data,target:request.to}))),calldata=(0,encodeFunctionData_js_1.encodeFunctionData)({abi:abis_js_1.multicall3Abi,args:[calls],functionName:"aggregate3"}),data=await client.request({method:"eth_call",params:[{data:calldata,to:multicallAddress},block]});return(0,decodeFunctionResult_js_1.decodeFunctionResult)({abi:abis_js_1.multicall3Abi,args:[calls],functionName:"aggregate3",data:data||"0x"})}}),[{returnData:returnData,success:success}]=await schedule({data:data,to:to});if(!success)throw new contract_js_2.RawContractError({data:returnData});return"0x"===returnData?{data:void 0}:{data:returnData}}function getRevertErrorData(err){if(!(err instanceof base_js_1.BaseError))return;const error=err.walk();return"object"==typeof error.data?error.data.data:error.data}exports.call=call,exports.getRevertErrorData=getRevertErrorData;