"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.signTypedData=void 0;const parseAccount_js_1=require("../../accounts/utils/parseAccount.js"),account_js_1=require("../../errors/account.js"),isHex_js_1=require("../../utils/data/isHex.js"),stringify_js_1=require("../../utils/stringify.js"),typedData_js_1=require("../../utils/typedData.js");async function signTypedData(client,{account:account_=client.account,domain:domain,message:message,primaryType:primaryType,types:types_}){if(!account_)throw new account_js_1.AccountNotFoundError({docsPath:"/docs/actions/wallet/signTypedData"});const account=(0,parseAccount_js_1.parseAccount)(account_),types={EIP712Domain:(0,typedData_js_1.getTypesForEIP712Domain)({domain:domain}),...types_};if((0,typedData_js_1.validateTypedData)({domain:domain,message:message,primaryType:primaryType,types:types}),"local"===account.type)return account.signTypedData({domain:domain,primaryType:primaryType,types:types,message:message});const typedData=(0,stringify_js_1.stringify)({domain:domain??{},primaryType:primaryType,types:types,message:message},((_,value)=>(0,isHex_js_1.isHex)(value)?value.toLowerCase():value));return client.request({method:"eth_signTypedData_v4",params:[account.address,typedData]})}exports.signTypedData=signTypedData;