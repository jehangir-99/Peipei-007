"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.estimateGas=void 0;const parseAccount_js_1=require("../../accounts/utils/parseAccount.js"),account_js_1=require("../../errors/account.js"),toHex_js_1=require("../../utils/encoding/toHex.js"),getEstimateGasError_js_1=require("../../utils/errors/getEstimateGasError.js"),extract_js_1=require("../../utils/formatters/extract.js"),transactionRequest_js_1=require("../../utils/formatters/transactionRequest.js"),assertRequest_js_1=require("../../utils/transaction/assertRequest.js"),prepareTransactionRequest_js_1=require("../wallet/prepareTransactionRequest.js");async function estimateGas(client,args){const account_=args.account??client.account;if(!account_)throw new account_js_1.AccountNotFoundError({docsPath:"/docs/actions/public/estimateGas"});const account=(0,parseAccount_js_1.parseAccount)(account_);try{const{accessList:accessList,blockNumber:blockNumber,blockTag:blockTag,data:data,gas:gas,gasPrice:gasPrice,maxFeePerGas:maxFeePerGas,maxPriorityFeePerGas:maxPriorityFeePerGas,nonce:nonce,to:to,value:value,...rest}="local"===account.type?await(0,prepareTransactionRequest_js_1.prepareTransactionRequest)(client,args):args,block=(blockNumber?(0,toHex_js_1.numberToHex)(blockNumber):void 0)||blockTag;(0,assertRequest_js_1.assertRequest)(args);const chainFormat=client.chain?.formatters?.transactionRequest?.format,request=(chainFormat||transactionRequest_js_1.formatTransactionRequest)({...(0,extract_js_1.extract)(rest,{format:chainFormat}),from:account.address,accessList:accessList,data:data,gas:gas,gasPrice:gasPrice,maxFeePerGas:maxFeePerGas,maxPriorityFeePerGas:maxPriorityFeePerGas,nonce:nonce,to:to,value:value}),balance=await client.request({method:"eth_estimateGas",params:block?[request,block]:[request]});return BigInt(balance)}catch(err){throw(0,getEstimateGasError_js_1.getEstimateGasError)(err,{...args,account:account,chain:client.chain})}}exports.estimateGas=estimateGas;