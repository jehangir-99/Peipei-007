"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getEnsText=void 0;const abis_js_1=require("../../constants/abis.js"),decodeFunctionResult_js_1=require("../../utils/abi/decodeFunctionResult.js"),encodeFunctionData_js_1=require("../../utils/abi/encodeFunctionData.js"),getChainContractAddress_js_1=require("../../utils/chain/getChainContractAddress.js"),toHex_js_1=require("../../utils/encoding/toHex.js"),errors_js_1=require("../../utils/ens/errors.js"),namehash_js_1=require("../../utils/ens/namehash.js"),packetToBytes_js_1=require("../../utils/ens/packetToBytes.js"),getAction_js_1=require("../../utils/getAction.js"),readContract_js_1=require("../public/readContract.js");async function getEnsText(client,{blockNumber:blockNumber,blockTag:blockTag,name:name,key:key,universalResolverAddress:universalResolverAddress_}){let universalResolverAddress=universalResolverAddress_;if(!universalResolverAddress){if(!client.chain)throw new Error("client chain not configured. universalResolverAddress is required.");universalResolverAddress=(0,getChainContractAddress_js_1.getChainContractAddress)({blockNumber:blockNumber,chain:client.chain,contract:"ensUniversalResolver"})}try{const res=await(0,getAction_js_1.getAction)(client,readContract_js_1.readContract,"readContract")({address:universalResolverAddress,abi:abis_js_1.universalResolverResolveAbi,functionName:"resolve",args:[(0,toHex_js_1.toHex)((0,packetToBytes_js_1.packetToBytes)(name)),(0,encodeFunctionData_js_1.encodeFunctionData)({abi:abis_js_1.textResolverAbi,functionName:"text",args:[(0,namehash_js_1.namehash)(name),key]})],blockNumber:blockNumber,blockTag:blockTag});if("0x"===res[0])return null;const record=(0,decodeFunctionResult_js_1.decodeFunctionResult)({abi:abis_js_1.textResolverAbi,functionName:"text",data:res[0]});return""===record?null:record}catch(err){if((0,errors_js_1.isNullUniversalResolverError)(err,"resolve"))return null;throw err}}exports.getEnsText=getEnsText;