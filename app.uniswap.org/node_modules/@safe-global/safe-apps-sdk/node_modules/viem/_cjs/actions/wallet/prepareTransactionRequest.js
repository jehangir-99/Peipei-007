"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.prepareTransactionRequest=void 0;const parseAccount_js_1=require("../../accounts/utils/parseAccount.js"),estimateFeesPerGas_js_1=require("../../actions/public/estimateFeesPerGas.js"),estimateGas_js_1=require("../../actions/public/estimateGas.js"),getBlock_js_1=require("../../actions/public/getBlock.js"),getTransactionCount_js_1=require("../../actions/public/getTransactionCount.js"),account_js_1=require("../../errors/account.js"),fee_js_1=require("../../errors/fee.js"),getAction_js_1=require("../../utils/getAction.js"),assertRequest_js_1=require("../../utils/transaction/assertRequest.js"),getTransactionType_js_1=require("../../utils/transaction/getTransactionType.js");async function prepareTransactionRequest(client,args){const{account:account_=client.account,chain:chain,gas:gas,nonce:nonce,type:type}=args;if(!account_)throw new account_js_1.AccountNotFoundError;const account=(0,parseAccount_js_1.parseAccount)(account_),block=await(0,getAction_js_1.getAction)(client,getBlock_js_1.getBlock,"getBlock")({blockTag:"latest"}),request={...args,from:account.address};if(void 0===nonce&&(request.nonce=await(0,getAction_js_1.getAction)(client,getTransactionCount_js_1.getTransactionCount,"getTransactionCount")({address:account.address,blockTag:"pending"})),void 0===type)try{request.type=(0,getTransactionType_js_1.getTransactionType)(request)}catch{request.type="bigint"==typeof block.baseFeePerGas?"eip1559":"legacy"}if("eip1559"===request.type){const{maxFeePerGas:maxFeePerGas,maxPriorityFeePerGas:maxPriorityFeePerGas}=await(0,estimateFeesPerGas_js_1.internal_estimateFeesPerGas)(client,{block:block,chain:chain,request:request});if(void 0===args.maxPriorityFeePerGas&&args.maxFeePerGas&&args.maxFeePerGas<maxPriorityFeePerGas)throw new fee_js_1.MaxFeePerGasTooLowError({maxPriorityFeePerGas:maxPriorityFeePerGas});request.maxPriorityFeePerGas=maxPriorityFeePerGas,request.maxFeePerGas=maxFeePerGas}else{if(void 0!==args.maxFeePerGas||void 0!==args.maxPriorityFeePerGas)throw new fee_js_1.Eip1559FeesNotSupportedError;const{gasPrice:gasPrice_}=await(0,estimateFeesPerGas_js_1.internal_estimateFeesPerGas)(client,{block:block,chain:chain,request:request,type:"legacy"});request.gasPrice=gasPrice_}return void 0===gas&&(request.gas=await(0,getAction_js_1.getAction)(client,estimateGas_js_1.estimateGas,"estimateGas")({...request,account:{address:account.address,type:"json-rpc"}})),(0,assertRequest_js_1.assertRequest)(request),request}exports.prepareTransactionRequest=prepareTransactionRequest;