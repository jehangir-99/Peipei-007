"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.waitForTransactionReceipt=void 0;const block_js_1=require("../../errors/block.js"),transaction_js_1=require("../../errors/transaction.js"),getAction_js_1=require("../../utils/getAction.js"),observe_js_1=require("../../utils/observe.js"),withRetry_js_1=require("../../utils/promise/withRetry.js"),stringify_js_1=require("../../utils/stringify.js"),getBlock_js_1=require("./getBlock.js"),getTransaction_js_1=require("./getTransaction.js"),getTransactionReceipt_js_1=require("./getTransactionReceipt.js"),watchBlockNumber_js_1=require("./watchBlockNumber.js");async function waitForTransactionReceipt(client,{confirmations:confirmations=1,hash:hash,onReplaced:onReplaced,pollingInterval:pollingInterval=client.pollingInterval,timeout:timeout}){const observerId=(0,stringify_js_1.stringify)(["waitForTransactionReceipt",client.uid,hash]);let transaction,replacedTransaction,receipt,retrying=!1;return new Promise(((resolve,reject)=>{timeout&&setTimeout((()=>reject(new transaction_js_1.WaitForTransactionReceiptTimeoutError({hash:hash}))),timeout);const _unobserve=(0,observe_js_1.observe)(observerId,{onReplaced:onReplaced,resolve:resolve,reject:reject},(emit=>{const _unwatch=(0,getAction_js_1.getAction)(client,watchBlockNumber_js_1.watchBlockNumber,"watchBlockNumber")({emitMissed:!0,emitOnBegin:!0,poll:!0,pollingInterval:pollingInterval,async onBlockNumber(blockNumber_){if(retrying)return;let blockNumber=blockNumber_;const done=fn=>{_unwatch(),fn(),_unobserve()};try{if(receipt){if(confirmations>1&&(!receipt.blockNumber||blockNumber-receipt.blockNumber+1n<confirmations))return;return void done((()=>emit.resolve(receipt)))}if(transaction||(retrying=!0,await(0,withRetry_js_1.withRetry)((async()=>{transaction=await(0,getAction_js_1.getAction)(client,getTransaction_js_1.getTransaction,"getTransaction")({hash:hash}),transaction.blockNumber&&(blockNumber=transaction.blockNumber)}),{delay:({count:count})=>200*~~(1<<count),retryCount:6}),retrying=!1),receipt=await(0,getAction_js_1.getAction)(client,getTransactionReceipt_js_1.getTransactionReceipt,"getTransactionReceipt")({hash:hash}),confirmations>1&&(!receipt.blockNumber||blockNumber-receipt.blockNumber+1n<confirmations))return;done((()=>emit.resolve(receipt)))}catch(err){if(transaction&&(err instanceof transaction_js_1.TransactionNotFoundError||err instanceof transaction_js_1.TransactionReceiptNotFoundError))try{replacedTransaction=transaction,retrying=!0;const block=await(0,withRetry_js_1.withRetry)((()=>(0,getAction_js_1.getAction)(client,getBlock_js_1.getBlock,"getBlock")({blockNumber:blockNumber,includeTransactions:!0})),{delay:({count:count})=>200*~~(1<<count),retryCount:6,shouldRetry:({error:error})=>error instanceof block_js_1.BlockNotFoundError});retrying=!1;const replacementTransaction=block.transactions.find((({from:from,nonce:nonce})=>from===replacedTransaction.from&&nonce===replacedTransaction.nonce));if(!replacementTransaction)return;if(receipt=await(0,getAction_js_1.getAction)(client,getTransactionReceipt_js_1.getTransactionReceipt,"getTransactionReceipt")({hash:replacementTransaction.hash}),confirmations>1&&(!receipt.blockNumber||blockNumber-receipt.blockNumber+1n<confirmations))return;let reason="replaced";replacementTransaction.to===replacedTransaction.to&&replacementTransaction.value===replacedTransaction.value?reason="repriced":replacementTransaction.from===replacementTransaction.to&&0n===replacementTransaction.value&&(reason="cancelled"),done((()=>{emit.onReplaced?.({reason:reason,replacedTransaction:replacedTransaction,transaction:replacementTransaction,transactionReceipt:receipt}),emit.resolve(receipt)}))}catch(err_){done((()=>emit.reject(err_)))}else done((()=>emit.reject(err)))}}})}))}))}exports.waitForTransactionReceipt=waitForTransactionReceipt;