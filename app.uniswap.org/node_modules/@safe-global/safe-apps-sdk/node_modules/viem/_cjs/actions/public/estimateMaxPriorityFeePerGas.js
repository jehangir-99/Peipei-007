"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.internal_estimateMaxPriorityFeePerGas=exports.estimateMaxPriorityFeePerGas=void 0;const fee_js_1=require("../../errors/fee.js"),fromHex_js_1=require("../../utils/encoding/fromHex.js"),getAction_js_1=require("../../utils/getAction.js"),getBlock_js_1=require("./getBlock.js"),getGasPrice_js_1=require("./getGasPrice.js");async function estimateMaxPriorityFeePerGas(client,args){return internal_estimateMaxPriorityFeePerGas(client,args)}async function internal_estimateMaxPriorityFeePerGas(client,args){const{block:block_,chain:chain=client.chain,request:request}=args||{};if("function"==typeof chain?.fees?.defaultPriorityFee){const block=block_||await(0,getAction_js_1.getAction)(client,getBlock_js_1.getBlock,"getBlock")({});return chain.fees.defaultPriorityFee({block:block,client:client,request:request})}if(void 0!==chain?.fees?.defaultPriorityFee)return chain?.fees?.defaultPriorityFee;try{const maxPriorityFeePerGasHex=await client.request({method:"eth_maxPriorityFeePerGas"});return(0,fromHex_js_1.hexToBigInt)(maxPriorityFeePerGasHex)}catch{const[block,gasPrice]=await Promise.all([block_?Promise.resolve(block_):(0,getAction_js_1.getAction)(client,getBlock_js_1.getBlock,"getBlock")({}),(0,getAction_js_1.getAction)(client,getGasPrice_js_1.getGasPrice,"getGasPrice")({})]);if("bigint"!=typeof block.baseFeePerGas)throw new fee_js_1.Eip1559FeesNotSupportedError;const maxPriorityFeePerGas=gasPrice-block.baseFeePerGas;return maxPriorityFeePerGas<0n?0n:maxPriorityFeePerGas}}exports.estimateMaxPriorityFeePerGas=estimateMaxPriorityFeePerGas,exports.internal_estimateMaxPriorityFeePerGas=internal_estimateMaxPriorityFeePerGas;