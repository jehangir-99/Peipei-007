"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getEnsName=void 0;const abis_js_1=require("../../constants/abis.js"),getChainContractAddress_js_1=require("../../utils/chain/getChainContractAddress.js"),toHex_js_1=require("../../utils/encoding/toHex.js"),errors_js_1=require("../../utils/ens/errors.js"),packetToBytes_js_1=require("../../utils/ens/packetToBytes.js"),getAction_js_1=require("../../utils/getAction.js"),readContract_js_1=require("../public/readContract.js");async function getEnsName(client,{address:address,blockNumber:blockNumber,blockTag:blockTag,universalResolverAddress:universalResolverAddress_}){let universalResolverAddress=universalResolverAddress_;if(!universalResolverAddress){if(!client.chain)throw new Error("client chain not configured. universalResolverAddress is required.");universalResolverAddress=(0,getChainContractAddress_js_1.getChainContractAddress)({blockNumber:blockNumber,chain:client.chain,contract:"ensUniversalResolver"})}const reverseNode=`${address.toLowerCase().substring(2)}.addr.reverse`;try{const[name,resolvedAddress]=await(0,getAction_js_1.getAction)(client,readContract_js_1.readContract,"readContract")({address:universalResolverAddress,abi:abis_js_1.universalResolverReverseAbi,functionName:"reverse",args:[(0,toHex_js_1.toHex)((0,packetToBytes_js_1.packetToBytes)(reverseNode))],blockNumber:blockNumber,blockTag:blockTag});return address.toLowerCase()!==resolvedAddress.toLowerCase()?null:name}catch(err){if((0,errors_js_1.isNullUniversalResolverError)(err,"reverse"))return null;throw err}}exports.getEnsName=getEnsName;