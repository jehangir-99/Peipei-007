"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getLogs=void 0;const abi_js_1=require("../../errors/abi.js"),decodeEventLog_js_1=require("../../utils/abi/decodeEventLog.js"),encodeEventTopics_js_1=require("../../utils/abi/encodeEventTopics.js"),toHex_js_1=require("../../utils/encoding/toHex.js"),log_js_1=require("../../utils/formatters/log.js");async function getLogs(client,{address:address,blockHash:blockHash,fromBlock:fromBlock,toBlock:toBlock,event:event,events:events_,args:args,strict:strict_}={}){const strict=strict_??!1,events=events_??(event?[event]:void 0);let logs,topics=[];return events&&(topics=[events.flatMap((event=>(0,encodeEventTopics_js_1.encodeEventTopics)({abi:[event],eventName:event.name,args:args})))],event&&(topics=topics[0])),logs=blockHash?await client.request({method:"eth_getLogs",params:[{address:address,topics:topics,blockHash:blockHash}]}):await client.request({method:"eth_getLogs",params:[{address:address,topics:topics,fromBlock:"bigint"==typeof fromBlock?(0,toHex_js_1.numberToHex)(fromBlock):fromBlock,toBlock:"bigint"==typeof toBlock?(0,toHex_js_1.numberToHex)(toBlock):toBlock}]}),logs.map((log=>{try{const{eventName:eventName,args:args}=events?(0,decodeEventLog_js_1.decodeEventLog)({abi:events,data:log.data,topics:log.topics,strict:strict}):{eventName:void 0,args:void 0};return(0,log_js_1.formatLog)(log,{args:args,eventName:eventName})}catch(err){let eventName,isUnnamed;if(err instanceof abi_js_1.DecodeLogDataMismatch||err instanceof abi_js_1.DecodeLogTopicsMismatch){if(strict)return;eventName=err.abiItem.name,isUnnamed=err.abiItem.inputs?.some((x=>!("name"in x&&x.name)))}return(0,log_js_1.formatLog)(log,{args:isUnnamed?[]:{},eventName:eventName})}})).filter(Boolean)}exports.getLogs=getLogs;