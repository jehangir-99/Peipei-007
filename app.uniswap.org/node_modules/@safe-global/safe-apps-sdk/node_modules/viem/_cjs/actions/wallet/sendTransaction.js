"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.sendTransaction=void 0;const parseAccount_js_1=require("../../accounts/utils/parseAccount.js"),account_js_1=require("../../errors/account.js"),assertCurrentChain_js_1=require("../../utils/chain/assertCurrentChain.js"),getTransactionError_js_1=require("../../utils/errors/getTransactionError.js"),extract_js_1=require("../../utils/formatters/extract.js"),transactionRequest_js_1=require("../../utils/formatters/transactionRequest.js"),getAction_js_1=require("../../utils/getAction.js"),assertRequest_js_1=require("../../utils/transaction/assertRequest.js"),getChainId_js_1=require("../public/getChainId.js"),prepareTransactionRequest_js_1=require("./prepareTransactionRequest.js"),sendRawTransaction_js_1=require("./sendRawTransaction.js");async function sendTransaction(client,args){const{account:account_=client.account,chain:chain=client.chain,accessList:accessList,data:data,gas:gas,gasPrice:gasPrice,maxFeePerGas:maxFeePerGas,maxPriorityFeePerGas:maxPriorityFeePerGas,nonce:nonce,to:to,value:value,...rest}=args;if(!account_)throw new account_js_1.AccountNotFoundError({docsPath:"/docs/actions/wallet/sendTransaction"});const account=(0,parseAccount_js_1.parseAccount)(account_);try{let chainId;if((0,assertRequest_js_1.assertRequest)(args),null!==chain&&(chainId=await(0,getAction_js_1.getAction)(client,getChainId_js_1.getChainId,"getChainId")({}),(0,assertCurrentChain_js_1.assertCurrentChain)({currentChainId:chainId,chain:chain})),"local"===account.type){const request=await(0,getAction_js_1.getAction)(client,prepareTransactionRequest_js_1.prepareTransactionRequest,"prepareTransactionRequest")({account:account,accessList:accessList,chain:chain,data:data,gas:gas,gasPrice:gasPrice,maxFeePerGas:maxFeePerGas,maxPriorityFeePerGas:maxPriorityFeePerGas,nonce:nonce,to:to,value:value,...rest});chainId||(chainId=await(0,getAction_js_1.getAction)(client,getChainId_js_1.getChainId,"getChainId")({}));const serializer=chain?.serializers?.transaction,serializedTransaction=await account.signTransaction({...request,chainId:chainId},{serializer:serializer});return await(0,getAction_js_1.getAction)(client,sendRawTransaction_js_1.sendRawTransaction,"sendRawTransaction")({serializedTransaction:serializedTransaction})}const chainFormat=client.chain?.formatters?.transactionRequest?.format,request=(chainFormat||transactionRequest_js_1.formatTransactionRequest)({...(0,extract_js_1.extract)(rest,{format:chainFormat}),accessList:accessList,data:data,from:account.address,gas:gas,gasPrice:gasPrice,maxFeePerGas:maxFeePerGas,maxPriorityFeePerGas:maxPriorityFeePerGas,nonce:nonce,to:to,value:value});return await client.request({method:"eth_sendTransaction",params:[request]})}catch(err){throw(0,getTransactionError_js_1.getTransactionError)(err,{...args,account:account,chain:args.chain||void 0})}}exports.sendTransaction=sendTransaction;