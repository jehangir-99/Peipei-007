"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.parseStructs=void 0;const regex_js_1=require("../../regex.js"),abiItem_js_1=require("../errors/abiItem.js"),abiParameter_js_1=require("../errors/abiParameter.js"),signature_js_1=require("../errors/signature.js"),struct_js_1=require("../errors/struct.js"),signatures_js_1=require("./signatures.js"),utils_js_1=require("./utils.js");function parseStructs(signatures){const shallowStructs={},signaturesLength=signatures.length;for(let i=0;i<signaturesLength;i++){const signature=signatures[i];if(!(0,signatures_js_1.isStructSignature)(signature))continue;const match=(0,signatures_js_1.execStructSignature)(signature);if(!match)throw new signature_js_1.InvalidSignatureError({signature:signature,type:"struct"});const properties=match.properties.split(";"),components=[],propertiesLength=properties.length;for(let k=0;k<propertiesLength;k++){const trimmed=properties[k].trim();if(!trimmed)continue;const abiParameter=(0,utils_js_1.parseAbiParameter)(trimmed,{type:"struct"});components.push(abiParameter)}if(!components.length)throw new signature_js_1.InvalidStructSignatureError({signature:signature});shallowStructs[match.name]=components}const resolvedStructs={},entries=Object.entries(shallowStructs),entriesLength=entries.length;for(let i=0;i<entriesLength;i++){const[name,parameters]=entries[i];resolvedStructs[name]=resolveStructs(parameters,shallowStructs)}return resolvedStructs}exports.parseStructs=parseStructs;const typeWithoutTupleRegex=/^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\[\d*?\])+?)?$/;function resolveStructs(abiParameters,structs,ancestors=new Set){const components=[],length=abiParameters.length;for(let i=0;i<length;i++){const abiParameter=abiParameters[i];if(regex_js_1.isTupleRegex.test(abiParameter.type))components.push(abiParameter);else{const match=(0,regex_js_1.execTyped)(typeWithoutTupleRegex,abiParameter.type);if(!match?.type)throw new abiParameter_js_1.InvalidAbiTypeParameterError({abiParameter:abiParameter});const{array:array,type:type}=match;if(type in structs){if(ancestors.has(type))throw new struct_js_1.CircularReferenceError({type:type});components.push({...abiParameter,type:`tuple${array??""}`,components:resolveStructs(structs[type]??[],structs,new Set([...ancestors,type]))})}else{if(!(0,utils_js_1.isSolidityType)(type))throw new abiItem_js_1.UnknownTypeError({type:type});components.push(abiParameter)}}}return components}