import{isVueViewModel,isString,isRegExp}from"./is.js";function truncate(str,max=0){return"string"!=typeof str||0===max||str.length<=max?str:`${str.slice(0,max)}...`}function snipLine(line,colno){let newLine=line;const lineLength=newLine.length;if(lineLength<=150)return newLine;colno>lineLength&&(colno=lineLength);let start=Math.max(colno-60,0);start<5&&(start=0);let end=Math.min(start+140,lineLength);return end>lineLength-5&&(end=lineLength),end===lineLength&&(start=Math.max(end-140,0)),newLine=newLine.slice(start,end),start>0&&(newLine=`'{snip} ${newLine}`),end<lineLength&&(newLine+=" {snip}"),newLine}function safeJoin(input,delimiter){if(!Array.isArray(input))return"";const output=[];for(let i=0;i<input.length;i++){const value=input[i];try{isVueViewModel(value)?output.push("[VueViewModel]"):output.push(String(value))}catch(e){output.push("[value cannot be serialized]")}}return output.join(delimiter)}function isMatchingPattern(value,pattern,requireExactStringMatch=!1){return!!isString(value)&&(isRegExp(pattern)?pattern.test(value):!!isString(pattern)&&(requireExactStringMatch?value===pattern:value.includes(pattern)))}function stringMatchesSomePattern(testString,patterns=[],requireExactStringMatch=!1){return patterns.some((pattern=>isMatchingPattern(testString,pattern,requireExactStringMatch)))}export{isMatchingPattern,safeJoin,snipLine,stringMatchesSomePattern,truncate};