import{baggageHeaderToDynamicSamplingContext}from"./baggage.js";import{uuid4}from"./misc.js";const TRACEPARENT_REGEXP=new RegExp("^[ \\t]*([0-9a-f]{32})?-?([0-9a-f]{16})?-?([01])?[ \\t]*$");function extractTraceparentData(traceparent){if(!traceparent)return;const matches=traceparent.match(TRACEPARENT_REGEXP);if(!matches)return;let parentSampled;return"1"===matches[3]?parentSampled=!0:"0"===matches[3]&&(parentSampled=!1),{traceId:matches[1],parentSampled:parentSampled,parentSpanId:matches[2]}}function tracingContextFromHeaders(sentryTrace,baggage){const traceparentData=extractTraceparentData(sentryTrace),dynamicSamplingContext=baggageHeaderToDynamicSamplingContext(baggage),{traceId:traceId,parentSpanId:parentSpanId,parentSampled:parentSampled}=traceparentData||{},propagationContext={traceId:traceId||uuid4(),spanId:uuid4().substring(16),sampled:parentSampled};return parentSpanId&&(propagationContext.parentSpanId=parentSpanId),dynamicSamplingContext&&(propagationContext.dsc=dynamicSamplingContext),{traceparentData:traceparentData,dynamicSamplingContext:dynamicSamplingContext,propagationContext:propagationContext}}function generateSentryTraceHeader(traceId=uuid4(),spanId=uuid4().substring(16),sampled){let sampledString="";return void 0!==sampled&&(sampledString=sampled?"-1":"-0"),`${traceId}-${spanId}${sampledString}`}export{TRACEPARENT_REGEXP,extractTraceparentData,generateSentryTraceHeader,tracingContextFromHeaders};