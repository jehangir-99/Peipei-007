import{node}from"./node-stack-trace.js";export{filenameIsInApp}from"./node-stack-trace.js";const STACKTRACE_FRAME_LIMIT=50,WEBPACK_ERROR_REGEXP=/\(error: (.*)\)/,STRIP_FRAME_REGEXP=/captureMessage|captureException/;function createStackParser(...parsers){const sortedParsers=parsers.sort(((a,b)=>a[0]-b[0])).map((p=>p[1]));return(stack,skipFirst=0)=>{const frames=[],lines=stack.split("\n");for(let i=skipFirst;i<lines.length;i++){const line=lines[i];if(line.length>1024)continue;const cleanedLine=WEBPACK_ERROR_REGEXP.test(line)?line.replace(WEBPACK_ERROR_REGEXP,"$1"):line;if(!cleanedLine.match(/\S*Error: /)){for(const parser of sortedParsers){const frame=parser(cleanedLine);if(frame){frames.push(frame);break}}if(frames.length>=STACKTRACE_FRAME_LIMIT)break}}return stripSentryFramesAndReverse(frames)}}function stackParserFromStackParserOptions(stackParser){return Array.isArray(stackParser)?createStackParser(...stackParser):stackParser}function stripSentryFramesAndReverse(stack){if(!stack.length)return[];const localStack=Array.from(stack);return/sentryWrapped/.test(localStack[localStack.length-1].function||"")&&localStack.pop(),localStack.reverse(),STRIP_FRAME_REGEXP.test(localStack[localStack.length-1].function||"")&&(localStack.pop(),STRIP_FRAME_REGEXP.test(localStack[localStack.length-1].function||"")&&localStack.pop()),localStack.slice(0,STACKTRACE_FRAME_LIMIT).map((frame=>({...frame,filename:frame.filename||localStack[localStack.length-1].filename,function:frame.function||"?"})))}const defaultFunctionName="<anonymous>";function getFunctionName(fn){try{return fn&&"function"==typeof fn&&fn.name||"<anonymous>"}catch(e){return"<anonymous>"}}function nodeStackLineParser(getModule){return[90,node(getModule)]}export{createStackParser,getFunctionName,nodeStackLineParser,stackParserFromStackParserOptions,stripSentryFramesAndReverse};