import{TRACING_DEFAULTS,addTracingExtensions,startIdleTransaction,getActiveTransaction}from"@sentry/core";import{logger,tracingContextFromHeaders,getDomElement}from"@sentry/utils";import{registerBackgroundTabDetection}from"./backgroundtab.js";import{startTrackingWebVitals,startTrackingLongTasks,startTrackingInteractions,addPerformanceEntries}from"./metrics/index.js";import{defaultRequestInstrumentationOptions,instrumentOutgoingRequests}from"./request.js";import{instrumentRoutingWithDefaults}from"./router.js";import{WINDOW}from"./types.js";const BROWSER_TRACING_INTEGRATION_ID="BrowserTracing",DEFAULT_BROWSER_TRACING_OPTIONS={...TRACING_DEFAULTS,markBackgroundTransactions:!0,routingInstrumentation:instrumentRoutingWithDefaults,startTransactionOnLocationChange:!0,startTransactionOnPageLoad:!0,enableLongTask:!0,_experiments:{},...defaultRequestInstrumentationOptions};class BrowserTracing{constructor(_options){this.name="BrowserTracing",this._hasSetTracePropagationTargets=!1,addTracingExtensions(),("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(this._hasSetTracePropagationTargets=!(!_options||!_options.tracePropagationTargets&&!_options.tracingOrigins)),this.options={...DEFAULT_BROWSER_TRACING_OPTIONS,..._options},void 0!==this.options._experiments.enableLongTask&&(this.options.enableLongTask=this.options._experiments.enableLongTask),_options&&!_options.tracePropagationTargets&&_options.tracingOrigins&&(this.options.tracePropagationTargets=_options.tracingOrigins),this._collectWebVitals=startTrackingWebVitals(),this.options.enableLongTask&&startTrackingLongTasks(),this.options._experiments.enableInteractions&&startTrackingInteractions()}setupOnce(_,getCurrentHub){this._getCurrentHub=getCurrentHub;const client=getCurrentHub().getClient(),clientOptions=client&&client.getOptions(),{routingInstrumentation:instrumentRouting,startTransactionOnLocationChange:startTransactionOnLocationChange,startTransactionOnPageLoad:startTransactionOnPageLoad,markBackgroundTransactions:markBackgroundTransactions,traceFetch:traceFetch,traceXHR:traceXHR,shouldCreateSpanForRequest:shouldCreateSpanForRequest,enableHTTPTimings:enableHTTPTimings,_experiments:_experiments}=this.options,clientOptionsTracePropagationTargets=clientOptions&&clientOptions.tracePropagationTargets,tracePropagationTargets=clientOptionsTracePropagationTargets||this.options.tracePropagationTargets;("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&this._hasSetTracePropagationTargets&&clientOptionsTracePropagationTargets&&logger.warn("[Tracing] The `tracePropagationTargets` option was set in the BrowserTracing integration and top level `Sentry.init`. The top level `Sentry.init` value is being used."),instrumentRouting((context=>{const transaction=this._createRouteTransaction(context);return this.options._experiments.onStartRouteTransaction&&this.options._experiments.onStartRouteTransaction(transaction,context,getCurrentHub),transaction}),startTransactionOnPageLoad,startTransactionOnLocationChange),markBackgroundTransactions&&registerBackgroundTabDetection(),_experiments.enableInteractions&&this._registerInteractionListener(),instrumentOutgoingRequests({traceFetch:traceFetch,traceXHR:traceXHR,tracePropagationTargets:tracePropagationTargets,shouldCreateSpanForRequest:shouldCreateSpanForRequest,enableHTTPTimings:enableHTTPTimings})}_createRouteTransaction(context){if(!this._getCurrentHub)return void(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`));const hub=this._getCurrentHub(),{beforeNavigate:beforeNavigate,idleTimeout:idleTimeout,finalTimeout:finalTimeout,heartbeatInterval:heartbeatInterval}=this.options,isPageloadTransaction="pageload"===context.op,sentryTrace=isPageloadTransaction?getMetaContent("sentry-trace"):"",baggage=isPageloadTransaction?getMetaContent("baggage"):"",{traceparentData:traceparentData,dynamicSamplingContext:dynamicSamplingContext,propagationContext:propagationContext}=tracingContextFromHeaders(sentryTrace,baggage),expandedContext={...context,...traceparentData,metadata:{...context.metadata,dynamicSamplingContext:traceparentData&&!dynamicSamplingContext?{}:dynamicSamplingContext},trimEnd:!0},modifiedContext="function"==typeof beforeNavigate?beforeNavigate(expandedContext):expandedContext,finalContext=void 0===modifiedContext?{...expandedContext,sampled:!1}:modifiedContext;finalContext.metadata=finalContext.name!==expandedContext.name?{...finalContext.metadata,source:"custom"}:finalContext.metadata,this._latestRouteName=finalContext.name,this._latestRouteSource=finalContext.metadata&&finalContext.metadata.source,!1===finalContext.sampled&&("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`),("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);const{location:location}=WINDOW,idleTransaction=startIdleTransaction(hub,finalContext,idleTimeout,finalTimeout,!0,{location:location},heartbeatInterval),scope=hub.getScope();return isPageloadTransaction&&traceparentData?scope.setPropagationContext(propagationContext):scope.setPropagationContext({traceId:idleTransaction.traceId,spanId:idleTransaction.spanId,parentSpanId:idleTransaction.parentSpanId,sampled:idleTransaction.sampled}),idleTransaction.registerBeforeFinishCallback((transaction=>{this._collectWebVitals(),addPerformanceEntries(transaction)})),idleTransaction}_registerInteractionListener(){let inflightInteractionTransaction;const registerInteractionTransaction=()=>{const{idleTimeout:idleTimeout,finalTimeout:finalTimeout,heartbeatInterval:heartbeatInterval}=this.options,op="ui.action.click",currentTransaction=getActiveTransaction();if(currentTransaction&&currentTransaction.op&&["navigation","pageload"].includes(currentTransaction.op))return void(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.warn(`[Tracing] Did not create ${op} transaction because a pageload or navigation transaction is in progress.`));if(inflightInteractionTransaction&&(inflightInteractionTransaction.setFinishReason("interactionInterrupted"),inflightInteractionTransaction.finish(),inflightInteractionTransaction=void 0),!this._getCurrentHub)return void(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.warn(`[Tracing] Did not create ${op} transaction because _getCurrentHub is invalid.`));if(!this._latestRouteName)return void(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.warn(`[Tracing] Did not create ${op} transaction because _latestRouteName is missing.`));const hub=this._getCurrentHub(),{location:location}=WINDOW,context={name:this._latestRouteName,op:op,trimEnd:!0,metadata:{source:this._latestRouteSource||"url"}};inflightInteractionTransaction=startIdleTransaction(hub,context,idleTimeout,finalTimeout,!0,{location:location},heartbeatInterval)};["click"].forEach((type=>{addEventListener(type,registerInteractionTransaction,{once:!1,capture:!0})}))}}function getMetaContent(metaName){const metaTag=getDomElement(`meta[name=${metaName}]`);return metaTag?metaTag.getAttribute("content"):void 0}export{BROWSER_TRACING_INTEGRATION_ID,BrowserTracing,getMetaContent};