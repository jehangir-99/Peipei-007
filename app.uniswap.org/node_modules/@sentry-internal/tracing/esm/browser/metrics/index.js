import{getActiveTransaction}from"@sentry/core";import{browserPerformanceTimeOrigin,htmlTreeAsString,logger}from"@sentry/utils";import{addPerformanceInstrumentationHandler,addClsInstrumentationHandler,addLcpInstrumentationHandler,addFidInstrumentationHandler}from"../instrument.js";import{WINDOW}from"../types.js";import{getVisibilityWatcher}from"../web-vitals/lib/getVisibilityWatcher.js";import{_startChild,isMeasurementValue}from"./utils.js";function msToSec(time){return time/1e3}function getBrowserPerformanceAPI(){return WINDOW&&WINDOW.addEventListener&&WINDOW.performance}let _lcpEntry,_clsEntry,_performanceCursor=0,_measurements={};function startTrackingWebVitals(){const performance=getBrowserPerformanceAPI();if(performance&&browserPerformanceTimeOrigin){performance.mark&&WINDOW.performance.mark("sentry-tracing-init");const fidCallback=_trackFID(),clsCallback=_trackCLS(),lcpCallback=_trackLCP();return()=>{fidCallback(),clsCallback(),lcpCallback()}}return()=>{}}function startTrackingLongTasks(){addPerformanceInstrumentationHandler("longtask",(({entries:entries})=>{for(const entry of entries){const transaction=getActiveTransaction();if(!transaction)return;const startTime=msToSec(browserPerformanceTimeOrigin+entry.startTime),duration=msToSec(entry.duration);transaction.startChild({description:"Main UI thread blocked",op:"ui.long-task",origin:"auto.ui.browser.metrics",startTimestamp:startTime,endTimestamp:startTime+duration})}}))}function startTrackingInteractions(){addPerformanceInstrumentationHandler("event",(({entries:entries})=>{for(const entry of entries){const transaction=getActiveTransaction();if(!transaction)return;if("click"===entry.name){const startTime=msToSec(browserPerformanceTimeOrigin+entry.startTime),duration=msToSec(entry.duration);transaction.startChild({description:htmlTreeAsString(entry.target),op:`ui.interaction.${entry.name}`,origin:"auto.ui.browser.metrics",startTimestamp:startTime,endTimestamp:startTime+duration})}}}))}function _trackCLS(){return addClsInstrumentationHandler((({metric:metric})=>{const entry=metric.entries.pop();entry&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log("[Measurements] Adding CLS"),_measurements.cls={value:metric.value,unit:""},_clsEntry=entry)}))}function _trackLCP(){return addLcpInstrumentationHandler((({metric:metric})=>{const entry=metric.entries.pop();entry&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log("[Measurements] Adding LCP"),_measurements.lcp={value:metric.value,unit:"millisecond"},_lcpEntry=entry)}))}function _trackFID(){return addFidInstrumentationHandler((({metric:metric})=>{const entry=metric.entries.pop();if(!entry)return;const timeOrigin=msToSec(browserPerformanceTimeOrigin),startTime=msToSec(entry.startTime);("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log("[Measurements] Adding FID"),_measurements.fid={value:metric.value,unit:"millisecond"},_measurements["mark.fid"]={value:timeOrigin+startTime,unit:"second"}}))}function addPerformanceEntries(transaction){const performance=getBrowserPerformanceAPI();if(!performance||!WINDOW.performance.getEntries||!browserPerformanceTimeOrigin)return;("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log("[Tracing] Adding & adjusting spans using Performance API");const timeOrigin=msToSec(browserPerformanceTimeOrigin),performanceEntries=performance.getEntries();let responseStartTimestamp,requestStartTimestamp;if(performanceEntries.slice(_performanceCursor).forEach((entry=>{const startTime=msToSec(entry.startTime),duration=msToSec(entry.duration);if(!("navigation"===transaction.op&&timeOrigin+startTime<transaction.startTimestamp))switch(entry.entryType){case"navigation":_addNavigationSpans(transaction,entry,timeOrigin),responseStartTimestamp=timeOrigin+msToSec(entry.responseStart),requestStartTimestamp=timeOrigin+msToSec(entry.requestStart);break;case"mark":case"paint":case"measure":{_addMeasureSpans(transaction,entry,startTime,duration,timeOrigin);const firstHidden=getVisibilityWatcher(),shouldRecord=entry.startTime<firstHidden.firstHiddenTime;"first-paint"===entry.name&&shouldRecord&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log("[Measurements] Adding FP"),_measurements.fp={value:entry.startTime,unit:"millisecond"}),"first-contentful-paint"===entry.name&&shouldRecord&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log("[Measurements] Adding FCP"),_measurements.fcp={value:entry.startTime,unit:"millisecond"});break}case"resource":{const resourceName=entry.name.replace(WINDOW.location.origin,"");_addResourceSpans(transaction,entry,resourceName,startTime,duration,timeOrigin);break}}})),_performanceCursor=Math.max(performanceEntries.length-1,0),_trackNavigator(transaction),"pageload"===transaction.op){"number"==typeof responseStartTimestamp&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log("[Measurements] Adding TTFB"),_measurements.ttfb={value:1e3*(responseStartTimestamp-transaction.startTimestamp),unit:"millisecond"},"number"==typeof requestStartTimestamp&&requestStartTimestamp<=responseStartTimestamp&&(_measurements["ttfb.requestTime"]={value:1e3*(responseStartTimestamp-requestStartTimestamp),unit:"millisecond"})),["fcp","fp","lcp"].forEach((name=>{if(!_measurements[name]||timeOrigin>=transaction.startTimestamp)return;const oldValue=_measurements[name].value,measurementTimestamp=timeOrigin+msToSec(oldValue),normalizedValue=Math.abs(1e3*(measurementTimestamp-transaction.startTimestamp)),delta=normalizedValue-oldValue;("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`),_measurements[name].value=normalizedValue}));const fidMark=_measurements["mark.fid"];fidMark&&_measurements.fid&&(_startChild(transaction,{description:"first input delay",endTimestamp:fidMark.value+msToSec(_measurements.fid.value),op:"ui.action",origin:"auto.ui.browser.metrics",startTimestamp:fidMark.value}),delete _measurements["mark.fid"]),"fcp"in _measurements||delete _measurements.cls,Object.keys(_measurements).forEach((measurementName=>{transaction.setMeasurement(measurementName,_measurements[measurementName].value,_measurements[measurementName].unit)})),_tagMetricInfo(transaction)}_lcpEntry=void 0,_clsEntry=void 0,_measurements={}}function _addMeasureSpans(transaction,entry,startTime,duration,timeOrigin){const measureStartTimestamp=timeOrigin+startTime,measureEndTimestamp=measureStartTimestamp+duration;return _startChild(transaction,{description:entry.name,endTimestamp:measureEndTimestamp,op:entry.entryType,origin:"auto.resource.browser.metrics",startTimestamp:measureStartTimestamp}),measureStartTimestamp}function _addNavigationSpans(transaction,entry,timeOrigin){["unloadEvent","redirect","domContentLoadedEvent","loadEvent","connect"].forEach((event=>{_addPerformanceNavigationTiming(transaction,entry,event,timeOrigin)})),_addPerformanceNavigationTiming(transaction,entry,"secureConnection",timeOrigin,"TLS/SSL","connectEnd"),_addPerformanceNavigationTiming(transaction,entry,"fetch",timeOrigin,"cache","domainLookupStart"),_addPerformanceNavigationTiming(transaction,entry,"domainLookup",timeOrigin,"DNS"),_addRequest(transaction,entry,timeOrigin)}function _addPerformanceNavigationTiming(transaction,entry,event,timeOrigin,description,eventEnd){const end=eventEnd?entry[eventEnd]:entry[`${event}End`],start=entry[`${event}Start`];start&&end&&_startChild(transaction,{op:"browser",origin:"auto.browser.browser.metrics",description:description||event,startTimestamp:timeOrigin+msToSec(start),endTimestamp:timeOrigin+msToSec(end)})}function _addRequest(transaction,entry,timeOrigin){_startChild(transaction,{op:"browser",origin:"auto.browser.browser.metrics",description:"request",startTimestamp:timeOrigin+msToSec(entry.requestStart),endTimestamp:timeOrigin+msToSec(entry.responseEnd)}),_startChild(transaction,{op:"browser",origin:"auto.browser.browser.metrics",description:"response",startTimestamp:timeOrigin+msToSec(entry.responseStart),endTimestamp:timeOrigin+msToSec(entry.responseEnd)})}function _addResourceSpans(transaction,entry,resourceName,startTime,duration,timeOrigin){if("xmlhttprequest"===entry.initiatorType||"fetch"===entry.initiatorType)return;const data={};"transferSize"in entry&&(data["http.response_transfer_size"]=entry.transferSize),"encodedBodySize"in entry&&(data["http.response_content_length"]=entry.encodedBodySize),"decodedBodySize"in entry&&(data["http.decoded_response_content_length"]=entry.decodedBodySize),"renderBlockingStatus"in entry&&(data["resource.render_blocking_status"]=entry.renderBlockingStatus);const startTimestamp=timeOrigin+startTime;_startChild(transaction,{description:resourceName,endTimestamp:startTimestamp+duration,op:entry.initiatorType?`resource.${entry.initiatorType}`:"resource.other",origin:"auto.resource.browser.metrics",startTimestamp:startTimestamp,data:data})}function _trackNavigator(transaction){const navigator=WINDOW.navigator;if(!navigator)return;const connection=navigator.connection;connection&&(connection.effectiveType&&transaction.setTag("effectiveConnectionType",connection.effectiveType),connection.type&&transaction.setTag("connectionType",connection.type),isMeasurementValue(connection.rtt)&&(_measurements["connection.rtt"]={value:connection.rtt,unit:"millisecond"})),isMeasurementValue(navigator.deviceMemory)&&transaction.setTag("deviceMemory",`${navigator.deviceMemory} GB`),isMeasurementValue(navigator.hardwareConcurrency)&&transaction.setTag("hardwareConcurrency",String(navigator.hardwareConcurrency))}function _tagMetricInfo(transaction){_lcpEntry&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log("[Measurements] Adding LCP Data"),_lcpEntry.element&&transaction.setTag("lcp.element",htmlTreeAsString(_lcpEntry.element)),_lcpEntry.id&&transaction.setTag("lcp.id",_lcpEntry.id),_lcpEntry.url&&transaction.setTag("lcp.url",_lcpEntry.url.trim().slice(0,200)),transaction.setTag("lcp.size",_lcpEntry.size)),_clsEntry&&_clsEntry.sources&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.log("[Measurements] Adding CLS Data"),_clsEntry.sources.forEach(((source,index)=>transaction.setTag(`cls.source.${index+1}`,htmlTreeAsString(source.node)))))}export{_addMeasureSpans,_addResourceSpans,addPerformanceEntries,startTrackingInteractions,startTrackingLongTasks,startTrackingWebVitals};