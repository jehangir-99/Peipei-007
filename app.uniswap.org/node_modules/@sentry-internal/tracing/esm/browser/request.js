import{hasTracingEnabled,getCurrentHub,getDynamicSamplingContextFromClient}from"@sentry/core";import{addInstrumentationHandler,generateSentryTraceHeader,dynamicSamplingContextToSentryBaggageHeader,isInstanceOf,BAGGAGE_HEADER_NAME,SENTRY_XHR_DATA_KEY,browserPerformanceTimeOrigin,stringMatchesSomePattern}from"@sentry/utils";import{addPerformanceInstrumentationHandler}from"./instrument.js";const DEFAULT_TRACE_PROPAGATION_TARGETS=["localhost",/^\/(?!\/)/],defaultRequestInstrumentationOptions={traceFetch:!0,traceXHR:!0,enableHTTPTimings:!0,tracingOrigins:DEFAULT_TRACE_PROPAGATION_TARGETS,tracePropagationTargets:DEFAULT_TRACE_PROPAGATION_TARGETS};function instrumentOutgoingRequests(_options){const{traceFetch:traceFetch,traceXHR:traceXHR,tracePropagationTargets:tracePropagationTargets,tracingOrigins:tracingOrigins,shouldCreateSpanForRequest:shouldCreateSpanForRequest,enableHTTPTimings:enableHTTPTimings}={traceFetch:defaultRequestInstrumentationOptions.traceFetch,traceXHR:defaultRequestInstrumentationOptions.traceXHR,..._options},shouldCreateSpan="function"==typeof shouldCreateSpanForRequest?shouldCreateSpanForRequest:_=>!0,shouldAttachHeadersWithTargets=url=>shouldAttachHeaders(url,tracePropagationTargets||tracingOrigins),spans={};traceFetch&&addInstrumentationHandler("fetch",(handlerData=>{const createdSpan=fetchCallback(handlerData,shouldCreateSpan,shouldAttachHeadersWithTargets,spans);enableHTTPTimings&&createdSpan&&addHTTPTimings(createdSpan)})),traceXHR&&addInstrumentationHandler("xhr",(handlerData=>{const createdSpan=xhrCallback(handlerData,shouldCreateSpan,shouldAttachHeadersWithTargets,spans);enableHTTPTimings&&createdSpan&&addHTTPTimings(createdSpan)}))}function isPerformanceResourceTiming(entry){return"resource"===entry.entryType&&"initiatorType"in entry&&"string"==typeof entry.nextHopProtocol&&("fetch"===entry.initiatorType||"xmlhttprequest"===entry.initiatorType)}function addHTTPTimings(span){const url=span.data.url;if(!url)return;const cleanup=addPerformanceInstrumentationHandler("resource",(({entries:entries})=>{entries.forEach((entry=>{if(isPerformanceResourceTiming(entry)&&entry.name.endsWith(url)){resourceTimingEntryToSpanData(entry).forEach((data=>span.setData(...data))),setTimeout(cleanup)}}))}))}function extractNetworkProtocol(nextHopProtocol){let name="unknown",version="unknown",_name="";for(const char of nextHopProtocol){if("/"===char){[name,version]=nextHopProtocol.split("/");break}if(!isNaN(Number(char))){name="h"===_name?"http":_name,version=nextHopProtocol.split(_name)[1];break}_name+=char}return _name===nextHopProtocol&&(name=_name),{name:name,version:version}}function getAbsoluteTime(time=0){return((browserPerformanceTimeOrigin||performance.timeOrigin)+time)/1e3}function resourceTimingEntryToSpanData(resourceTiming){const{name:name,version:version}=extractNetworkProtocol(resourceTiming.nextHopProtocol),timingSpanData=[];return timingSpanData.push(["network.protocol.version",version],["network.protocol.name",name]),browserPerformanceTimeOrigin?[...timingSpanData,["http.request.redirect_start",getAbsoluteTime(resourceTiming.redirectStart)],["http.request.fetch_start",getAbsoluteTime(resourceTiming.fetchStart)],["http.request.domain_lookup_start",getAbsoluteTime(resourceTiming.domainLookupStart)],["http.request.domain_lookup_end",getAbsoluteTime(resourceTiming.domainLookupEnd)],["http.request.connect_start",getAbsoluteTime(resourceTiming.connectStart)],["http.request.secure_connection_start",getAbsoluteTime(resourceTiming.secureConnectionStart)],["http.request.connection_end",getAbsoluteTime(resourceTiming.connectEnd)],["http.request.request_start",getAbsoluteTime(resourceTiming.requestStart)],["http.request.response_start",getAbsoluteTime(resourceTiming.responseStart)],["http.request.response_end",getAbsoluteTime(resourceTiming.responseEnd)]]:timingSpanData}function shouldAttachHeaders(url,tracePropagationTargets){return stringMatchesSomePattern(url,tracePropagationTargets||DEFAULT_TRACE_PROPAGATION_TARGETS)}function fetchCallback(handlerData,shouldCreateSpan,shouldAttachHeaders,spans){if(!hasTracingEnabled()||!handlerData.fetchData)return;const shouldCreateSpanResult=shouldCreateSpan(handlerData.fetchData.url);if(handlerData.endTimestamp&&shouldCreateSpanResult){const spanId=handlerData.fetchData.__span;if(!spanId)return;const span=spans[spanId];if(span){if(handlerData.response){span.setHttpStatus(handlerData.response.status);const contentLength=handlerData.response&&handlerData.response.headers&&handlerData.response.headers.get("content-length"),contentLengthNum=parseInt(contentLength);contentLengthNum>0&&span.setData("http.response_content_length",contentLengthNum)}else handlerData.error&&span.setStatus("internal_error");span.finish(),delete spans[spanId]}return}const hub=getCurrentHub(),scope=hub.getScope(),client=hub.getClient(),parentSpan=scope.getSpan(),{method:method,url:url}=handlerData.fetchData,span=shouldCreateSpanResult&&parentSpan?parentSpan.startChild({data:{url:url,type:"fetch","http.method":method},description:`${method} ${url}`,op:"http.client",origin:"auto.http.browser"}):void 0;if(span&&(handlerData.fetchData.__span=span.spanId,spans[span.spanId]=span),shouldAttachHeaders(handlerData.fetchData.url)&&client){const request=handlerData.args[0];handlerData.args[1]=handlerData.args[1]||{};const options=handlerData.args[1];options.headers=addTracingHeadersToFetchRequest(request,client,scope,options,span)}return span}function addTracingHeadersToFetchRequest(request,client,scope,options,requestSpan){const span=requestSpan||scope.getSpan(),transaction=span&&span.transaction,{traceId:traceId,sampled:sampled,dsc:dsc}=scope.getPropagationContext(),sentryTraceHeader=span?span.toTraceparent():generateSentryTraceHeader(traceId,void 0,sampled),dynamicSamplingContext=transaction?transaction.getDynamicSamplingContext():dsc||getDynamicSamplingContextFromClient(traceId,client,scope),sentryBaggageHeader=dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext),headers="undefined"!=typeof Request&&isInstanceOf(request,Request)?request.headers:options.headers;if(headers){if("undefined"!=typeof Headers&&isInstanceOf(headers,Headers)){const newHeaders=new Headers(headers);return newHeaders.append("sentry-trace",sentryTraceHeader),sentryBaggageHeader&&newHeaders.append(BAGGAGE_HEADER_NAME,sentryBaggageHeader),newHeaders}if(Array.isArray(headers)){const newHeaders=[...headers,["sentry-trace",sentryTraceHeader]];return sentryBaggageHeader&&newHeaders.push([BAGGAGE_HEADER_NAME,sentryBaggageHeader]),newHeaders}{const existingBaggageHeader="baggage"in headers?headers.baggage:void 0,newBaggageHeaders=[];return Array.isArray(existingBaggageHeader)?newBaggageHeaders.push(...existingBaggageHeader):existingBaggageHeader&&newBaggageHeaders.push(existingBaggageHeader),sentryBaggageHeader&&newBaggageHeaders.push(sentryBaggageHeader),{...headers,"sentry-trace":sentryTraceHeader,baggage:newBaggageHeaders.length>0?newBaggageHeaders.join(","):void 0}}}return{"sentry-trace":sentryTraceHeader,baggage:sentryBaggageHeader}}function xhrCallback(handlerData,shouldCreateSpan,shouldAttachHeaders,spans){const xhr=handlerData.xhr,sentryXhrData=xhr&&xhr[SENTRY_XHR_DATA_KEY];if(!hasTracingEnabled()||xhr&&xhr.__sentry_own_request__||!xhr||!sentryXhrData)return;const shouldCreateSpanResult=shouldCreateSpan(sentryXhrData.url);if(handlerData.endTimestamp&&shouldCreateSpanResult){const spanId=xhr.__sentry_xhr_span_id__;if(!spanId)return;const span=spans[spanId];return void(span&&(span.setHttpStatus(sentryXhrData.status_code),span.finish(),delete spans[spanId]))}const hub=getCurrentHub(),scope=hub.getScope(),parentSpan=scope.getSpan(),span=shouldCreateSpanResult&&parentSpan?parentSpan.startChild({data:{...sentryXhrData.data,type:"xhr","http.method":sentryXhrData.method,url:sentryXhrData.url},description:`${sentryXhrData.method} ${sentryXhrData.url}`,op:"http.client",origin:"auto.http.browser"}):void 0;if(span&&(xhr.__sentry_xhr_span_id__=span.spanId,spans[xhr.__sentry_xhr_span_id__]=span),xhr.setRequestHeader&&shouldAttachHeaders(sentryXhrData.url))if(span){const transaction=span&&span.transaction,dynamicSamplingContext=transaction&&transaction.getDynamicSamplingContext(),sentryBaggageHeader=dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);setHeaderOnXhr(xhr,span.toTraceparent(),sentryBaggageHeader)}else{const client=hub.getClient(),{traceId:traceId,sampled:sampled,dsc:dsc}=scope.getPropagationContext(),sentryTraceHeader=generateSentryTraceHeader(traceId,void 0,sampled),dynamicSamplingContext=dsc||(client?getDynamicSamplingContextFromClient(traceId,client,scope):void 0);setHeaderOnXhr(xhr,sentryTraceHeader,dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext))}return span}function setHeaderOnXhr(xhr,sentryTraceHeader,sentryBaggageHeader){try{xhr.setRequestHeader("sentry-trace",sentryTraceHeader),sentryBaggageHeader&&xhr.setRequestHeader(BAGGAGE_HEADER_NAME,sentryBaggageHeader)}catch(_){}}export{DEFAULT_TRACE_PROPAGATION_TARGETS,addTracingHeadersToFetchRequest,defaultRequestInstrumentationOptions,extractNetworkProtocol,fetchCallback,instrumentOutgoingRequests,shouldAttachHeaders,xhrCallback};