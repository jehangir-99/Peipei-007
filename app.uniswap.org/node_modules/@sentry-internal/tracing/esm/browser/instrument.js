import{logger,getFunctionName}from"@sentry/utils";import{onCLS}from"./web-vitals/getCLS.js";import{onFID}from"./web-vitals/getFID.js";import{onLCP}from"./web-vitals/getLCP.js";import{observe}from"./web-vitals/lib/observe.js";const handlers={},instrumented={};let _previousCls,_previousFid,_previousLcp;function addClsInstrumentationHandler(callback){return addMetricObserver("cls",callback,instrumentCls,_previousCls)}function addLcpInstrumentationHandler(callback){return addMetricObserver("lcp",callback,instrumentLcp,_previousLcp)}function addFidInstrumentationHandler(callback){return addMetricObserver("fid",callback,instrumentFid,_previousFid)}function addPerformanceInstrumentationHandler(type,callback){return addHandler(type,callback),instrumented[type]||(instrumentPerformanceObserver(type),instrumented[type]=!0),getCleanupCallback(type,callback)}function triggerHandlers(type,data){const typeHandlers=handlers[type];if(typeHandlers&&typeHandlers.length)for(const handler of typeHandlers)try{handler(data)}catch(e){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&logger.error(`Error while triggering instrumentation handler.\nType: ${type}\nName: ${getFunctionName(handler)}\nError:`,e)}}function instrumentCls(){onCLS((metric=>{triggerHandlers("cls",{metric:metric}),_previousCls=metric}))}function instrumentFid(){onFID((metric=>{triggerHandlers("fid",{metric:metric}),_previousFid=metric}))}function instrumentLcp(){onLCP((metric=>{triggerHandlers("lcp",{metric:metric}),_previousLcp=metric}))}function addMetricObserver(type,callback,instrumentFn,previousValue){return addHandler(type,callback),instrumented[type]||(instrumentFn(),instrumented[type]=!0),previousValue&&callback({metric:previousValue}),getCleanupCallback(type,callback)}function instrumentPerformanceObserver(type){const options={};"event"===type&&(options.durationThreshold=0),observe(type,(entries=>{triggerHandlers(type,{entries:entries})}),options)}function addHandler(type,handler){handlers[type]=handlers[type]||[],handlers[type].push(handler)}function getCleanupCallback(type,callback){return()=>{const typeHandlers=handlers[type];if(!typeHandlers)return;const index=typeHandlers.indexOf(callback);-1!==index&&typeHandlers.splice(index,1)}}export{addClsInstrumentationHandler,addFidInstrumentationHandler,addLcpInstrumentationHandler,addPerformanceInstrumentationHandler};