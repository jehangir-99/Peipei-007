import{bindReporter}from"./lib/bindReporter.js";import{getActivationStart}from"./lib/getActivationStart.js";import{getVisibilityWatcher}from"./lib/getVisibilityWatcher.js";import{initMetric}from"./lib/initMetric.js";import{observe}from"./lib/observe.js";import{onHidden}from"./lib/onHidden.js";const reportedMetricIDs={},onLCP=onReport=>{const visibilityWatcher=getVisibilityWatcher(),metric=initMetric("LCP");let report;const handleEntries=entries=>{const lastEntry=entries[entries.length-1];if(lastEntry){const value=Math.max(lastEntry.startTime-getActivationStart(),0);value<visibilityWatcher.firstHiddenTime&&(metric.value=value,metric.entries=[lastEntry],report())}},po=observe("largest-contentful-paint",handleEntries);if(po){report=bindReporter(onReport,metric);const stopListening=()=>{reportedMetricIDs[metric.id]||(handleEntries(po.takeRecords()),po.disconnect(),reportedMetricIDs[metric.id]=!0,report(!0))};return["keydown","click"].forEach((type=>{addEventListener(type,stopListening,{once:!0,capture:!0})})),onHidden(stopListening,!0),stopListening}};export{onLCP};