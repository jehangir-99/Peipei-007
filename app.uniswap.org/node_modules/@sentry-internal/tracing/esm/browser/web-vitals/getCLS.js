import{bindReporter}from"./lib/bindReporter.js";import{initMetric}from"./lib/initMetric.js";import{observe}from"./lib/observe.js";import{onHidden}from"./lib/onHidden.js";const onCLS=onReport=>{const metric=initMetric("CLS",0);let report,sessionValue=0,sessionEntries=[];const handleEntries=entries=>{entries.forEach((entry=>{if(!entry.hadRecentInput){const firstSessionEntry=sessionEntries[0],lastSessionEntry=sessionEntries[sessionEntries.length-1];sessionValue&&0!==sessionEntries.length&&entry.startTime-lastSessionEntry.startTime<1e3&&entry.startTime-firstSessionEntry.startTime<5e3?(sessionValue+=entry.value,sessionEntries.push(entry)):(sessionValue=entry.value,sessionEntries=[entry]),sessionValue>metric.value&&(metric.value=sessionValue,metric.entries=sessionEntries,report&&report())}}))},po=observe("layout-shift",handleEntries);if(po){report=bindReporter(onReport,metric);const stopListening=()=>{handleEntries(po.takeRecords()),report(!0)};return onHidden(stopListening),stopListening}};export{onCLS};