"use strict";var tinyNDArray=require("./../tiny-ndarray").integer,sphereRandom=require("./../sphere-random"),getNeighbourhood=require("./../neighbourhood");function squaredEuclideanDistance(point1,point2){for(var result=0,i=0;i<point1.length;i++)result+=Math.pow(point1[i]-point2[i],2);return result}function FixedDensityPDS(options,rng){if("function"==typeof options.distanceFunction)throw new Error("PoissonDiskSampling: Tried to instantiate the fixed density implementation with a distanceFunction");this.shape=options.shape,this.minDistance=options.minDistance,this.maxDistance=options.maxDistance||2*options.minDistance,this.maxTries=Math.ceil(Math.max(1,options.tries||30)),this.rng=rng||Math.random;for(var maxShape=0,i=0;i<this.shape.length;i++)maxShape=Math.max(maxShape,this.shape[i]);var epsilonDistance=1e-14*Math.max(1,maxShape/128|0);this.dimension=this.shape.length,this.squaredMinDistance=this.minDistance*this.minDistance,this.minDistancePlusEpsilon=this.minDistance+epsilonDistance,this.deltaDistance=Math.max(0,this.maxDistance-this.minDistancePlusEpsilon),this.cellSize=this.minDistance/Math.sqrt(this.dimension),this.neighbourhood=getNeighbourhood(this.dimension),this.currentPoint=null,this.processList=[],this.samplePoints=[],this.gridShape=[];for(i=0;i<this.dimension;i++)this.gridShape.push(Math.ceil(this.shape[i]/this.cellSize));this.grid=tinyNDArray(this.gridShape)}FixedDensityPDS.prototype.shape=null,FixedDensityPDS.prototype.dimension=null,FixedDensityPDS.prototype.minDistance=null,FixedDensityPDS.prototype.maxDistance=null,FixedDensityPDS.prototype.minDistancePlusEpsilon=null,FixedDensityPDS.prototype.squaredMinDistance=null,FixedDensityPDS.prototype.deltaDistance=null,FixedDensityPDS.prototype.cellSize=null,FixedDensityPDS.prototype.maxTries=null,FixedDensityPDS.prototype.rng=null,FixedDensityPDS.prototype.neighbourhood=null,FixedDensityPDS.prototype.currentPoint=null,FixedDensityPDS.prototype.processList=null,FixedDensityPDS.prototype.samplePoints=null,FixedDensityPDS.prototype.gridShape=null,FixedDensityPDS.prototype.grid=null,FixedDensityPDS.prototype.addRandomPoint=function(){for(var point=new Array(this.dimension),i=0;i<this.dimension;i++)point[i]=this.rng()*this.shape[i];return this.directAddPoint(point)},FixedDensityPDS.prototype.addPoint=function(point){var dimension,valid=!0;if(point.length===this.dimension)for(dimension=0;dimension<this.dimension&&valid;dimension++)valid=point[dimension]>=0&&point[dimension]<this.shape[dimension];else valid=!1;return valid?this.directAddPoint(point):null},FixedDensityPDS.prototype.directAddPoint=function(point){var dimension,internalArrayIndex=0,stride=this.grid.stride;for(this.processList.push(point),this.samplePoints.push(point),dimension=0;dimension<this.dimension;dimension++)internalArrayIndex+=(point[dimension]/this.cellSize|0)*stride[dimension];return this.grid.data[internalArrayIndex]=this.samplePoints.length,point},FixedDensityPDS.prototype.inNeighbourhood=function(point){var neighbourIndex,internalArrayIndex,dimension,currentDimensionValue,dimensionNumber=this.dimension,stride=this.grid.stride;for(neighbourIndex=0;neighbourIndex<this.neighbourhood.length;neighbourIndex++){for(internalArrayIndex=0,dimension=0;dimension<dimensionNumber;dimension++){if((currentDimensionValue=(point[dimension]/this.cellSize|0)+this.neighbourhood[neighbourIndex][dimension])<0||currentDimensionValue>=this.gridShape[dimension]){internalArrayIndex=-1;break}internalArrayIndex+=currentDimensionValue*stride[dimension]}if(-1!==internalArrayIndex&&0!==this.grid.data[internalArrayIndex]&&squaredEuclideanDistance(point,this.samplePoints[this.grid.data[internalArrayIndex]-1])<this.squaredMinDistance)return!0}return!1},FixedDensityPDS.prototype.next=function(){for(var tries,angle,distance,currentPoint,newPoint,inShape,i;this.processList.length>0;){for(null===this.currentPoint&&(this.currentPoint=this.processList.shift()),currentPoint=this.currentPoint,tries=0;tries<this.maxTries;tries++){for(inShape=!0,distance=this.minDistancePlusEpsilon+this.deltaDistance*this.rng(),2===this.dimension?(angle=this.rng()*Math.PI*2,newPoint=[Math.cos(angle),Math.sin(angle)]):newPoint=sphereRandom(this.dimension,this.rng),i=0;inShape&&i<this.dimension;i++)newPoint[i]=currentPoint[i]+newPoint[i]*distance,inShape=newPoint[i]>=0&&newPoint[i]<this.shape[i];if(inShape&&!this.inNeighbourhood(newPoint))return this.directAddPoint(newPoint)}tries===this.maxTries&&(this.currentPoint=null)}return null},FixedDensityPDS.prototype.fill=function(){for(0===this.samplePoints.length&&this.addRandomPoint();this.next(););return this.samplePoints},FixedDensityPDS.prototype.getAllPoints=function(){return this.samplePoints},FixedDensityPDS.prototype.getAllPointsWithDistance=function(){throw new Error("PoissonDiskSampling: getAllPointsWithDistance() is not available in fixed-density implementation")},FixedDensityPDS.prototype.reset=function(){var gridData=this.grid.data,i=0;for(i=0;i<gridData.length;i++)gridData[i]=0;this.samplePoints=[],this.currentPoint=null,this.processList.length=0},module.exports=FixedDensityPDS;