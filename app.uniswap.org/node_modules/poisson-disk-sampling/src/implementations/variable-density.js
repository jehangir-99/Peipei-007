"use strict";var tinyNDArray=require("./../tiny-ndarray").array,sphereRandom=require("./../sphere-random"),getNeighbourhood=require("./../neighbourhood");function euclideanDistance(point1,point2){for(var result=0,i=0;i<point1.length;i++)result+=Math.pow(point1[i]-point2[i],2);return Math.sqrt(result)}function VariableDensityPDS(options,rng){if("function"!=typeof options.distanceFunction)throw new Error("PoissonDiskSampling: Tried to instantiate the variable density implementation without a distanceFunction");this.shape=options.shape,this.minDistance=options.minDistance,this.maxDistance=options.maxDistance||2*options.minDistance,this.maxTries=Math.ceil(Math.max(1,options.tries||30)),this.distanceFunction=options.distanceFunction,this.bias=Math.max(0,Math.min(1,options.bias||0)),this.rng=rng||Math.random;for(var maxShape=0,i=0;i<this.shape.length;i++)maxShape=Math.max(maxShape,this.shape[i]);var epsilonDistance=1e-14*Math.max(1,maxShape/128|0);this.dimension=this.shape.length,this.minDistancePlusEpsilon=this.minDistance+epsilonDistance,this.deltaDistance=Math.max(0,this.maxDistance-this.minDistancePlusEpsilon),this.cellSize=this.maxDistance/Math.sqrt(this.dimension),this.neighbourhood=getNeighbourhood(this.dimension),this.currentPoint=null,this.currentDistance=0,this.processList=[],this.samplePoints=[],this.sampleDistance=[],this.gridShape=[];for(i=0;i<this.dimension;i++)this.gridShape.push(Math.ceil(this.shape[i]/this.cellSize));this.grid=tinyNDArray(this.gridShape)}VariableDensityPDS.prototype.shape=null,VariableDensityPDS.prototype.dimension=null,VariableDensityPDS.prototype.minDistance=null,VariableDensityPDS.prototype.maxDistance=null,VariableDensityPDS.prototype.minDistancePlusEpsilon=null,VariableDensityPDS.prototype.deltaDistance=null,VariableDensityPDS.prototype.cellSize=null,VariableDensityPDS.prototype.maxTries=null,VariableDensityPDS.prototype.distanceFunction=null,VariableDensityPDS.prototype.bias=null,VariableDensityPDS.prototype.rng=null,VariableDensityPDS.prototype.neighbourhood=null,VariableDensityPDS.prototype.currentPoint=null,VariableDensityPDS.prototype.currentDistance=null,VariableDensityPDS.prototype.processList=null,VariableDensityPDS.prototype.samplePoints=null,VariableDensityPDS.prototype.sampleDistance=null,VariableDensityPDS.prototype.gridShape=null,VariableDensityPDS.prototype.grid=null,VariableDensityPDS.prototype.addRandomPoint=function(){for(var point=new Array(this.dimension),i=0;i<this.dimension;i++)point[i]=this.rng()*this.shape[i];return this.directAddPoint(point)},VariableDensityPDS.prototype.addPoint=function(point){var dimension,valid=!0;if(point.length===this.dimension)for(dimension=0;dimension<this.dimension&&valid;dimension++)valid=point[dimension]>=0&&point[dimension]<this.shape[dimension];else valid=!1;return valid?this.directAddPoint(point):null},VariableDensityPDS.prototype.directAddPoint=function(point){var dimension,internalArrayIndex=0,stride=this.grid.stride,pointIndex=this.samplePoints.length;for(this.processList.push(pointIndex),this.samplePoints.push(point),this.sampleDistance.push(this.distanceFunction(point)),dimension=0;dimension<this.dimension;dimension++)internalArrayIndex+=(point[dimension]/this.cellSize|0)*stride[dimension];return this.grid.data[internalArrayIndex].push(pointIndex),point},VariableDensityPDS.prototype.inNeighbourhood=function(point){var neighbourIndex,internalArrayIndex,dimension,currentDimensionValue,existingPoint,existingPointDistance,dimensionNumber=this.dimension,stride=this.grid.stride,pointDistance=this.distanceFunction(point);for(neighbourIndex=0;neighbourIndex<this.neighbourhood.length;neighbourIndex++){for(internalArrayIndex=0,dimension=0;dimension<dimensionNumber;dimension++){if((currentDimensionValue=(point[dimension]/this.cellSize|0)+this.neighbourhood[neighbourIndex][dimension])<0||currentDimensionValue>=this.gridShape[dimension]){internalArrayIndex=-1;break}internalArrayIndex+=currentDimensionValue*stride[dimension]}if(-1!==internalArrayIndex&&this.grid.data[internalArrayIndex].length>0)for(var i=0;i<this.grid.data[internalArrayIndex].length;i++){existingPoint=this.samplePoints[this.grid.data[internalArrayIndex][i]],existingPointDistance=this.sampleDistance[this.grid.data[internalArrayIndex][i]];var minDistance=Math.min(existingPointDistance,pointDistance),dist=minDistance+(Math.max(existingPointDistance,pointDistance)-minDistance)*this.bias;if(euclideanDistance(point,existingPoint)<this.minDistance+this.deltaDistance*dist)return!0}}return!1},VariableDensityPDS.prototype.next=function(){for(var tries,angle,distance,currentPoint,currentDistance,newPoint,inShape,i;this.processList.length>0;){if(null===this.currentPoint){var sampleIndex=this.processList.shift();this.currentPoint=this.samplePoints[sampleIndex],this.currentDistance=this.sampleDistance[sampleIndex]}for(currentPoint=this.currentPoint,currentDistance=this.currentDistance,tries=0;tries<this.maxTries;tries++){for(inShape=!0,distance=this.minDistancePlusEpsilon+this.deltaDistance*(currentDistance+(1-currentDistance)*this.bias),2===this.dimension?(angle=this.rng()*Math.PI*2,newPoint=[Math.cos(angle),Math.sin(angle)]):newPoint=sphereRandom(this.dimension,this.rng),i=0;inShape&&i<this.dimension;i++)newPoint[i]=currentPoint[i]+newPoint[i]*distance,inShape=newPoint[i]>=0&&newPoint[i]<this.shape[i];if(inShape&&!this.inNeighbourhood(newPoint))return this.directAddPoint(newPoint)}tries===this.maxTries&&(this.currentPoint=null)}return null},VariableDensityPDS.prototype.fill=function(){for(0===this.samplePoints.length&&this.addRandomPoint();this.next(););return this.samplePoints},VariableDensityPDS.prototype.getAllPoints=function(){return this.samplePoints},VariableDensityPDS.prototype.getAllPointsWithDistance=function(){var point,result=new Array(this.samplePoints.length),i=0,dimension=0;for(i=0;i<this.samplePoints.length;i++){for(point=new Array(this.dimension+1),dimension=0;dimension<this.dimension;dimension++)point[dimension]=this.samplePoints[i][dimension];point[this.dimension]=this.sampleDistance[i],result[i]=point}return result},VariableDensityPDS.prototype.reset=function(){var gridData=this.grid.data,i=0;for(i=0;i<gridData.length;i++)gridData[i]=[];this.samplePoints=[],this.currentPoint=null,this.processList.length=0},module.exports=VariableDensityPDS;