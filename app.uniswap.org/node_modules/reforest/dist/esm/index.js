import*as React3 from"react";import*as React from"react";var PrerenderContext=React.createContext(!1);PrerenderContext.displayName="PrerenderContext";var MaxIndexContext=React.createContext([]);MaxIndexContext.displayName="MaxIndexContext";var IndexContext=React.createContext(null);IndexContext.displayName="IndexContext";var TreeStateContext=React.createContext(null);TreeStateContext.displayName="TreeStateContext";import*as React2 from"react";import{arrayToTree}from"performant-array-to-tree";var isServer="undefined"==typeof window,useIsomorphicLayoutEffect=isServer?React2.useEffect:React2.useLayoutEffect;function parseIndexPath(indexPathString){return indexPathString.split(".").map((index=>parseInt(index,10)))}function compareIndexPaths(a="",b=""){var _a,_b;let aArray=a.split(".").map(Number),bArray=b.split(".").map(Number);if(aArray.includes(NaN)||bArray.includes(NaN))throw new Error("Version contains parts that are not numbers");const maxLength=Math.max(a.length,b.length);for(let index=0;index<maxLength;index++){const difference=(null!=(_a=aArray[index])?_a:0)-(null!=(_b=bArray[index])?_b:0);if(0!==difference)return difference>0?1:-1}return 0}function cleanAndSortTree(tree){var _a;return(null==(_a=tree.children)?void 0:_a.length)>0?(tree.children.sort(((a,b)=>compareIndexPaths(a.indexPathString,b.indexPathString))),{...tree.data,children:tree.children.map(cleanAndSortTree)}):tree.data}function mapToChildren(dataMap){const parsedValues=Array.from(dataMap.entries()).map((([indexPathString,data])=>({data:data,parentId:parseIndexPath(indexPathString).slice(0,-1).join("."),id:indexPathString}))),cleanedTree=cleanAndSortTree({children:arrayToTree(parsedValues,{dataField:null})});return cleanedTree?cleanedTree.children:[]}function sortMapByIndexPath(treeMap){const sortedEntries=Array.from(treeMap.entries()).sort(((a,b)=>compareIndexPaths(a[0],b[0])));return new Map(sortedEntries)}function flattenChildren(children){return children.flatMap((child=>child.children?flattenChildren(child.children):[child]))}function useIndex(){const maxIndexPath=React3.useContext(MaxIndexContext),indexPathString=React3.useContext(IndexContext);return React3.useMemo((()=>{if(null===indexPathString)return null;const indexPath=parseIndexPath(indexPathString),maxIndex=maxIndexPath[maxIndexPath.length-1],index=indexPath[indexPath.length-1];return{maxIndex:maxIndex,maxIndexPath:maxIndexPath,index:index,indexPath:indexPath,indexPathString:indexPathString,isFirst:0===index,isLast:index===maxIndex,isEven:index%2==0,isOdd:1===Math.abs(index%2)}}),[maxIndexPath,indexPathString])}function useIndexedChildren(children){const parentMaxIndexPath=React3.useContext(MaxIndexContext),indexPathString=React3.useContext(IndexContext),childrenCount=React3.Children.count(children),maxIndexPath=React3.useMemo((()=>parentMaxIndexPath.concat(childrenCount-1)),[childrenCount]);return React3.createElement(MaxIndexContext.Provider,{value:maxIndexPath},React3.Children.map(children,((child,index)=>React3.isValidElement(child)?React3.createElement(IndexContext.Provider,{key:child.key,value:indexPathString?`${indexPathString}.${index.toString()}`:index.toString()},child):child)))}import*as React4 from"react";function useRovingIndex({contain:contain=!0,defaultIndex:defaultIndex=0,maxIndex:maxIndex=1/0,wrap:wrap=!1}){const[activeIndex,setLocalActiveIndex]=React4.useState(defaultIndex),getNextIndex=React4.useCallback((nextIndex=>wrap?(nextIndex%maxIndex+maxIndex)%maxIndex:contain?nextIndex>maxIndex?maxIndex:nextIndex<0?0:nextIndex:nextIndex),[maxIndex,wrap]),moveActiveIndex=React4.useCallback((amountToMove=>{setLocalActiveIndex((currentIndex=>getNextIndex(currentIndex+amountToMove)))}),[getNextIndex]),setActiveIndex=React4.useCallback((nextIndex=>{setLocalActiveIndex(getNextIndex(nextIndex))}),[getNextIndex]),moveBackward=React4.useCallback((()=>moveActiveIndex(-1)),[moveActiveIndex]),moveForward=React4.useCallback((()=>moveActiveIndex(1)),[moveActiveIndex]);return{activeIndex:activeIndex,moveActiveIndex:moveActiveIndex,setActiveIndex:setActiveIndex,moveBackward:moveBackward,moveForward:moveForward,moveBackwardDisabled:activeIndex<=0,moveForwardDisabled:activeIndex>=maxIndex}}import*as React5 from"react";import{create}from"zustand";function useTreeState(selector){const treeStateContext=React5.useContext(TreeStateContext),[treeState]=React5.useState((()=>treeStateContext||create(((set,get)=>({treeMap:new Map,prerenderedTreeIds:new Map,shouldPrerender:!0,setTreeData:(id,data)=>{const{treeMap:treeMap}=get();treeMap.set(id,data),set({treeMap:sortMapByIndexPath(treeMap)})},deleteTreeData:id=>{const{treeMap:treeMap}=get();treeMap.delete(id),set({treeMap:sortMapByIndexPath(treeMap)})}})))));return selector?treeState(selector):treeState}function PrerenderTree({children:children}){const treeState=useTreeState(),shouldPrerender=treeState((state=>state.shouldPrerender));return useIsomorphicLayoutEffect((()=>{treeState.setState({prerenderedTreeIds:new Map,shouldPrerender:!1})}),[]),shouldPrerender?React5.createElement(PrerenderContext.Provider,{value:!0},children):null}function usePrerender(){const isPrerender=React5.useContext(PrerenderContext);if(null===isPrerender)throw new Error("usePrerender must be used in a descendant component of useTree.");return isPrerender}function useTree(children,treeState){const treeStateContext=React5.useContext(TreeStateContext),treeStateLocal=useTreeState(),parsedTreeState=treeStateContext||treeState||treeStateLocal,isPrerender=React5.useContext(PrerenderContext),isRoot=null===treeStateContext,indexedChildren=useIndexedChildren(children);return{children:isRoot?React5.createElement(TreeStateContext.Provider,{value:parsedTreeState},React5.createElement(PrerenderTree,null,indexedChildren),indexedChildren):indexedChildren,useStore:parsedTreeState,isPrerender:isPrerender,isRoot:isRoot}}function useTreeId(){const treeStateContext=React5.useContext(TreeStateContext);if(null===treeStateContext)throw new Error("useTreeId must be used in a descendant component of useTree.");const{prerenderedTreeIds:prerenderedTreeIds}=treeStateContext.getState(),{indexPathString:indexPathString}=useIndex(),generatedId=React5.useId().slice(1,-1);return prerenderedTreeIds.get(indexPathString)||generatedId}function useTreeNode(treeId,getData,dependencies=[]){const isPrerender=React5.useContext(PrerenderContext),treeStateContext=React5.useContext(TreeStateContext);if(null===treeStateContext)throw new Error("useTreeNode must be used in a descendant component of useTree.");const{deleteTreeData:deleteTreeData,prerenderedTreeIds:prerenderedTreeIds,setTreeData:setTreeData,treeMap:treeMap}=treeStateContext.getState(),{indexPathString:indexPathString}=useIndex(),treeData=React5.useMemo((()=>Object.assign({treeId:treeId},getData())),dependencies.concat(treeId));return isPrerender?(treeMap.set(indexPathString,treeData),prerenderedTreeIds.set(indexPathString,treeId)):React5.useEffect((()=>(setTreeData(indexPathString,treeData),()=>{deleteTreeData(indexPathString)})),[indexPathString,treeData]),treeData}export{cleanAndSortTree,compareIndexPaths,flattenChildren,mapToChildren,parseIndexPath,sortMapByIndexPath,useIndex,useIndexedChildren,usePrerender,useRovingIndex,useTree,useTreeId,useTreeNode,useTreeState};