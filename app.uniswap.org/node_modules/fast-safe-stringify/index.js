module.exports=stringify,stringify.default=stringify,stringify.stable=deterministicStringify,stringify.stableStringify=deterministicStringify;var LIMIT_REPLACE_NODE="[...]",CIRCULAR_REPLACE_NODE="[Circular]",arr=[],replacerStack=[];function defaultOptions(){return{depthLimit:Number.MAX_SAFE_INTEGER,edgesLimit:Number.MAX_SAFE_INTEGER}}function stringify(obj,replacer,spacer,options){var res;void 0===options&&(options=defaultOptions()),decirc(obj,"",0,[],void 0,0,options);try{res=0===replacerStack.length?JSON.stringify(obj,replacer,spacer):JSON.stringify(obj,replaceGetterValues(replacer),spacer)}catch(_){return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]")}finally{for(;0!==arr.length;){var part=arr.pop();4===part.length?Object.defineProperty(part[0],part[1],part[3]):part[0][part[1]]=part[2]}}return res}function setReplace(replace,val,k,parent){var propertyDescriptor=Object.getOwnPropertyDescriptor(parent,k);void 0!==propertyDescriptor.get?propertyDescriptor.configurable?(Object.defineProperty(parent,k,{value:replace}),arr.push([parent,k,val,propertyDescriptor])):replacerStack.push([val,k,replace]):(parent[k]=replace,arr.push([parent,k,val]))}function decirc(val,k,edgeIndex,stack,parent,depth,options){var i;if(depth+=1,"object"==typeof val&&null!==val){for(i=0;i<stack.length;i++)if(stack[i]===val)return void setReplace(CIRCULAR_REPLACE_NODE,val,k,parent);if(void 0!==options.depthLimit&&depth>options.depthLimit)return void setReplace(LIMIT_REPLACE_NODE,val,k,parent);if(void 0!==options.edgesLimit&&edgeIndex+1>options.edgesLimit)return void setReplace(LIMIT_REPLACE_NODE,val,k,parent);if(stack.push(val),Array.isArray(val))for(i=0;i<val.length;i++)decirc(val[i],i,i,stack,val,depth,options);else{var keys=Object.keys(val);for(i=0;i<keys.length;i++){var key=keys[i];decirc(val[key],key,i,stack,val,depth,options)}}stack.pop()}}function compareFunction(a,b){return a<b?-1:a>b?1:0}function deterministicStringify(obj,replacer,spacer,options){void 0===options&&(options=defaultOptions());var res,tmp=deterministicDecirc(obj,"",0,[],void 0,0,options)||obj;try{res=0===replacerStack.length?JSON.stringify(tmp,replacer,spacer):JSON.stringify(tmp,replaceGetterValues(replacer),spacer)}catch(_){return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]")}finally{for(;0!==arr.length;){var part=arr.pop();4===part.length?Object.defineProperty(part[0],part[1],part[3]):part[0][part[1]]=part[2]}}return res}function deterministicDecirc(val,k,edgeIndex,stack,parent,depth,options){var i;if(depth+=1,"object"==typeof val&&null!==val){for(i=0;i<stack.length;i++)if(stack[i]===val)return void setReplace(CIRCULAR_REPLACE_NODE,val,k,parent);try{if("function"==typeof val.toJSON)return}catch(_){return}if(void 0!==options.depthLimit&&depth>options.depthLimit)return void setReplace(LIMIT_REPLACE_NODE,val,k,parent);if(void 0!==options.edgesLimit&&edgeIndex+1>options.edgesLimit)return void setReplace(LIMIT_REPLACE_NODE,val,k,parent);if(stack.push(val),Array.isArray(val))for(i=0;i<val.length;i++)deterministicDecirc(val[i],i,i,stack,val,depth,options);else{var tmp={},keys=Object.keys(val).sort(compareFunction);for(i=0;i<keys.length;i++){var key=keys[i];deterministicDecirc(val[key],key,i,stack,val,depth,options),tmp[key]=val[key]}if(void 0===parent)return tmp;arr.push([parent,k,val]),parent[k]=tmp}stack.pop()}}function replaceGetterValues(replacer){return replacer=void 0!==replacer?replacer:function(k,v){return v},function(key,val){if(replacerStack.length>0)for(var i=0;i<replacerStack.length;i++){var part=replacerStack[i];if(part[1]===key&&part[0]===val){val=part[2],replacerStack.splice(i,1);break}}return replacer.call(this,key,val)}}