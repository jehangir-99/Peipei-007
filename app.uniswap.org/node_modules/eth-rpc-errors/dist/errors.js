"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.ethErrors=void 0;const classes_1=require("./classes"),utils_1=require("./utils"),error_constants_1=require("./error-constants");function getEthJsonRpcError(code,arg){const[message,data]=parseOpts(arg);return new classes_1.EthereumRpcError(code,message||utils_1.getMessageFromCode(code),data)}function getEthProviderError(code,arg){const[message,data]=parseOpts(arg);return new classes_1.EthereumProviderError(code,message||utils_1.getMessageFromCode(code),data)}function parseOpts(arg){if(arg){if("string"==typeof arg)return[arg];if("object"==typeof arg&&!Array.isArray(arg)){const{message:message,data:data}=arg;if(message&&"string"!=typeof message)throw new Error("Must specify string message.");return[message||void 0,data]}}return[]}exports.ethErrors={rpc:{parse:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.parse,arg),invalidRequest:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest,arg),invalidParams:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams,arg),methodNotFound:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound,arg),internal:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.internal,arg),server:opts=>{if(!opts||"object"!=typeof opts||Array.isArray(opts))throw new Error("Ethereum RPC Server errors must provide single object argument.");const{code:code}=opts;if(!Number.isInteger(code)||code>-32005||code<-32099)throw new Error('"code" must be an integer such that: -32099 <= code <= -32005');return getEthJsonRpcError(code,opts)},invalidInput:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput,arg),resourceNotFound:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound,arg),resourceUnavailable:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable,arg),transactionRejected:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected,arg),methodNotSupported:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported,arg),limitExceeded:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded,arg)},provider:{userRejectedRequest:arg=>getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest,arg),unauthorized:arg=>getEthProviderError(error_constants_1.errorCodes.provider.unauthorized,arg),unsupportedMethod:arg=>getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod,arg),disconnected:arg=>getEthProviderError(error_constants_1.errorCodes.provider.disconnected,arg),chainDisconnected:arg=>getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected,arg),custom:opts=>{if(!opts||"object"!=typeof opts||Array.isArray(opts))throw new Error("Ethereum Provider custom errors must provide single object argument.");const{code:code,message:message,data:data}=opts;if(!message||"string"!=typeof message)throw new Error('"message" must be a nonempty string');return new classes_1.EthereumProviderError(code,message,data)}}};