import*as React from"react";import{styleSingleton}from"react-style-singleton";import{fullWidthClassName,zeroRightClassName,noScrollbarsClassName,removedBarSizeVariable}from"./constants";import{getGapWidth}from"./utils";var Style=styleSingleton();export var lockAttribute="data-scroll-locked";var getStyles=function(_a,allowRelative,gapMode,important){var left=_a.left,top=_a.top,right=_a.right,gap=_a.gap;return void 0===gapMode&&(gapMode="margin"),"\n  .".concat(noScrollbarsClassName," {\n   overflow: hidden ").concat(important,";\n   padding-right: ").concat(gap,"px ").concat(important,";\n  }\n  body[").concat(lockAttribute,"] {\n    overflow: hidden ").concat(important,";\n    overscroll-behavior: contain;\n    ").concat([allowRelative&&"position: relative ".concat(important,";"),"margin"===gapMode&&"\n    padding-left: ".concat(left,"px;\n    padding-top: ").concat(top,"px;\n    padding-right: ").concat(right,"px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap,"px ").concat(important,";\n    "),"padding"===gapMode&&"padding-right: ".concat(gap,"px ").concat(important,";")].filter(Boolean).join(""),"\n  }\n  \n  .").concat(zeroRightClassName," {\n    right: ").concat(gap,"px ").concat(important,";\n  }\n  \n  .").concat(fullWidthClassName," {\n    margin-right: ").concat(gap,"px ").concat(important,";\n  }\n  \n  .").concat(zeroRightClassName," .").concat(zeroRightClassName," {\n    right: 0 ").concat(important,";\n  }\n  \n  .").concat(fullWidthClassName," .").concat(fullWidthClassName," {\n    margin-right: 0 ").concat(important,";\n  }\n  \n  body[").concat(lockAttribute,"] {\n    ").concat(removedBarSizeVariable,": ").concat(gap,"px;\n  }\n")};export var RemoveScrollBar=function(props){var noRelative=props.noRelative,noImportant=props.noImportant,_a=props.gapMode,gapMode=void 0===_a?"margin":_a,gap=React.useMemo((function(){return getGapWidth(gapMode)}),[gapMode]);return React.useEffect((function(){return document.body.setAttribute(lockAttribute,""),function(){document.body.removeAttribute(lockAttribute)}}),[]),React.createElement(Style,{styles:getStyles(gap,!noRelative,gapMode,noImportant?"":"!important")})};