const{Transform:Transform}=require("readable-stream");module.exports=KeccakState=>class Shake extends Transform{constructor(rate,capacity,delimitedSuffix,options){super(options),this._rate=rate,this._capacity=capacity,this._delimitedSuffix=delimitedSuffix,this._options=options,this._state=new KeccakState,this._state.initialize(rate,capacity),this._finalized=!1}_transform(chunk,encoding,callback){let error=null;try{this.update(chunk,encoding)}catch(err){error=err}callback(error)}_flush(){}_read(size){this.push(this.squeeze(size))}update(data,encoding){if(!Buffer.isBuffer(data)&&"string"!=typeof data)throw new TypeError("Data must be a string or a buffer");if(this._finalized)throw new Error("Squeeze already called");return Buffer.isBuffer(data)||(data=Buffer.from(data,encoding)),this._state.absorb(data),this}squeeze(dataByteLength,encoding){this._finalized||(this._finalized=!0,this._state.absorbLastFewBits(this._delimitedSuffix));let data=this._state.squeeze(dataByteLength);return void 0!==encoding&&(data=data.toString(encoding)),data}_resetState(){return this._state.initialize(this._rate,this._capacity),this}_clone(){const clone=new Shake(this._rate,this._capacity,this._delimitedSuffix,this._options);return this._state.copy(clone._state),clone._finalized=this._finalized,clone}};