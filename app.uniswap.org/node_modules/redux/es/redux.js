import _objectSpread from"@babel/runtime/helpers/esm/objectSpread2";function formatProdErrorMessage(code){return"Minified Redux error #"+code+"; visit https://redux.js.org/Errors?code="+code+" for the full message or use the non-minified dev environment for full errors. "}var $$observable="function"==typeof Symbol&&Symbol.observable||"@@observable",randomString=function(){return Math.random().toString(36).substring(7).split("").join(".")},ActionTypes={INIT:"@@redux/INIT"+randomString(),REPLACE:"@@redux/REPLACE"+randomString(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+randomString()}};function isPlainObject(obj){if("object"!=typeof obj||null===obj)return!1;for(var proto=obj;null!==Object.getPrototypeOf(proto);)proto=Object.getPrototypeOf(proto);return Object.getPrototypeOf(obj)===proto}function miniKindOf(val){if(void 0===val)return"undefined";if(null===val)return"null";var type=typeof val;switch(type){case"boolean":case"string":case"number":case"symbol":case"function":return type}if(Array.isArray(val))return"array";if(isDate(val))return"date";if(isError(val))return"error";var constructorName=ctorName(val);switch(constructorName){case"Symbol":case"Promise":case"WeakMap":case"WeakSet":case"Map":case"Set":return constructorName}return type.slice(8,-1).toLowerCase().replace(/\s/g,"")}function ctorName(val){return"function"==typeof val.constructor?val.constructor.name:null}function isError(val){return val instanceof Error||"string"==typeof val.message&&val.constructor&&"number"==typeof val.constructor.stackTraceLimit}function isDate(val){return val instanceof Date||"function"==typeof val.toDateString&&"function"==typeof val.getDate&&"function"==typeof val.setDate}function kindOf(val){var typeOfVal=typeof val;return"production"!==process.env.NODE_ENV&&(typeOfVal=miniKindOf(val)),typeOfVal}function createStore(reducer,preloadedState,enhancer){var _ref2;if("function"==typeof preloadedState&&"function"==typeof enhancer||"function"==typeof enhancer&&"function"==typeof arguments[3])throw new Error("production"===process.env.NODE_ENV?formatProdErrorMessage(0):"It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");if("function"==typeof preloadedState&&void 0===enhancer&&(enhancer=preloadedState,preloadedState=void 0),void 0!==enhancer){if("function"!=typeof enhancer)throw new Error("production"===process.env.NODE_ENV?formatProdErrorMessage(1):"Expected the enhancer to be a function. Instead, received: '"+kindOf(enhancer)+"'");return enhancer(createStore)(reducer,preloadedState)}if("function"!=typeof reducer)throw new Error("production"===process.env.NODE_ENV?formatProdErrorMessage(2):"Expected the root reducer to be a function. Instead, received: '"+kindOf(reducer)+"'");var currentReducer=reducer,currentState=preloadedState,currentListeners=[],nextListeners=currentListeners,isDispatching=!1;function ensureCanMutateNextListeners(){nextListeners===currentListeners&&(nextListeners=currentListeners.slice())}function getState(){if(isDispatching)throw new Error("production"===process.env.NODE_ENV?formatProdErrorMessage(3):"You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return currentState}function subscribe(listener){if("function"!=typeof listener)throw new Error("production"===process.env.NODE_ENV?formatProdErrorMessage(4):"Expected the listener to be a function. Instead, received: '"+kindOf(listener)+"'");if(isDispatching)throw new Error("production"===process.env.NODE_ENV?formatProdErrorMessage(5):"You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");var isSubscribed=!0;return ensureCanMutateNextListeners(),nextListeners.push(listener),function(){if(isSubscribed){if(isDispatching)throw new Error("production"===process.env.NODE_ENV?formatProdErrorMessage(6):"You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");isSubscribed=!1,ensureCanMutateNextListeners();var index=nextListeners.indexOf(listener);nextListeners.splice(index,1),currentListeners=null}}}function dispatch(action){if(!isPlainObject(action))throw new Error("production"===process.env.NODE_ENV?formatProdErrorMessage(7):"Actions must be plain objects. Instead, the actual type was: '"+kindOf(action)+"'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");if(void 0===action.type)throw new Error("production"===process.env.NODE_ENV?formatProdErrorMessage(8):'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');if(isDispatching)throw new Error("production"===process.env.NODE_ENV?formatProdErrorMessage(9):"Reducers may not dispatch actions.");try{isDispatching=!0,currentState=currentReducer(currentState,action)}finally{isDispatching=!1}for(var listeners=currentListeners=nextListeners,i=0;i<listeners.length;i++){(0,listeners[i])()}return action}return dispatch({type:ActionTypes.INIT}),(_ref2={dispatch:dispatch,subscribe:subscribe,getState:getState,replaceReducer:function(nextReducer){if("function"!=typeof nextReducer)throw new Error("production"===process.env.NODE_ENV?formatProdErrorMessage(10):"Expected the nextReducer to be a function. Instead, received: '"+kindOf(nextReducer));currentReducer=nextReducer,dispatch({type:ActionTypes.REPLACE})}})[$$observable]=function(){var _ref,outerSubscribe=subscribe;return(_ref={subscribe:function(observer){if("object"!=typeof observer||null===observer)throw new Error("production"===process.env.NODE_ENV?formatProdErrorMessage(11):"Expected the observer to be an object. Instead, received: '"+kindOf(observer)+"'");function observeState(){observer.next&&observer.next(getState())}return observeState(),{unsubscribe:outerSubscribe(observeState)}}})[$$observable]=function(){return this},_ref},_ref2}var legacy_createStore=createStore;function warning(message){"undefined"!=typeof console&&"function"==typeof console.error&&console.error(message);try{throw new Error(message)}catch(e){}}function getUnexpectedStateShapeWarningMessage(inputState,reducers,action,unexpectedKeyCache){var reducerKeys=Object.keys(reducers),argumentName=action&&action.type===ActionTypes.INIT?"preloadedState argument passed to createStore":"previous state received by the reducer";if(0===reducerKeys.length)return"Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";if(!isPlainObject(inputState))return"The "+argumentName+' has unexpected type of "'+kindOf(inputState)+'". Expected argument to be an object with the following keys: "'+reducerKeys.join('", "')+'"';var unexpectedKeys=Object.keys(inputState).filter((function(key){return!reducers.hasOwnProperty(key)&&!unexpectedKeyCache[key]}));return unexpectedKeys.forEach((function(key){unexpectedKeyCache[key]=!0})),action&&action.type===ActionTypes.REPLACE?void 0:unexpectedKeys.length>0?"Unexpected "+(unexpectedKeys.length>1?"keys":"key")+' "'+unexpectedKeys.join('", "')+'" found in '+argumentName+'. Expected to find one of the known reducer keys instead: "'+reducerKeys.join('", "')+'". Unexpected keys will be ignored.':void 0}function assertReducerShape(reducers){Object.keys(reducers).forEach((function(key){var reducer=reducers[key];if(void 0===reducer(void 0,{type:ActionTypes.INIT}))throw new Error("production"===process.env.NODE_ENV?formatProdErrorMessage(12):'The slice reducer for key "'+key+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===reducer(void 0,{type:ActionTypes.PROBE_UNKNOWN_ACTION()}))throw new Error("production"===process.env.NODE_ENV?formatProdErrorMessage(13):'The slice reducer for key "'+key+"\" returned undefined when probed with a random type. Don't try to handle '"+ActionTypes.INIT+'\' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}function combineReducers(reducers){for(var reducerKeys=Object.keys(reducers),finalReducers={},i=0;i<reducerKeys.length;i++){var key=reducerKeys[i];"production"!==process.env.NODE_ENV&&void 0===reducers[key]&&warning('No reducer provided for key "'+key+'"'),"function"==typeof reducers[key]&&(finalReducers[key]=reducers[key])}var unexpectedKeyCache,shapeAssertionError,finalReducerKeys=Object.keys(finalReducers);"production"!==process.env.NODE_ENV&&(unexpectedKeyCache={});try{assertReducerShape(finalReducers)}catch(e){shapeAssertionError=e}return function(state,action){if(void 0===state&&(state={}),shapeAssertionError)throw shapeAssertionError;if("production"!==process.env.NODE_ENV){var warningMessage=getUnexpectedStateShapeWarningMessage(state,finalReducers,action,unexpectedKeyCache);warningMessage&&warning(warningMessage)}for(var hasChanged=!1,nextState={},_i=0;_i<finalReducerKeys.length;_i++){var _key=finalReducerKeys[_i],reducer=finalReducers[_key],previousStateForKey=state[_key],nextStateForKey=reducer(previousStateForKey,action);if(void 0===nextStateForKey){var actionType=action&&action.type;throw new Error("production"===process.env.NODE_ENV?formatProdErrorMessage(14):"When called with an action of type "+(actionType?'"'+String(actionType)+'"':"(unknown type)")+', the slice reducer for key "'+_key+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.')}nextState[_key]=nextStateForKey,hasChanged=hasChanged||nextStateForKey!==previousStateForKey}return(hasChanged=hasChanged||finalReducerKeys.length!==Object.keys(state).length)?nextState:state}}function bindActionCreator(actionCreator,dispatch){return function(){return dispatch(actionCreator.apply(this,arguments))}}function bindActionCreators(actionCreators,dispatch){if("function"==typeof actionCreators)return bindActionCreator(actionCreators,dispatch);if("object"!=typeof actionCreators||null===actionCreators)throw new Error("production"===process.env.NODE_ENV?formatProdErrorMessage(16):"bindActionCreators expected an object or a function, but instead received: '"+kindOf(actionCreators)+'\'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var boundActionCreators={};for(var key in actionCreators){var actionCreator=actionCreators[key];"function"==typeof actionCreator&&(boundActionCreators[key]=bindActionCreator(actionCreator,dispatch))}return boundActionCreators}function compose(){for(var _len=arguments.length,funcs=new Array(_len),_key=0;_key<_len;_key++)funcs[_key]=arguments[_key];return 0===funcs.length?function(arg){return arg}:1===funcs.length?funcs[0]:funcs.reduce((function(a,b){return function(){return a(b.apply(void 0,arguments))}}))}function applyMiddleware(){for(var _len=arguments.length,middlewares=new Array(_len),_key=0;_key<_len;_key++)middlewares[_key]=arguments[_key];return function(createStore){return function(){var store=createStore.apply(void 0,arguments),_dispatch=function(){throw new Error("production"===process.env.NODE_ENV?formatProdErrorMessage(15):"Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},middlewareAPI={getState:store.getState,dispatch:function(){return _dispatch.apply(void 0,arguments)}},chain=middlewares.map((function(middleware){return middleware(middlewareAPI)}));return _dispatch=compose.apply(void 0,chain)(store.dispatch),_objectSpread(_objectSpread({},store),{},{dispatch:_dispatch})}}}export{ActionTypes as __DO_NOT_USE__ActionTypes,applyMiddleware,bindActionCreators,combineReducers,compose,createStore,legacy_createStore};