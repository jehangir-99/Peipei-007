function minBlockRef(...refs){return sortBlockRefs(refs)[0]}function maxBlockRef(...refs){const sortedRefs=sortBlockRefs(refs);return sortedRefs[sortedRefs.length-1]}function sortBlockRefs(refs){return refs.sort(((refA,refB)=>"latest"===refA||"earliest"===refB?1:"latest"===refB||"earliest"===refA?-1:hexToInt(refA)-hexToInt(refB)))}function bnToHex(bn){return"0x"+bn.toString(16)}function blockRefIsNumber(blockRef){return blockRef&&!["earliest","latest","pending"].includes(blockRef)}function hexToInt(hexString){return null==hexString?hexString:Number.parseInt(hexString,16)}function incrementHexInt(hexString){if(null==hexString)return hexString;return intToHex(hexToInt(hexString)+1)}function intToHex(int){if(null==int)return int;let hexString=int.toString(16);return hexString.length%2&&(hexString="0"+hexString),"0x"+hexString}function unsafeRandomBytes(byteCount){let result="0x";for(let i=0;i<byteCount;i++)result+=unsafeRandomNibble(),result+=unsafeRandomNibble();return result}function unsafeRandomNibble(){return Math.floor(16*Math.random()).toString(16)}module.exports={minBlockRef:minBlockRef,maxBlockRef:maxBlockRef,sortBlockRefs:sortBlockRefs,bnToHex:bnToHex,blockRefIsNumber:blockRefIsNumber,hexToInt:hexToInt,incrementHexInt:incrementHexInt,intToHex:intToHex,unsafeRandomBytes:unsafeRandomBytes};