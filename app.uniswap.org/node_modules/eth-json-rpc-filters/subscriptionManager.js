const SafeEventEmitter=require("@metamask/safe-event-emitter").default,{createAsyncMiddleware:createAsyncMiddleware,createScaffoldMiddleware:createScaffoldMiddleware}=require("json-rpc-engine"),createFilterMiddleware=require("./index.js"),{unsafeRandomBytes:unsafeRandomBytes,incrementHexInt:incrementHexInt}=require("./hexUtils.js"),getBlocksForRange=require("./getBlocksForRange.js");function createSubscriptionMiddleware({blockTracker:blockTracker,provider:provider}){const subscriptions={},filterManager=createFilterMiddleware({blockTracker:blockTracker,provider:provider});let isDestroyed=!1;const events=new SafeEventEmitter,middleware=createScaffoldMiddleware({eth_subscribe:createAsyncMiddleware((async function(req,res){if(isDestroyed)throw new Error("SubscriptionManager - attempting to use after destroying");const subscriptionType=req.params[0],subId=unsafeRandomBytes(16);let sub;switch(subscriptionType){case"newHeads":sub=function({subId:subId}){const sub={type:subscriptionType,destroy:async()=>{blockTracker.removeListener("sync",sub.update)},update:async({oldBlock:oldBlock,newBlock:newBlock})=>{const toBlock=newBlock,fromBlock=incrementHexInt(oldBlock);(await getBlocksForRange({provider:provider,fromBlock:fromBlock,toBlock:toBlock})).map(normalizeBlock).filter((block=>null!==block)).forEach((value=>{_emitSubscriptionResult(subId,value)}))}};return blockTracker.on("sync",sub.update),sub}({subId:subId});break;case"logs":const filterParams=req.params[1];sub=function({subId:subId,filter:filter}){filter.on("update",(result=>_emitSubscriptionResult(subId,result)));const sub={type:subscriptionType,destroy:async()=>await filterManager.uninstallFilter(filter.idHex)};return sub}({subId:subId,filter:await filterManager.newLogFilter(filterParams)});break;default:throw new Error(`SubscriptionManager - unsupported subscription type "${subscriptionType}"`)}return subscriptions[subId]=sub,void(res.result=subId)})),eth_unsubscribe:createAsyncMiddleware((async function(req,res){if(isDestroyed)throw new Error("SubscriptionManager - attempting to use after destroying");const id=req.params[0],subscription=subscriptions[id];if(!subscription)return void(res.result=!1);delete subscriptions[id],await subscription.destroy(),res.result=!0}))});return middleware.destroy=function(){events.removeAllListeners();for(const id in subscriptions)subscriptions[id].destroy(),delete subscriptions[id];isDestroyed=!0},{events:events,middleware:middleware};function _emitSubscriptionResult(filterIdHex,value){events.emit("notification",{jsonrpc:"2.0",method:"eth_subscription",params:{subscription:filterIdHex,result:value}})}}function normalizeBlock(block){return null==block?null:{hash:block.hash,parentHash:block.parentHash,sha3Uncles:block.sha3Uncles,miner:block.miner,stateRoot:block.stateRoot,transactionsRoot:block.transactionsRoot,receiptsRoot:block.receiptsRoot,logsBloom:block.logsBloom,difficulty:block.difficulty,number:block.number,gasLimit:block.gasLimit,gasUsed:block.gasUsed,nonce:block.nonce,mixHash:block.mixHash,timestamp:block.timestamp,extraData:block.extraData}}module.exports=createSubscriptionMiddleware;