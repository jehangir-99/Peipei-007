async function getBlocksForRange({provider:provider,fromBlock:fromBlock,toBlock:toBlock}){fromBlock||(fromBlock=toBlock);const fromBlockNumber=hexToInt(fromBlock),toBlockNumber=hexToInt(toBlock),missingBlockNumbers=Array(toBlockNumber-fromBlockNumber+1).fill().map(((_,index)=>fromBlockNumber+index)).map(intToHex);let blockBodies=await Promise.all(missingBlockNumbers.map((blockNum=>query(provider,"eth_getBlockByNumber",[blockNum,!1]))));return blockBodies=blockBodies.filter((block=>null!==block)),blockBodies}function hexToInt(hexString){return null==hexString?hexString:Number.parseInt(hexString,16)}function incrementHexInt(hexString){if(null==hexString)return hexString;return intToHex(hexToInt(hexString)+1)}function intToHex(int){if(null==int)return int;return"0x"+int.toString(16)}function sendAsync(provider,request){return new Promise(((resolve,reject)=>{provider.sendAsync(request,((error,response)=>{error?reject(error):response.error?reject(response.error):response.result?resolve(response.result):reject(new Error("Result was empty"))}))}))}async function query(provider,method,params){for(let i=0;i<3;i++)try{return await sendAsync(provider,{id:1,jsonrpc:"2.0",method:method,params:params})}catch(error){console.error(`provider.sendAsync failed: ${error.stack||error.message||error}`)}return null}module.exports=getBlocksForRange;