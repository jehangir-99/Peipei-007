const Mutex=require("async-mutex").Mutex,{createAsyncMiddleware:createAsyncMiddleware,createScaffoldMiddleware:createScaffoldMiddleware}=require("json-rpc-engine"),LogFilter=require("./log-filter.js"),BlockFilter=require("./block-filter.js"),TxFilter=require("./tx-filter.js"),{intToHex:intToHex,hexToInt:hexToInt}=require("./hexUtils");function createEthFilterMiddleware({blockTracker:blockTracker,provider:provider}){let filterIndex=0,filters={};const mutex=new Mutex,waitForFree=mutexMiddlewareWrapper({mutex:mutex}),middleware=createScaffoldMiddleware({eth_newFilter:waitForFree(toFilterCreationMiddleware(newLogFilter)),eth_newBlockFilter:waitForFree(toFilterCreationMiddleware(newBlockFilter)),eth_newPendingTransactionFilter:waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),eth_uninstallFilter:waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),eth_getFilterChanges:waitForFree(toAsyncRpcMiddleware(getFilterChanges)),eth_getFilterLogs:waitForFree(toAsyncRpcMiddleware(getFilterLogs))}),filterUpdater=async({oldBlock:oldBlock,newBlock:newBlock})=>{if(0===filters.length)return;const releaseLock=await mutex.acquire();try{await Promise.all(objValues(filters).map((async filter=>{try{await filter.update({oldBlock:oldBlock,newBlock:newBlock})}catch(err){console.error(err)}})))}catch(err){console.error(err)}releaseLock()};return middleware.newLogFilter=newLogFilter,middleware.newBlockFilter=newBlockFilter,middleware.newPendingTransactionFilter=newPendingTransactionFilter,middleware.uninstallFilter=uninstallFilterHandler,middleware.getFilterChanges=getFilterChanges,middleware.getFilterLogs=getFilterLogs,middleware.destroy=()=>{!async function(){const prevFilterCount=objValues(filters).length;filters={},updateBlockTrackerSubs({prevFilterCount:prevFilterCount,newFilterCount:0})}()},middleware;async function newLogFilter(params){const filter=new LogFilter({provider:provider,params:params});await installFilter(filter);return filter}async function newBlockFilter(){const filter=new BlockFilter({provider:provider});await installFilter(filter);return filter}async function newPendingTransactionFilter(){const filter=new TxFilter({provider:provider});await installFilter(filter);return filter}async function getFilterChanges(filterIndexHex){const filterIndex=hexToInt(filterIndexHex),filter=filters[filterIndex];if(!filter)throw new Error(`No filter for index "${filterIndex}"`);return filter.getChangesAndClear()}async function getFilterLogs(filterIndexHex){const filterIndex=hexToInt(filterIndexHex),filter=filters[filterIndex];if(!filter)throw new Error(`No filter for index "${filterIndex}"`);let results=[];return"log"===filter.type&&(results=filter.getAllResults()),results}async function uninstallFilterHandler(filterIndexHex){const filterIndex=hexToInt(filterIndexHex),filter=filters[filterIndex],result=Boolean(filter);return result&&await async function(filterIndex){const prevFilterCount=objValues(filters).length;delete filters[filterIndex];const newFilterCount=objValues(filters).length;updateBlockTrackerSubs({prevFilterCount:prevFilterCount,newFilterCount:newFilterCount})}(filterIndex),result}async function installFilter(filter){const prevFilterCount=objValues(filters).length,currentBlock=await blockTracker.getLatestBlock();await filter.initialize({currentBlock:currentBlock}),filterIndex++,filters[filterIndex]=filter,filter.id=filterIndex,filter.idHex=intToHex(filterIndex);return updateBlockTrackerSubs({prevFilterCount:prevFilterCount,newFilterCount:objValues(filters).length}),filterIndex}function updateBlockTrackerSubs({prevFilterCount:prevFilterCount,newFilterCount:newFilterCount}){0===prevFilterCount&&newFilterCount>0?blockTracker.on("sync",filterUpdater):prevFilterCount>0&&0===newFilterCount&&blockTracker.removeListener("sync",filterUpdater)}}function toFilterCreationMiddleware(createFilterFn){return toAsyncRpcMiddleware((async(...args)=>{const filter=await createFilterFn(...args);return intToHex(filter.id)}))}function toAsyncRpcMiddleware(asyncFn){return createAsyncMiddleware((async(req,res)=>{const result=await asyncFn.apply(null,req.params);res.result=result}))}function mutexMiddlewareWrapper({mutex:mutex}){return middleware=>async(req,res,next,end)=>{(await mutex.acquire())(),middleware(req,res,next,end)}}function objValues(obj,fn){const values=[];for(let key in obj)values.push(obj[key]);return values}module.exports=createEthFilterMiddleware;