import{useState,useEffect,useContext,useRef,useCallback}from"react";import{getI18n,getDefaults,ReportNamespaces,I18nContext}from"./context.js";import{warnOnce,loadNamespaces,loadLanguages,hasLoadedNamespace}from"./utils.js";const usePrevious=(value,ignore)=>{const ref=useRef();return useEffect((()=>{ref.current=ignore?ref.current:value}),[value,ignore]),ref.current};function alwaysNewT(i18n,language,namespace,keyPrefix){return i18n.getFixedT(language,namespace,keyPrefix)}function useMemoizedT(i18n,language,namespace,keyPrefix){return useCallback(alwaysNewT(i18n,language,namespace,keyPrefix),[i18n,language,namespace,keyPrefix])}export function useTranslation(ns){let props=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const{i18n:i18nFromProps}=props,{i18n:i18nFromContext,defaultNS:defaultNSFromContext}=useContext(I18nContext)||{},i18n=i18nFromProps||i18nFromContext||getI18n();if(i18n&&!i18n.reportNamespaces&&(i18n.reportNamespaces=new ReportNamespaces),!i18n){warnOnce("You will need to pass in an i18next instance by using initReactI18next");const notReadyT=(k,optsOrDefaultValue)=>"string"==typeof optsOrDefaultValue?optsOrDefaultValue:optsOrDefaultValue&&"object"==typeof optsOrDefaultValue&&"string"==typeof optsOrDefaultValue.defaultValue?optsOrDefaultValue.defaultValue:Array.isArray(k)?k[k.length-1]:k,retNotReady=[notReadyT,{},!1];return retNotReady.t=notReadyT,retNotReady.i18n={},retNotReady.ready=!1,retNotReady}i18n.options.react&&void 0!==i18n.options.react.wait&&warnOnce("It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.");const i18nOptions={...getDefaults(),...i18n.options.react,...props},{useSuspense:useSuspense,keyPrefix:keyPrefix}=i18nOptions;let namespaces=ns||defaultNSFromContext||i18n.options&&i18n.options.defaultNS;namespaces="string"==typeof namespaces?[namespaces]:namespaces||["translation"],i18n.reportNamespaces.addUsedNamespaces&&i18n.reportNamespaces.addUsedNamespaces(namespaces);const ready=(i18n.isInitialized||i18n.initializedStoreOnce)&&namespaces.every((n=>hasLoadedNamespace(n,i18n,i18nOptions))),memoGetT=useMemoizedT(i18n,props.lng||null,"fallback"===i18nOptions.nsMode?namespaces:namespaces[0],keyPrefix),getT=()=>memoGetT,getNewT=()=>alwaysNewT(i18n,props.lng||null,"fallback"===i18nOptions.nsMode?namespaces:namespaces[0],keyPrefix),[t,setT]=useState(getT);let joinedNS=namespaces.join();props.lng&&(joinedNS=`${props.lng}${joinedNS}`);const previousJoinedNS=usePrevious(joinedNS),isMounted=useRef(!0);useEffect((()=>{const{bindI18n:bindI18n,bindI18nStore:bindI18nStore}=i18nOptions;function boundReset(){isMounted.current&&setT(getNewT)}return isMounted.current=!0,ready||useSuspense||(props.lng?loadLanguages(i18n,props.lng,namespaces,(()=>{isMounted.current&&setT(getNewT)})):loadNamespaces(i18n,namespaces,(()=>{isMounted.current&&setT(getNewT)}))),ready&&previousJoinedNS&&previousJoinedNS!==joinedNS&&isMounted.current&&setT(getNewT),bindI18n&&i18n&&i18n.on(bindI18n,boundReset),bindI18nStore&&i18n&&i18n.store.on(bindI18nStore,boundReset),()=>{isMounted.current=!1,bindI18n&&i18n&&bindI18n.split(" ").forEach((e=>i18n.off(e,boundReset))),bindI18nStore&&i18n&&bindI18nStore.split(" ").forEach((e=>i18n.store.off(e,boundReset)))}}),[i18n,joinedNS]),useEffect((()=>{isMounted.current&&ready&&setT(getT)}),[i18n,keyPrefix,ready]);const ret=[t,i18n,ready];if(ret.t=t,ret.i18n=i18n,ret.ready=ready,ready)return ret;if(!ready&&!useSuspense)return ret;throw new Promise((resolve=>{props.lng?loadLanguages(i18n,props.lng,namespaces,(()=>resolve())):loadNamespaces(i18n,namespaces,(()=>resolve()))}))}