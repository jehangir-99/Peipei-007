"use strict";export function valueSetter(mutable,value){let forceUpdate=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const previousAnimation=mutable._animation;if(previousAnimation&&(previousAnimation.cancelled=!0,mutable._animation=null),"function"==typeof value||null!==value&&"object"==typeof value&&void 0!==value.onFrame){const animation="function"==typeof value?value():value;if(mutable._value===animation.current&&!animation.isHigherOrder&&!forceUpdate)return void(animation.callback&&animation.callback(!0));const initializeAnimation=timestamp=>{animation.onStart(animation,mutable.value,timestamp,previousAnimation)},currentTimestamp=global.__frameTimestamp||global._getAnimationTimestamp();initializeAnimation(currentTimestamp);const step=newTimestamp=>{const timestamp=newTimestamp<(animation.timestamp||0)?animation.timestamp:newTimestamp;if(animation.cancelled)return void(animation.callback&&animation.callback(!1));const finished=animation.onFrame(animation,timestamp);animation.finished=!0,animation.timestamp=timestamp,mutable._value=animation.current,finished?animation.callback&&animation.callback(!0):requestAnimationFrame(step)};mutable._animation=animation,step(currentTimestamp)}else{if(mutable._value===value&&!forceUpdate)return;mutable._value=value}}