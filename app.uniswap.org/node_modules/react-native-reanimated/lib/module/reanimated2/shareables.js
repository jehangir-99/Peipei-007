"use strict";import NativeReanimatedModule from"./NativeReanimated";import{isWorkletFunction}from"./commonTypes";import{shouldBeUseWeb}from"./PlatformChecker";import{registerWorkletStackDetails}from"./errors";import{jsVersion}from"./platform-specific/jsVersion";import{shareableMappingCache,shareableMappingFlag}from"./shareableMappingCache";const SHOULD_BE_USE_WEB=shouldBeUseWeb(),MAGIC_KEY="REANIMATED_MAGIC_KEY";function isHostObject(value){return MAGIC_KEY in value}function isPlainJSObject(object){return Object.getPrototypeOf(object)===Object.prototype}const INACCESSIBLE_OBJECT={__init:()=>new Proxy({},{get:(_,prop)=>{if("_isReanimatedSharedValue"===prop||"__remoteFunction"===prop)return!1;throw new Error(`[Reanimated] Trying to access property \`${String(prop)}\` of an object which cannot be sent to the UI runtime.`)},set:()=>{throw new Error("[Reanimated] Trying to write to an object which cannot be sent to the UI runtime.")}})},VALID_ARRAY_VIEWS_NAMES=["Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","BigInt64Array","BigUint64Array","DataView"],DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD=30;let processedObjectAtThresholdDepth;export function makeShareableCloneRecursive(value){let shouldPersistRemote=arguments.length>1&&void 0!==arguments[1]&&arguments[1],depth=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;if(SHOULD_BE_USE_WEB)return value;if(depth>=DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD){if(depth===DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD)processedObjectAtThresholdDepth=value;else if(value===processedObjectAtThresholdDepth)throw new Error("[Reanimated] Trying to convert a cyclic object to a shareable. This is not supported.")}else processedObjectAtThresholdDepth=void 0;const type=typeof value,isTypeFunction="function"===type;if(("object"===type||isTypeFunction)&&null!==value){const cached=shareableMappingCache.get(value);if(cached===shareableMappingFlag)return value;if(void 0!==cached)return cached;{let toAdapt;if(Array.isArray(value))toAdapt=value.map((element=>makeShareableCloneRecursive(element,shouldPersistRemote,depth+1)));else if(isTypeFunction&&!isWorkletFunction(value))toAdapt=value;else if(isHostObject(value))toAdapt=value;else if(isPlainJSObject(value)||isTypeFunction){if(toAdapt={},isWorkletFunction(value)){if(__DEV__){const babelVersion=value.__initData.version;if(void 0!==babelVersion&&babelVersion!==jsVersion)throw new Error(`[Reanimated] Mismatch between JavaScript code version and Reanimated Babel plugin version (${jsVersion} vs. ${babelVersion}).        \nSee \`https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#mismatch-between-javascript-code-version-and-reanimated-babel-plugin-version\` for more details.\nOffending code was: \`${getWorkletCode(value)}\``);registerWorkletStackDetails(value.__workletHash,value.__stackDetails)}value.__stackDetails&&delete value.__stackDetails,toAdapt.__initData=makeShareableCloneRecursive(value.__initData,!0,depth+1)}for(const[key,element]of Object.entries(value))"__initData"===key&&void 0!==toAdapt.__initData||(toAdapt[key]=makeShareableCloneRecursive(element,shouldPersistRemote,depth+1))}else{if(value instanceof RegExp){const pattern=value.source,flags=value.flags,handle=makeShareableCloneRecursive({__init:()=>new RegExp(pattern,flags)});return shareableMappingCache.set(value,handle),handle}if(!(value instanceof ArrayBuffer)){if(ArrayBuffer.isView(value)){const buffer=value.buffer,typeName=value.constructor.name,handle=makeShareableCloneRecursive({__init:()=>{if(!VALID_ARRAY_VIEWS_NAMES.includes(typeName))throw new Error(`[Reanimated] Invalid array view name \`${typeName}\`.`);const constructor=global[typeName];if(void 0===constructor)throw new Error(`[Reanimated] Constructor for \`${typeName}\` not found.`);return new constructor(buffer)}});return shareableMappingCache.set(value,handle),handle}{const inaccessibleObject=makeShareableCloneRecursive(INACCESSIBLE_OBJECT);return shareableMappingCache.set(value,inaccessibleObject),inaccessibleObject}}toAdapt=value}__DEV__&&Object.freeze(value);const adopted=NativeReanimatedModule.makeShareableClone(toAdapt,shouldPersistRemote);return shareableMappingCache.set(value,adopted),shareableMappingCache.set(adopted),adopted}}return NativeReanimatedModule.makeShareableClone(value,shouldPersistRemote)}const WORKLET_CODE_THRESHOLD=255;function getWorkletCode(value){var _value$__initData;const code=null==value||null===(_value$__initData=value.__initData)||void 0===_value$__initData?void 0:_value$__initData.code;return code?code.length>WORKLET_CODE_THRESHOLD?`${code.substring(0,WORKLET_CODE_THRESHOLD)}...`:code:"unknown"}function isRemoteFunction(value){return!!value.__remoteFunction}export function makeShareableCloneOnUIRecursive(value){if(SHOULD_BE_USE_WEB)return value;return function cloneRecursive(value){if("object"==typeof value&&null!==value||"function"==typeof value){if(isHostObject(value))return global._makeShareableClone(value);if(isRemoteFunction(value))return value.__remoteFunction;if(Array.isArray(value))return global._makeShareableClone(value.map(cloneRecursive));const toAdapt={};for(const[key,element]of Object.entries(value))toAdapt[key]=cloneRecursive(element);return global._makeShareableClone(toAdapt)}return global._makeShareableClone(value)}(value)}function makeShareableJS(value){return value}function makeShareableNative(value){if(shareableMappingCache.get(value))return value;const handle=makeShareableCloneRecursive({__init:()=>value});return shareableMappingCache.set(value,handle),value}export const makeShareable=SHOULD_BE_USE_WEB?makeShareableJS:makeShareableNative;