"use strict";function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(arg){var key=_toPrimitive(arg,"string");return"symbol"==typeof key?key:String(key)}function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}import{registerEventHandler,unregisterEventHandler}from"./core";import{shouldBeUseWeb}from"./PlatformChecker";const SHOULD_BE_USE_WEB=shouldBeUseWeb();function jsListener(eventName,handler){return evt=>{handler({...evt.nativeEvent,eventName:eventName})}}export default class WorkletEventHandler{constructor(worklet){let eventNames=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];_defineProperty(this,"worklet",void 0),_defineProperty(this,"eventNames",void 0),_defineProperty(this,"reattachNeeded",void 0),_defineProperty(this,"listeners",void 0),_defineProperty(this,"viewTag",void 0),_defineProperty(this,"registrations",void 0),this.worklet=worklet,this.eventNames=eventNames,this.reattachNeeded=!1,this.listeners={},this.viewTag=void 0,this.registrations=[],SHOULD_BE_USE_WEB&&(this.listeners=eventNames.reduce(((acc,eventName)=>(acc[eventName]=jsListener(eventName,worklet),acc)),{}))}updateWorklet(newWorklet){this.worklet=newWorklet,this.reattachNeeded=!0}registerForEvents(viewTag,fallbackEventName){this.viewTag=viewTag,this.registrations=this.eventNames.map((eventName=>registerEventHandler(this.worklet,eventName,viewTag))),0===this.registrations.length&&fallbackEventName&&this.registrations.push(registerEventHandler(this.worklet,fallbackEventName,viewTag))}registerForEventByName(eventName){this.registrations.push(registerEventHandler(this.worklet,eventName))}unregisterFromEvents(){this.registrations.forEach((id=>unregisterEventHandler(id))),this.registrations=[]}}