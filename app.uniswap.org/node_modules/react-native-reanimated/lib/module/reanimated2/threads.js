"use strict";import NativeReanimatedModule from"./NativeReanimated";import{isJest,shouldBeUseWeb}from"./PlatformChecker";import{makeShareableCloneOnUIRecursive,makeShareableCloneRecursive}from"./shareables";import{isWorkletFunction}from"./commonTypes";const IS_JEST=isJest(),SHOULD_BE_USE_WEB=shouldBeUseWeb();let _runOnUIQueue=[];export function setupMicrotasks(){let microtasksQueue=[],isExecutingMicrotasksQueue=!1;global.queueMicrotask=callback=>{microtasksQueue.push(callback)},global.__callMicrotasks=()=>{if(!isExecutingMicrotasksQueue)try{isExecutingMicrotasksQueue=!0;for(let index=0;index<microtasksQueue.length;index+=1)microtasksQueue[index]();microtasksQueue=[],global._maybeFlushUIUpdatesQueue()}finally{isExecutingMicrotasksQueue=!1}}}function callMicrotasksOnUIThread(){global.__callMicrotasks()}export const callMicrotasks=SHOULD_BE_USE_WEB?()=>{}:callMicrotasksOnUIThread;export function runOnUI(worklet){if(__DEV__&&!SHOULD_BE_USE_WEB&&_WORKLET)throw new Error("[Reanimated] `runOnUI` cannot be called on the UI runtime. Please call the function synchronously or use `queueMicrotask` or `requestAnimationFrame` instead.");if(__DEV__&&!SHOULD_BE_USE_WEB&&!isWorkletFunction(worklet))throw new Error("[Reanimated] `runOnUI` can only be used on worklets.");return function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];IS_JEST?NativeReanimatedModule.scheduleOnUI(makeShareableCloneRecursive((()=>{worklet(...args)}))):(__DEV__&&(makeShareableCloneRecursive(worklet),makeShareableCloneRecursive(args)),_runOnUIQueue.push([worklet,args]),1===_runOnUIQueue.length&&queueMicrotask((()=>{const queue=_runOnUIQueue;_runOnUIQueue=[],NativeReanimatedModule.scheduleOnUI(makeShareableCloneRecursive((()=>{queue.forEach((_ref=>{let[worklet,args]=_ref;worklet(...args)})),callMicrotasks()})))})))}}export function executeOnUIRuntimeSync(worklet){return function(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++)args[_key2]=arguments[_key2];return NativeReanimatedModule.executeOnUIRuntimeSync(makeShareableCloneRecursive((()=>{const result=worklet(...args);return makeShareableCloneOnUIRecursive(result)})))}}export function runOnUIImmediately(worklet){if(__DEV__&&!SHOULD_BE_USE_WEB&&_WORKLET)throw new Error("[Reanimated] `runOnUIImmediately` cannot be called on the UI runtime. Please call the function synchronously or use `queueMicrotask` or `requestAnimationFrame` instead.");if(__DEV__&&!SHOULD_BE_USE_WEB&&!isWorkletFunction(worklet))throw new Error("[Reanimated] `runOnUIImmediately` can only be used on worklets.");return function(){for(var _len3=arguments.length,args=new Array(_len3),_key3=0;_key3<_len3;_key3++)args[_key3]=arguments[_key3];NativeReanimatedModule.scheduleOnUI(makeShareableCloneRecursive((()=>{worklet(...args)})))}}function runWorkletOnJS(worklet){for(var _len4=arguments.length,args=new Array(_len4>1?_len4-1:0),_key4=1;_key4<_len4;_key4++)args[_key4-1]=arguments[_key4];worklet(...args)}export function runOnJS(fun){return SHOULD_BE_USE_WEB||!_WORKLET?function(){for(var _len5=arguments.length,args=new Array(_len5),_key5=0;_key5<_len5;_key5++)args[_key5]=arguments[_key5];return queueMicrotask(args.length?()=>fun(...args):fun)}:isWorkletFunction(fun)?function(){for(var _len6=arguments.length,args=new Array(_len6),_key6=0;_key6<_len6;_key6++)args[_key6]=arguments[_key6];return runOnJS(runWorkletOnJS)(fun,...args)}:(fun.__remoteFunction&&(fun=fun.__remoteFunction),function(){for(var _len7=arguments.length,args=new Array(_len7),_key7=0;_key7<_len7;_key7++)args[_key7]=arguments[_key7];global._scheduleOnJS(fun,args.length>0?makeShareableCloneOnUIRecursive(args):void 0)})}