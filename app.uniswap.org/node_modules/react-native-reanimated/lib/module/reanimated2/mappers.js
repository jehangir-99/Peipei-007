"use strict";import{isJest}from"./PlatformChecker";import{runOnUI}from"./threads";import{isSharedValue}from"./isSharedValue";const IS_JEST=isJest();function createMapperRegistry(){const mappers=new Map;let sortedMappers=[],runRequested=!1,processingMappers=!1;function updateMappersOrder(){const pre=new Map;mappers.forEach((mapper=>{if(mapper.outputs)for(const output of mapper.outputs){const preMappers=pre.get(output);void 0===preMappers?pre.set(output,[mapper]):preMappers.push(mapper)}}));const visited=new Set,newOrder=[];function dfs(mapper){visited.add(mapper);for(const input of mapper.inputs){const preMappers=pre.get(input);if(preMappers)for(const preMapper of preMappers)visited.has(preMapper)||dfs(preMapper)}newOrder.push(mapper)}mappers.forEach((mapper=>{visited.has(mapper)||dfs(mapper)})),sortedMappers=newOrder}function mapperRun(){if(runRequested=!1,!processingMappers)try{processingMappers=!0,mappers.size!==sortedMappers.length&&updateMappersOrder();for(const mapper of sortedMappers)mapper.dirty&&(mapper.dirty=!1,mapper.worklet())}finally{processingMappers=!1}}function maybeRequestUpdates(){IS_JEST?mapperRun():runRequested||(processingMappers?requestAnimationFrame(mapperRun):queueMicrotask(mapperRun),runRequested=!0)}function extractInputs(inputs,resultArray){if(Array.isArray(inputs))for(const input of inputs)input&&extractInputs(input,resultArray);else if(isSharedValue(inputs))resultArray.push(inputs);else if(Object.getPrototypeOf(inputs)===Object.prototype)for(const element of Object.values(inputs))element&&extractInputs(element,resultArray);return resultArray}return{start:(mapperID,worklet,inputs,outputs)=>{const mapper={id:mapperID,dirty:!0,worklet:worklet,inputs:extractInputs(inputs,[]),outputs:outputs};mappers.set(mapper.id,mapper),sortedMappers=[];for(const sv of mapper.inputs)sv.addListener(mapper.id,(()=>{mapper.dirty=!0,maybeRequestUpdates()}));maybeRequestUpdates()},stop:mapperID=>{const mapper=mappers.get(mapperID);if(mapper){mappers.delete(mapper.id),sortedMappers=[];for(const sv of mapper.inputs)sv.removeListener(mapper.id)}}}}let MAPPER_ID=9999;export function startMapper(worklet){let inputs=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],outputs=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];const mapperID=MAPPER_ID+=1;return runOnUI((()=>{let mapperRegistry=global.__mapperRegistry;void 0===mapperRegistry&&(mapperRegistry=global.__mapperRegistry=createMapperRegistry()),mapperRegistry.start(mapperID,worklet,inputs,outputs)}))(),mapperID}export function stopMapper(mapperID){runOnUI((()=>{const mapperRegistry=global.__mapperRegistry;null==mapperRegistry||mapperRegistry.stop(mapperID)}))()}