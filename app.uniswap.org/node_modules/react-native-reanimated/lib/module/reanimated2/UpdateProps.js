"use strict";import{processColorsInProps}from"./Colors";import{_updatePropsJS}from"./js-reanimated";import{isFabric,isJest,shouldBeUseWeb}from"./PlatformChecker";import{runOnUIImmediately}from"./threads";let updateProps;updateProps=shouldBeUseWeb()?(_,updates,maybeViewRef,isAnimatedProps)=>{maybeViewRef&&maybeViewRef.items.forEach(((item,_index)=>{_updatePropsJS(updates,item,isAnimatedProps)}))}:(viewDescriptors,updates)=>{processColorsInProps(updates),global.UpdatePropsManager.update(viewDescriptors,updates)};export const updatePropsJestWrapper=(viewDescriptors,updates,maybeViewRef,animatedStyle,adapters)=>{adapters.forEach((adapter=>{adapter(updates)})),animatedStyle.current.value={...animatedStyle.current.value,...updates},updateProps(viewDescriptors,updates,maybeViewRef)};export default updateProps;const createUpdatePropsManager=isFabric()?()=>{const operations=[];return{update(viewDescriptors,updates){viewDescriptors.value.forEach((viewDescriptor=>{operations.push({shadowNodeWrapper:viewDescriptor.shadowNodeWrapper,updates:updates}),1===operations.length&&queueMicrotask(this.flush)}))},flush(){global._updatePropsFabric(operations),operations.length=0}}}:()=>{const operations=[];return{update(viewDescriptors,updates){viewDescriptors.value.forEach((viewDescriptor=>{operations.push({tag:viewDescriptor.tag,name:viewDescriptor.name||"RCTView",updates:updates}),1===operations.length&&queueMicrotask(this.flush)}))},flush(){global._updatePropsPaper(operations),operations.length=0}}};if(shouldBeUseWeb()){const maybeThrowError=()=>{if(!isJest())throw new Error("[Reanimated] `UpdatePropsManager` is not available on non-native platform.")};global.UpdatePropsManager=new Proxy({},{get:maybeThrowError,set:()=>(maybeThrowError(),!1)})}else runOnUIImmediately((()=>{global.UpdatePropsManager=createUpdatePropsManager()}))();