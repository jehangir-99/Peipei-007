"use strict";function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(arg){var key=_toPrimitive(arg,"string");return"symbol"==typeof key?key:String(key)}function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}import{isChromeDebugger,isJest,isWeb,isWindowAvailable}from"../PlatformChecker";import{SensorType}from"../commonTypes";import{mockedRequestAnimationFrame}from"../mockedRequestAnimationFrame";const requestAnimationFrameImpl=isJest()||!globalThis.requestAnimationFrame?mockedRequestAnimationFrame:globalThis.requestAnimationFrame;export default class JSReanimated{constructor(){_defineProperty(this,"nextSensorId",0),_defineProperty(this,"sensors",new Map),_defineProperty(this,"platform",void 0),_defineProperty(this,"getSensorCallback",((sensor,sensorType,eventHandler)=>{switch(sensorType){case SensorType.ACCELEROMETER:case SensorType.GRAVITY:return()=>{let{x:x,y:y,z:z}=sensor;this.platform===Platform.WEB_ANDROID&&([x,y,z]=[-x,-y,-z]),eventHandler({x:x,y:y,z:z,interfaceOrientation:0})};case SensorType.GYROSCOPE:case SensorType.MAGNETIC_FIELD:return()=>{const{x:x,y:y,z:z}=sensor;eventHandler({x:x,y:y,z:z,interfaceOrientation:0})};case SensorType.ROTATION:return()=>{let[qw,qx,qy,qz]=sensor.quaternion;this.platform===Platform.WEB_ANDROID&&([qy,qz]=[qz,-qy]);const yaw=-Math.atan2(2*(qy*qz+qw*qx),qw*qw-qx*qx-qy*qy+qz*qz),pitch=Math.sin(-2*(qx*qz-qw*qy)),roll=-Math.atan2(2*(qx*qy+qw*qz),qw*qw+qx*qx-qy*qy-qz*qz);eventHandler({qw:qw,qx:qx,qy:qy,qz:qz,yaw:yaw,pitch:pitch,roll:roll,interfaceOrientation:0})}}}))}makeShareableClone(){throw new Error("[Reanimated] makeShareableClone should never be called in JSReanimated.")}scheduleOnUI(worklet){requestAnimationFrameImpl(worklet)}createWorkletRuntime(_name,_initializer){throw new Error("[Reanimated] createWorkletRuntime is not available in JSReanimated.")}scheduleOnRuntime(){throw new Error("[Reanimated] scheduleOnRuntime is not available in JSReanimated.")}registerEventHandler(_eventHandler,_eventName,_emitterReactTag){return-1}unregisterEventHandler(_){}enableLayoutAnimations(){isWeb()?console.warn("[Reanimated] Layout Animations are not supported on web yet."):isJest()?console.warn("[Reanimated] Layout Animations are no-ops when using Jest."):isChromeDebugger()?console.warn("[Reanimated] Layout Animations are no-ops when using Chrome Debugger."):console.warn("[Reanimated] Layout Animations are not supported on this configuration.")}configureLayoutAnimation(){}configureLayoutAnimationBatch(){}setShouldAnimateExitingForTag(){}registerSensor(sensorType,interval,_iosReferenceFrame,eventHandler){if(!isWindowAvailable())return-1;if(void 0===this.platform&&this.detectPlatform(),!(this.getSensorName(sensorType)in window))return console.warn("[Reanimated] Sensor is not available."+(isWeb()&&"https:"!==location.protocol?" Make sure you use secure origin with `npx expo start --web --https`.":"")+(this.platform===Platform.WEB_IOS?" For iOS web, you will also have to also grant permission in the browser: https://dev.to/li/how-to-requestpermission-for-devicemotion-and-deviceorientation-events-in-ios-13-46g2.":"")),-1;void 0===this.platform&&this.detectPlatform();const sensor=this.initializeSensor(sensorType,interval);return sensor.addEventListener("reading",this.getSensorCallback(sensor,sensorType,eventHandler)),sensor.start(),this.sensors.set(this.nextSensorId,sensor),this.nextSensorId++}unregisterSensor(id){const sensor=this.sensors.get(id);void 0!==sensor&&(sensor.stop(),this.sensors.delete(id))}subscribeForKeyboardEvents(_){return isWeb()?console.warn("[Reanimated] useAnimatedKeyboard is not available on web yet."):isJest()?console.warn("[Reanimated] useAnimatedKeyboard is not available when using Jest."):isChromeDebugger()?console.warn("[Reanimated] useAnimatedKeyboard is not available when using Chrome Debugger."):console.warn("[Reanimated] useAnimatedKeyboard is not available on this configuration."),-1}unsubscribeFromKeyboardEvents(_){}initializeSensor(sensorType,interval){const config=interval<=0?{referenceFrame:"device"}:{frequency:1e3/interval};switch(sensorType){case SensorType.ACCELEROMETER:return new window.Accelerometer(config);case SensorType.GYROSCOPE:return new window.Gyroscope(config);case SensorType.GRAVITY:return new window.GravitySensor(config);case SensorType.MAGNETIC_FIELD:return new window.Magnetometer(config);case SensorType.ROTATION:return new window.AbsoluteOrientationSensor(config)}}getSensorName(sensorType){switch(sensorType){case SensorType.ACCELEROMETER:return"Accelerometer";case SensorType.GRAVITY:return"GravitySensor";case SensorType.GYROSCOPE:return"Gyroscope";case SensorType.MAGNETIC_FIELD:return"Magnetometer";case SensorType.ROTATION:return"AbsoluteOrientationSensor"}}detectPlatform(){const userAgent=navigator.userAgent||navigator.vendor||window.opera;void 0===userAgent?this.platform=Platform.UNKNOWN:/iPad|iPhone|iPod/.test(userAgent)?this.platform=Platform.WEB_IOS:/android/i.test(userAgent)?this.platform=Platform.WEB_ANDROID:this.platform=Platform.WEB}getViewProp(_viewTag,_propName,_callback){throw new Error("[Reanimated] getViewProp is not available in JSReanimated.")}configureProps(){throw new Error("[Reanimated] configureProps is not available in JSReanimated.")}executeOnUIRuntimeSync(_shareable){throw new Error("[Reanimated] `executeOnUIRuntimeSync` is not available in JSReanimated.")}}var Platform=function(Platform){return Platform.WEB_IOS="web iOS",Platform.WEB_ANDROID="web Android",Platform.WEB="web",Platform.UNKNOWN="unknown",Platform}(Platform||{});