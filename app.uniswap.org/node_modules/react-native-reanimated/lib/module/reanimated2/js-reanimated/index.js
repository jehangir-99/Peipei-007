"use strict";import JSReanimated from"./JSReanimated";import{isWeb}from"../PlatformChecker";import{PropsAllowlists}from"../../propsAllowlists";let createReactDOMStyle,createTransformValue,createTextShadowValue;if(isWeb()){try{createReactDOMStyle=require("react-native-web/dist/exports/StyleSheet/compiler/createReactDOMStyle").default}catch(e){}try{createTransformValue=require("react-native-web/dist/exports/StyleSheet/preprocess").createTransformValue}catch(e){}try{createTextShadowValue=require("react-native-web/dist/exports/StyleSheet/preprocess").createTextShadowValue}catch(e){}}const reanimatedJS=new JSReanimated;global._makeShareableClone=()=>{throw new Error("[Reanimated] _makeShareableClone should never be called in JSReanimated.")},global._scheduleOnJS=()=>{throw new Error("[Reanimated] _scheduleOnJS should never be called in JSReanimated.")},global._scheduleOnRuntime=()=>{throw new Error("[Reanimated] _scheduleOnRuntime should never be called in JSReanimated.")};export const _updatePropsJS=(updates,viewRef,isAnimatedProps)=>{if(viewRef._component){const component=viewRef._component,[rawStyles]=Object.keys(updates).reduce(((acc,key)=>{const value=updates[key];return acc["function"==typeof value?1:0][key]=value,acc}),[{},{}]);if("function"==typeof component.setNativeProps)setNativeProps(component,rawStyles,isAnimatedProps);else if(void 0!==createReactDOMStyle&&void 0!==component.style)updatePropsDOM(component,rawStyles,isAnimatedProps);else if(Object.keys(component.props).length>0)Object.keys(component.props).forEach((key=>{if(!rawStyles[key])return;const dashedKey=key.replace(/[A-Z]/g,(m=>"-"+m.toLowerCase()));component._touchableNode.setAttribute(dashedKey,rawStyles[key])}));else{const componentName="className"in component?null==component?void 0:component.className:"";console.warn(`[Reanimated] It's not possible to manipulate the component ${componentName}`)}}};const setNativeProps=(component,newProps,isAnimatedProps)=>{var _component$setNativeP2;if(isAnimatedProps){var _component$setNativeP;const uiProps={};for(const key in newProps)isNativeProp(key)&&(uiProps[key]=newProps[key]);null===(_component$setNativeP=component.setNativeProps)||void 0===_component$setNativeP||_component$setNativeP.call(component,uiProps)}const currentStyle={...component.previousStyle?component.previousStyle:{},...newProps};component.previousStyle=currentStyle,null===(_component$setNativeP2=component.setNativeProps)||void 0===_component$setNativeP2||_component$setNativeP2.call(component,{style:currentStyle})},updatePropsDOM=(component,style,isAnimatedProps)=>{const currentStyle={...component.previousStyle?component.previousStyle:{},...style};component.previousStyle=currentStyle;const domStyle=createReactDOMStyle(currentStyle);Array.isArray(domStyle.transform)&&void 0!==createTransformValue&&(domStyle.transform=createTransformValue(domStyle.transform)),void 0!==createTextShadowValue&&(domStyle.textShadowColor||domStyle.textShadowRadius||domStyle.textShadowOffset)&&(domStyle.textShadow=createTextShadowValue({textShadowColor:domStyle.textShadowColor,textShadowOffset:domStyle.textShadowOffset,textShadowRadius:domStyle.textShadowRadius}));for(const key in domStyle)isAnimatedProps?component.setAttribute(key,domStyle[key]):component.style[key]=domStyle[key]};function isNativeProp(propName){return!!PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST[propName]}export default reanimatedJS;