"use strict";export let Extrapolation=function(Extrapolation){return Extrapolation.IDENTITY="identity",Extrapolation.CLAMP="clamp",Extrapolation.EXTEND="extend",Extrapolation}({});function getVal(type,coef,val,leftEdgeOutput,rightEdgeOutput,x){switch(type){case Extrapolation.IDENTITY:return x;case Extrapolation.CLAMP:return coef*val<coef*leftEdgeOutput?leftEdgeOutput:rightEdgeOutput;case Extrapolation.EXTEND:default:return val}}function isExtrapolate(value){return value===Extrapolation.EXTEND||value===Extrapolation.CLAMP||value===Extrapolation.IDENTITY}function validateType(type){const extrapolationConfig={extrapolateLeft:Extrapolation.EXTEND,extrapolateRight:Extrapolation.EXTEND};if(!type)return extrapolationConfig;if("string"==typeof type){if(!isExtrapolate(type))throw new Error('[Reanimated] Unsupported value for "interpolate" \nSupported values: ["extend", "clamp", "identity", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\n Valid example:\n        interpolate(value, [inputRange], [outputRange], "clamp")');return extrapolationConfig.extrapolateLeft=type,extrapolationConfig.extrapolateRight=type,extrapolationConfig}if(type.extrapolateLeft&&!isExtrapolate(type.extrapolateLeft)||type.extrapolateRight&&!isExtrapolate(type.extrapolateRight))throw new Error('[Reanimated] Unsupported value for "interpolate" \nSupported values: ["extend", "clamp", "identity", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\n Valid example:\n      interpolate(value, [inputRange], [outputRange], {\n        extrapolateLeft: Extrapolation.CLAMP,\n        extrapolateRight: Extrapolation.IDENTITY\n      }})');return Object.assign(extrapolationConfig,type),extrapolationConfig}function internalInterpolate(x,narrowedInput,extrapolationConfig){const{leftEdgeInput:leftEdgeInput,rightEdgeInput:rightEdgeInput,leftEdgeOutput:leftEdgeOutput,rightEdgeOutput:rightEdgeOutput}=narrowedInput;if(rightEdgeInput-leftEdgeInput==0)return leftEdgeOutput;const val=leftEdgeOutput+(x-leftEdgeInput)/(rightEdgeInput-leftEdgeInput)*(rightEdgeOutput-leftEdgeOutput),coef=rightEdgeOutput>=leftEdgeOutput?1:-1;return coef*val<coef*leftEdgeOutput?getVal(extrapolationConfig.extrapolateLeft,coef,val,leftEdgeOutput,rightEdgeOutput,x):coef*val>coef*rightEdgeOutput?getVal(extrapolationConfig.extrapolateRight,coef,val,leftEdgeOutput,rightEdgeOutput,x):val}export function interpolate(x,inputRange,outputRange,type){if(inputRange.length<2||outputRange.length<2)throw new Error("[Reanimated] Interpolation input and output ranges should contain at least two values.");const extrapolationConfig=validateType(type),length=inputRange.length,narrowedInput={leftEdgeInput:inputRange[0],rightEdgeInput:inputRange[1],leftEdgeOutput:outputRange[0],rightEdgeOutput:outputRange[1]};if(length>2)if(x>inputRange[length-1])narrowedInput.leftEdgeInput=inputRange[length-2],narrowedInput.rightEdgeInput=inputRange[length-1],narrowedInput.leftEdgeOutput=outputRange[length-2],narrowedInput.rightEdgeOutput=outputRange[length-1];else for(let i=1;i<length;++i)if(x<=inputRange[i]){narrowedInput.leftEdgeInput=inputRange[i-1],narrowedInput.rightEdgeInput=inputRange[i],narrowedInput.leftEdgeOutput=outputRange[i-1],narrowedInput.rightEdgeOutput=outputRange[i];break}return internalInterpolate(x,narrowedInput,extrapolationConfig)}export function clamp(value,min,max){return Math.min(Math.max(value,min),max)}