"use strict";function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}import React,{forwardRef,useRef}from"react";import{FlatList}from"react-native";import{AnimatedView}from"./View";import{createAnimatedComponent}from"../../createAnimatedComponent";import{LayoutAnimationConfig}from"./LayoutAnimationConfig";const AnimatedFlatList=createAnimatedComponent(FlatList),createCellRendererComponent=itemLayoutAnimationRef=>props=>React.createElement(AnimatedView,{layout:null==itemLayoutAnimationRef?void 0:itemLayoutAnimationRef.current,onLayout:props.onLayout,style:props.style},props.children),FlatListForwardRefRender=function(props,ref){const{itemLayoutAnimation:itemLayoutAnimation,skipEnteringExitingAnimations:skipEnteringExitingAnimations,...restProps}=props;"scrollEventThrottle"in restProps||(restProps.scrollEventThrottle=1);const itemLayoutAnimationRef=useRef(itemLayoutAnimation);itemLayoutAnimationRef.current=itemLayoutAnimation;const CellRendererComponent=React.useMemo((()=>createCellRendererComponent(itemLayoutAnimationRef)),[itemLayoutAnimationRef]),animatedFlatList=React.createElement(AnimatedFlatList,_extends({ref:ref},restProps,{CellRendererComponent:CellRendererComponent}));return void 0===skipEnteringExitingAnimations?animatedFlatList:React.createElement(LayoutAnimationConfig,{skipEntering:!0,skipExiting:!0},animatedFlatList)};export const ReanimatedFlatList=forwardRef(FlatListForwardRefRender);