"use strict";import{useHandler}from"./useHandler";import{useEvent}from"./useEvent";export function useAnimatedScrollHandler(handlers,dependencies){const scrollHandlers="function"==typeof handlers?{onScroll:handlers}:handlers,{context:context,doDependenciesDiffer:doDependenciesDiffer}=useHandler(scrollHandlers,dependencies),subscribeForEvents=["onScroll"];return void 0!==scrollHandlers.onBeginDrag&&subscribeForEvents.push("onScrollBeginDrag"),void 0!==scrollHandlers.onEndDrag&&subscribeForEvents.push("onScrollEndDrag"),void 0!==scrollHandlers.onMomentumBegin&&subscribeForEvents.push("onMomentumScrollBegin"),void 0!==scrollHandlers.onMomentumEnd&&subscribeForEvents.push("onMomentumScrollEnd"),useEvent((event=>{const{onScroll:onScroll,onBeginDrag:onBeginDrag,onEndDrag:onEndDrag,onMomentumBegin:onMomentumBegin,onMomentumEnd:onMomentumEnd}=scrollHandlers;onScroll&&event.eventName.endsWith("onScroll")?onScroll(event,context):onBeginDrag&&event.eventName.endsWith("onScrollBeginDrag")?onBeginDrag(event,context):onEndDrag&&event.eventName.endsWith("onScrollEndDrag")?onEndDrag(event,context):onMomentumBegin&&event.eventName.endsWith("onMomentumScrollBegin")?onMomentumBegin(event,context):onMomentumEnd&&event.eventName.endsWith("onMomentumScrollEnd")&&onMomentumEnd(event,context)}),subscribeForEvents,doDependenciesDiffer)}