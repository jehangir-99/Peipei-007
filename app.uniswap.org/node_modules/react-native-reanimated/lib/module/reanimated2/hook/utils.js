"use strict";export function buildWorkletsHash(worklets){return Object.values(worklets).reduce(((acc,worklet)=>acc+worklet.__workletHash.toString()),"")}export function buildDependencies(dependencies,handlers){const handlersList=Object.values(handlers).filter((handler=>void 0!==handler));return dependencies?dependencies.push(buildWorkletsHash(handlersList)):dependencies=handlersList.map((handler=>({workletHash:handler.__workletHash,closure:handler.__closure}))),dependencies}export function areDependenciesEqual(nextDependencies,prevDependencies){const objectIs="function"==typeof Object.is?Object.is:function(x,y){return x===y&&(0!==x||1/x==1/y)||Number.isNaN(x)&&Number.isNaN(y)};return function(nextDeps,prevDeps){if(!nextDeps||!prevDeps||prevDeps.length!==nextDeps.length)return!1;for(let i=0;i<prevDeps.length;++i)if(!objectIs(nextDeps[i],prevDeps[i]))return!1;return!0}(nextDependencies,prevDependencies)}export function isAnimated(prop){return Array.isArray(prop)?prop.some(isAnimated):"object"==typeof prop&&null!==prop&&(void 0!==prop.onFrame||Object.values(prop).some(isAnimated))}export function shallowEqual(a,b){const aKeys=Object.keys(a),bKeys=Object.keys(b);if(aKeys.length!==bKeys.length)return!1;for(let i=0;i<aKeys.length;i++)if(a[aKeys[i]]!==b[aKeys[i]])return!1;return!0}export function validateAnimatedStyles(styles){if("object"!=typeof styles)throw new Error(`[Reanimated] \`useAnimatedStyle\` has to return an object, found ${typeof styles} instead.`);if(Array.isArray(styles))throw new Error("[Reanimated] `useAnimatedStyle` has to return an object and cannot return static styles combined with dynamic ones. Please do merging where a component receives props.")}