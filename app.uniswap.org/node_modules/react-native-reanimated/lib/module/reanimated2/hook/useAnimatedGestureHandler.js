"use strict";import{useHandler}from"./useHandler";import{useEvent}from"./useEvent";const EVENT_TYPE={UNDETERMINED:0,FAILED:1,BEGAN:2,CANCELLED:3,ACTIVE:4,END:5};export function useAnimatedGestureHandler(handlers,dependencies){const{context:context,doDependenciesDiffer:doDependenciesDiffer,useWeb:useWeb}=useHandler(handlers,dependencies),handler=e=>{const event=useWeb?e.nativeEvent:e;event.state===EVENT_TYPE.BEGAN&&handlers.onStart&&handlers.onStart(event,context),event.state===EVENT_TYPE.ACTIVE&&handlers.onActive&&handlers.onActive(event,context),event.oldState===EVENT_TYPE.ACTIVE&&event.state===EVENT_TYPE.END&&handlers.onEnd&&handlers.onEnd(event,context),event.oldState===EVENT_TYPE.BEGAN&&event.state===EVENT_TYPE.FAILED&&handlers.onFail&&handlers.onFail(event,context),event.oldState===EVENT_TYPE.ACTIVE&&event.state===EVENT_TYPE.CANCELLED&&handlers.onCancel&&handlers.onCancel(event,context),event.oldState!==EVENT_TYPE.BEGAN&&event.oldState!==EVENT_TYPE.ACTIVE||event.state===EVENT_TYPE.BEGAN||event.state===EVENT_TYPE.ACTIVE||!handlers.onFinish||handlers.onFinish(event,context,event.state===EVENT_TYPE.CANCELLED||event.state===EVENT_TYPE.FAILED)};return useWeb?handler:useEvent(handler,["onGestureHandlerStateChange","onGestureHandlerEvent"],doDependenciesDiffer)}