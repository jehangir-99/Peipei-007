"use strict";import{useRef}from"react";import{useSharedValue}from"./useSharedValue";import{getShadowNodeWrapperFromRef}from"../fabricUtils";import{makeShareableCloneRecursive}from"../shareables";import{shareableMappingCache}from"../shareableMappingCache";import{Platform,findNodeHandle}from"react-native";import{isFabric,isWeb}from"../PlatformChecker";const IS_FABRIC=isFabric(),IS_WEB=isWeb();function getComponentOrScrollable(component){return IS_FABRIC&&component.getNativeScrollRef?component.getNativeScrollRef():!IS_FABRIC&&component.getScrollableNode?component.getScrollableNode():component}const getTagValueFunction=IS_FABRIC?getShadowNodeWrapperFromRef:findNodeHandle;export function useAnimatedRef(){const tag=useSharedValue(-1),viewName=useSharedValue(null),ref=useRef();if(!ref.current){const fun=component=>{var _viewConfig;component&&(tag.value=IS_WEB?getComponentOrScrollable(component):getTagValueFunction(getComponentOrScrollable(component)),fun.current=component,"ios"!==Platform.OS||IS_FABRIC||(viewName.value=(null==component||null===(_viewConfig=component.viewConfig)||void 0===_viewConfig?void 0:_viewConfig.uiViewClassName)||"RCTView"));return tag.value};fun.current=null;const animatedRefShareableHandle=makeShareableCloneRecursive({__init:()=>{const f=()=>tag.value;return f.viewName=viewName,f}});shareableMappingCache.set(fun,animatedRefShareableHandle),ref.current=fun}return ref.current}