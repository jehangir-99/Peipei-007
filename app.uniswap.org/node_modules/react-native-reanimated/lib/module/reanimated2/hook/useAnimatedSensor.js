"use strict";import{useEffect,useMemo,useRef}from"react";import{initializeSensor,registerSensor,unregisterSensor}from"../core";import{SensorType,IOSReferenceFrame,InterfaceOrientation}from"../commonTypes";import{callMicrotasks}from"../threads";function eulerToQuaternion(pitch,roll,yaw){const c1=Math.cos(pitch/2),s1=Math.sin(pitch/2),c2=Math.cos(roll/2),s2=Math.sin(roll/2),c3=Math.cos(yaw/2),s3=Math.sin(yaw/2);return[s1*c2*c3-c1*s2*s3,c1*s2*c3+s1*c2*s3,c1*c2*s3+s1*s2*c3,c1*c2*c3-s1*s2*s3]}function adjustRotationToInterfaceOrientation(data){const{interfaceOrientation:interfaceOrientation,pitch:pitch,roll:roll,yaw:yaw}=data;interfaceOrientation===InterfaceOrientation.ROTATION_90?(data.pitch=roll,data.roll=-pitch,data.yaw=yaw-Math.PI/2):interfaceOrientation===InterfaceOrientation.ROTATION_270?(data.pitch=-roll,data.roll=pitch,data.yaw=yaw+Math.PI/2):interfaceOrientation===InterfaceOrientation.ROTATION_180&&(data.pitch*=-1,data.roll*=-1,data.yaw*=-1);const q=eulerToQuaternion(data.pitch,data.roll,data.yaw);return data.qx=q[0],data.qy=q[1],data.qz=q[2],data.qw=q[3],data}function adjustVectorToInterfaceOrientation(data){const{interfaceOrientation:interfaceOrientation,x:x,y:y}=data;return interfaceOrientation===InterfaceOrientation.ROTATION_90?(data.x=-y,data.y=x):interfaceOrientation===InterfaceOrientation.ROTATION_270?(data.x=y,data.y=-x):interfaceOrientation===InterfaceOrientation.ROTATION_180&&(data.x*=-1,data.y*=-1),data}export function useAnimatedSensor(sensorType,userConfig){var _userConfigRef$curren,_userConfigRef$curren2,_userConfigRef$curren3;const userConfigRef=useRef(userConfig);((null===(_userConfigRef$curren=userConfigRef.current)||void 0===_userConfigRef$curren?void 0:_userConfigRef$curren.adjustToInterfaceOrientation)!==(null==userConfig?void 0:userConfig.adjustToInterfaceOrientation)||(null===(_userConfigRef$curren2=userConfigRef.current)||void 0===_userConfigRef$curren2?void 0:_userConfigRef$curren2.interval)!==(null==userConfig?void 0:userConfig.interval)||(null===(_userConfigRef$curren3=userConfigRef.current)||void 0===_userConfigRef$curren3?void 0:_userConfigRef$curren3.iosReferenceFrame)!==(null==userConfig?void 0:userConfig.iosReferenceFrame))&&(userConfigRef.current={...userConfig});const config=useMemo((()=>({interval:"auto",adjustToInterfaceOrientation:!0,iosReferenceFrame:IOSReferenceFrame.Auto,...userConfigRef.current})),[userConfigRef.current]),ref=useRef({sensor:initializeSensor(sensorType,config),unregister:()=>{},isAvailable:!1,config:config});return useEffect((()=>{ref.current={sensor:initializeSensor(sensorType,config),unregister:()=>{},isAvailable:!1,config:config};const sensorData=ref.current.sensor,adjustToInterfaceOrientation=ref.current.config.adjustToInterfaceOrientation,id=registerSensor(sensorType,config,(data=>{adjustToInterfaceOrientation&&(data=sensorType===SensorType.ROTATION?adjustRotationToInterfaceOrientation(data):adjustVectorToInterfaceOrientation(data)),sensorData.value=data,callMicrotasks()}));return-1!==id?(ref.current.unregister=()=>unregisterSensor(id),ref.current.isAvailable=!0):(ref.current.unregister=()=>{},ref.current.isAvailable=!1),()=>{ref.current.unregister()}}),[sensorType,config]),ref.current}