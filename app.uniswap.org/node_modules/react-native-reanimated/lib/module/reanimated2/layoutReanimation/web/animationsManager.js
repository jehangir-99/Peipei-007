"use strict";import{Animations}from"./config";import{LayoutAnimationType}from"../animationBuilder/commonTypes";import{createAnimationWithExistingTransform}from"./createAnimation";import{extractTransformFromStyle,getProcessedConfig,handleExitingAnimation,handleLayoutTransition,setElementAnimation}from"./componentUtils";import{areDOMRectsEqual}from"./domUtils";import{makeElementVisible}from"./componentStyle";function chooseConfig(animationType,props){return animationType===LayoutAnimationType.ENTERING?props.entering:animationType===LayoutAnimationType.EXITING?props.exiting:animationType===LayoutAnimationType.LAYOUT?props.layout:null}function checkUndefinedAnimationFail(initialAnimationName,isLayoutTransition){return!(initialAnimationName in Animations)&&!isLayoutTransition&&(console.warn("[Reanimated] Couldn't load entering/exiting animation. Current version supports only predefined animations with modifiers: duration, delay, easing, randomizeDelay, wtihCallback, reducedMotion."),!0)}function chooseAction(animationType,animationConfig,element,transitionData,transform){switch(animationType){case LayoutAnimationType.ENTERING:setElementAnimation(element,animationConfig,transform);break;case LayoutAnimationType.LAYOUT:transitionData.reversed=animationConfig.reversed,handleLayoutTransition(element,animationConfig,transitionData,transform);break;case LayoutAnimationType.EXITING:handleExitingAnimation(element,animationConfig)}}function tryGetAnimationConfigWithTransform(props,animationType){const config=chooseConfig(animationType,props);if(!config)return null;const isLayoutTransition=animationType===LayoutAnimationType.LAYOUT,initialAnimationName="function"==typeof config?config.presetName:config.constructor.presetName;if(checkUndefinedAnimationFail(initialAnimationName,isLayoutTransition))return null;const transform=extractTransformFromStyle(props.style),animationName=transform&&animationType!==LayoutAnimationType.EXITING?createAnimationWithExistingTransform(initialAnimationName,transform):initialAnimationName;return{animationConfig:getProcessedConfig(animationName,animationType,config,initialAnimationName),transform:transform}}export function startWebLayoutAnimation(props,element,animationType,transitionData){const maybeAnimationConfigWithTransform=tryGetAnimationConfigWithTransform(props,animationType);if(maybeAnimationConfigWithTransform){const{animationConfig:animationConfig,transform:transform}=maybeAnimationConfigWithTransform;chooseAction(animationType,animationConfig,element,transitionData,transform)}else makeElementVisible(element,0)}export function tryActivateLayoutTransition(props,element,snapshot){if(!props.layout)return;const rect=element.getBoundingClientRect();if(areDOMRectsEqual(rect,snapshot))return;const transitionData={translateX:snapshot.x-rect.x,translateY:snapshot.y-rect.y,scaleX:snapshot.width/rect.width,scaleY:snapshot.height/rect.height,reversed:!1};startWebLayoutAnimation(props,element,LayoutAnimationType.LAYOUT,transitionData)}