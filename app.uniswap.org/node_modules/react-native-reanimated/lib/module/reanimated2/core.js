"use strict";import NativeReanimatedModule from"./NativeReanimated";import{isWeb,shouldBeUseWeb,isFabric}from"./PlatformChecker";import{makeShareableCloneRecursive}from"./shareables";import{initializeUIRuntime}from"./initializers";import{SensorContainer}from"./SensorContainer";export{startMapper,stopMapper}from"./mappers";export{runOnJS,runOnUI,executeOnUIRuntimeSync}from"./threads";export{createWorkletRuntime,runOnRuntime}from"./runtimes";export{makeShareable,makeShareableCloneRecursive}from"./shareables";export{makeMutable}from"./mutables";const IS_FABRIC=isFabric(),SHOULD_BE_USE_WEB=shouldBeUseWeb();export const isReanimated3=()=>!0;export const isConfigured=isReanimated3;SHOULD_BE_USE_WEB&&(global._WORKLET=!1,global._log=console.log,global._getAnimationTimestamp=()=>performance.now());export function getViewProp(viewTag,propName){if(IS_FABRIC)throw new Error("[Reanimated] `getViewProp` is not supported on Fabric yet.");return new Promise(((resolve,reject)=>NativeReanimatedModule.getViewProp(viewTag,propName,(result=>{"string"==typeof result&&"error:"===result.substr(0,6)?reject(result):resolve(result)}))))}function getSensorContainer(){return global.__sensorContainer||(global.__sensorContainer=new SensorContainer),global.__sensorContainer}export function registerEventHandler(eventHandler,eventName){let emitterReactTag=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1;return NativeReanimatedModule.registerEventHandler(makeShareableCloneRecursive((function(eventTimestamp,event){global.__frameTimestamp=eventTimestamp,eventHandler(event),global.__flushAnimationFrame(eventTimestamp),global.__frameTimestamp=void 0})),eventName,emitterReactTag)}export function unregisterEventHandler(id){return NativeReanimatedModule.unregisterEventHandler(id)}export function subscribeForKeyboardEvents(eventHandler,options){return NativeReanimatedModule.subscribeForKeyboardEvents(makeShareableCloneRecursive((function(state,height){const now=global._getAnimationTimestamp();global.__frameTimestamp=now,eventHandler(state,height),global.__flushAnimationFrame(now),global.__frameTimestamp=void 0})),options.isStatusBarTranslucentAndroid??!1)}export function unsubscribeFromKeyboardEvents(listenerId){return NativeReanimatedModule.unsubscribeFromKeyboardEvents(listenerId)}export function registerSensor(sensorType,config,eventHandler){return getSensorContainer().registerSensor(sensorType,config,makeShareableCloneRecursive(eventHandler))}export function initializeSensor(sensorType,config){return getSensorContainer().initializeSensor(sensorType,config)}export function unregisterSensor(sensorId){return getSensorContainer().unregisterSensor(sensorId)}isWeb()||initializeUIRuntime();let featuresConfig={enableLayoutAnimations:!1,setByUser:!1};export function enableLayoutAnimations(flag){!(arguments.length>1&&void 0!==arguments[1])||arguments[1]?(featuresConfig={enableLayoutAnimations:flag,setByUser:!0},NativeReanimatedModule.enableLayoutAnimations(flag)):featuresConfig.setByUser||featuresConfig.enableLayoutAnimations===flag||(featuresConfig.enableLayoutAnimations=flag,NativeReanimatedModule.enableLayoutAnimations(flag))}export function configureLayoutAnimations(viewTag,type,config){let sharedTransitionTag=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";NativeReanimatedModule.configureLayoutAnimation(viewTag,type,sharedTransitionTag,makeShareableCloneRecursive(config))}export function configureLayoutAnimationBatch(layoutAnimationsBatch){NativeReanimatedModule.configureLayoutAnimationBatch(layoutAnimationsBatch)}export function setShouldAnimateExitingForTag(viewTag,shouldAnimate){NativeReanimatedModule.setShouldAnimateExitingForTag(viewTag,shouldAnimate)}export function jsiConfigureProps(uiProps,nativeProps){SHOULD_BE_USE_WEB||NativeReanimatedModule.configureProps(uiProps,nativeProps)}