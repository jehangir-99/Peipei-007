"use strict";export function checkIfConfigIsValid(config){var _config$clamp,_config$clamp2;let errorMessage="";return["stiffness","damping","dampingRatio","restDisplacementThreshold","restSpeedThreshold","mass"].forEach((prop=>{const value=config[prop];value<=0&&(errorMessage+=`, ${prop} must be grater than zero but got ${value}`)})),config.duration<0&&(errorMessage+=`, duration can't be negative, got ${config.duration}`),null!==(_config$clamp=config.clamp)&&void 0!==_config$clamp&&_config$clamp.min&&null!==(_config$clamp2=config.clamp)&&void 0!==_config$clamp2&&_config$clamp2.max&&config.clamp.min>config.clamp.max&&(errorMessage+=`, clamp.min should be lower than clamp.max, got clamp: {min: ${config.clamp.min}, max: ${config.clamp.max}} `),""!==errorMessage&&console.warn("[Reanimated] Invalid spring config"+errorMessage),""===errorMessage}export function bisectRoot(_ref){let{min:min,max:max,func:func,maxIterations:maxIterations=20}=_ref;let idx=maxIterations,current=(max+min)/2;for(;Math.abs(func(current))>5e-5&&idx>0;)idx-=1,func(current)<0?min=current:max=current,current=(min+max)/2;return current}export function initialCalculations(){let mass=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,config=arguments.length>1?arguments[1]:void 0;if(config.skipAnimation)return{zeta:0,omega0:0,omega1:0};if(config.useDuration){const{stiffness:k,dampingRatio:zeta}=config,omega0=Math.sqrt(k/mass);return{zeta:zeta,omega0:omega0,omega1:omega0*Math.sqrt(1-zeta**2)}}{const{damping:c,mass:m,stiffness:k}=config,zeta=c/(2*Math.sqrt(k*m)),omega0=Math.sqrt(k/m);return{zeta:zeta,omega0:omega0,omega1:omega0*Math.sqrt(1-zeta**2)}}}export function scaleZetaToMatchClamps(animation,clamp){const{zeta:zeta,toValue:toValue,startValue:startValue}=animation,toValueNum=Number(toValue);if(toValueNum===startValue)return zeta;const[firstBound,secondBound]=toValueNum-startValue>0?[clamp.min,clamp.max]:[clamp.max,clamp.min],relativeExtremum1=void 0!==secondBound?Math.abs((secondBound-toValueNum)/(toValueNum-startValue)):void 0,relativeExtremum2=void 0!==firstBound?Math.abs((firstBound-toValueNum)/(toValueNum-startValue)):void 0,zetaSatisfyingClamp=[void 0!==relativeExtremum1?Math.abs(Math.log(relativeExtremum1)/Math.PI):void 0,void 0!==relativeExtremum2?Math.abs(Math.log(relativeExtremum2)/(2*Math.PI)):void 0].filter((x=>void 0!==x));return Math.max(...zetaSatisfyingClamp,zeta)}export function calculateNewMassToMatchDuration(x0,config,v0){if(config.skipAnimation)return 0;const{stiffness:k,dampingRatio:zeta,restSpeedThreshold:threshold,duration:duration}=config;return bisectRoot({min:0,max:100,func:mass=>{const amplitude=(mass*v0*v0+k*x0*x0)/(Math.exp(1-.5*zeta)*k);return-2*mass/(2*zeta*Math.sqrt(k*mass))*1e3*Math.log(.01*threshold/amplitude)-duration}})}export function criticallyDampedSpringCalculations(animation,precalculatedValues){const{toValue:toValue}=animation,{v0:v0,x0:x0,omega0:omega0,t:t}=precalculatedValues,criticallyDampedEnvelope=Math.exp(-omega0*t);return{position:toValue-criticallyDampedEnvelope*(x0+(v0+omega0*x0)*t),velocity:criticallyDampedEnvelope*(v0*(t*omega0-1)+t*x0*omega0*omega0)}}export function underDampedSpringCalculations(animation,precalculatedValues){const{toValue:toValue,current:current,velocity:velocity}=animation,{zeta:zeta,t:t,omega0:omega0,omega1:omega1}=precalculatedValues,v0=-velocity,x0=toValue-current,sin1=Math.sin(omega1*t),cos1=Math.cos(omega1*t),underDampedEnvelope=Math.exp(-zeta*omega0*t),underDampedFrag1=underDampedEnvelope*(sin1*((v0+zeta*omega0*x0)/omega1)+x0*cos1);return{position:toValue-underDampedFrag1,velocity:zeta*omega0*underDampedFrag1-underDampedEnvelope*(cos1*(v0+zeta*omega0*x0)-omega1*x0*sin1)}}export function isAnimationTerminatingCalculation(animation,config){const{toValue:toValue,velocity:velocity,startValue:startValue,current:current}=animation;return{isOvershooting:!!config.overshootClamping&&(current>toValue&&startValue<toValue||current<toValue&&startValue>toValue),isVelocity:Math.abs(velocity)<config.restSpeedThreshold,isDisplacement:Math.abs(toValue-current)<config.restDisplacementThreshold}}