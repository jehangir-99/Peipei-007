"use strict";import{defineAnimation,getReduceMotionForAnimation}from"../util";import{rubberBandDecay}from"./rubberBandDecay";import{isValidRubberBandConfig}from"./utils";import{rigidDecay}from"./rigidDecay";function validateConfig(config){if(config.clamp){if(!Array.isArray(config.clamp))throw new Error(`[Reanimated] \`config.clamp\` must be an array but is ${typeof config.clamp}.`);if(2!==config.clamp.length)throw new Error(`[Reanimated] \`clamp array\` must contain 2 items but is given ${config.clamp.length}.`)}if(config.velocityFactor<=0)throw new Error(`[Reanimated] \`config.velocityFactor\` must be greather then 0 but is ${config.velocityFactor}.`);if(config.rubberBandEffect&&!config.clamp)throw new Error("[Reanimated] You need to set `clamp` property when using `rubberBandEffect`.")}export const withDecay=function(userConfig,callback){return defineAnimation(0,(()=>{const config={deceleration:.998,velocityFactor:1,velocity:0,rubberBandFactor:.6};userConfig&&Object.keys(userConfig).forEach((key=>config[key]=userConfig[key]));return{onFrame:isValidRubberBandConfig(config)?(animation,now)=>rubberBandDecay(animation,now,config):(animation,now)=>rigidDecay(animation,now,config),onStart:function(animation,value,now){animation.current=value,animation.lastTimestamp=now,animation.startTimestamp=now,animation.initialVelocity=config.velocity,validateConfig(config),animation.reduceMotion&&config.clamp&&(value<config.clamp[0]?animation.current=config.clamp[0]:value>config.clamp[1]&&(animation.current=config.clamp[1]))},callback:callback,velocity:config.velocity??0,initialVelocity:0,current:0,lastTimestamp:0,startTimestamp:0,reduceMotion:getReduceMotionForAnimation(config.reduceMotion)}}))};