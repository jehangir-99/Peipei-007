"use strict";import{defineAnimation,getReduceMotionForAnimation}from"./util";export function withSequence(_reduceMotionOrFirstAnimation){for(var _len=arguments.length,_animations=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)_animations[_key-1]=arguments[_key];let reduceMotion;return _reduceMotionOrFirstAnimation&&("string"==typeof _reduceMotionOrFirstAnimation?reduceMotion=_reduceMotionOrFirstAnimation:_animations.unshift(_reduceMotionOrFirstAnimation)),0===_animations.length?(console.warn("[Reanimated] No animation was provided for the sequence"),defineAnimation(0,(()=>({onStart:(animation,value)=>animation.current=value,onFrame:()=>!0,current:0,animationIndex:0,reduceMotion:getReduceMotionForAnimation(reduceMotion)})))):defineAnimation(_animations[0],(()=>{const animations=_animations.map((a=>{const result="function"==typeof a?a():a;return result.finished=!1,result}));function findNextNonReducedMotionAnimationIndex(index){for(;index<animations.length-1&&animations[index].reduceMotion;)index++;return index}return{isHigherOrder:!0,onFrame:function(animation,now){const currentAnim=animations[animation.animationIndex],finished=currentAnim.onFrame(currentAnim,now);if(animation.current=currentAnim.current,finished){if(currentAnim.callback&&currentAnim.callback(!0),currentAnim.finished=!0,animation.animationIndex=findNextNonReducedMotionAnimationIndex(animation.animationIndex+1),animation.animationIndex<animations.length){const nextAnim=animations[animation.animationIndex];return nextAnim.onStart(nextAnim,currentAnim.current,now,currentAnim),!1}return!0}return!1},onStart:function(animation,value,now,previousAnimation){animations.forEach((anim=>{void 0===anim.reduceMotion&&(anim.reduceMotion=animation.reduceMotion)})),animation.animationIndex=findNextNonReducedMotionAnimationIndex(0),void 0===previousAnimation&&(previousAnimation=animations[animations.length-1]);const currentAnimation=animations[animation.animationIndex];currentAnimation.onStart(currentAnimation,value,now,previousAnimation)},animationIndex:0,current:animations[0].current,callback:finished=>{finished||animations.forEach((animation=>{"function"!=typeof animation.callback||animation.finished||animation.callback(finished)}))},reduceMotion:getReduceMotionForAnimation(reduceMotion)}}))}