"use strict";function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(arg){var key=_toPrimitive(arg,"string");return"symbol"==typeof key?key:String(key)}function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}import{runOnUI}from"../core";import{prepareUIRegistry}from"./FrameCallbackRegistryUI";export default class FrameCallbackRegistryJS{constructor(){_defineProperty(this,"nextCallbackId",0),prepareUIRegistry()}registerFrameCallback(callback){if(!callback)return-1;const callbackId=this.nextCallbackId;return this.nextCallbackId++,runOnUI((()=>{global._frameCallbackRegistry.registerFrameCallback(callback,callbackId)}))(),callbackId}unregisterFrameCallback(callbackId){runOnUI((()=>{global._frameCallbackRegistry.unregisterFrameCallback(callbackId)}))()}manageStateFrameCallback(callbackId,state){runOnUI((()=>{global._frameCallbackRegistry.manageStateFrameCallback(callbackId,state)}))()}}