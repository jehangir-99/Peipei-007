"use strict";import{runOnUIImmediately}from"../threads";export const prepareUIRegistry=runOnUIImmediately((()=>{const frameCallbackRegistry={frameCallbackRegistry:new Map,activeFrameCallbacks:new Set,previousFrameTimestamp:null,nextCallId:0,runCallbacks(callId){const loop=timestamp=>{if(callId!==this.nextCallId)return;null===this.previousFrameTimestamp&&(this.previousFrameTimestamp=timestamp);const delta=timestamp-this.previousFrameTimestamp;this.activeFrameCallbacks.forEach((callbackId=>{const callbackDetails=this.frameCallbackRegistry.get(callbackId),{startTime:startTime}=callbackDetails;null===startTime?(callbackDetails.startTime=timestamp,callbackDetails.callback({timestamp:timestamp,timeSincePreviousFrame:null,timeSinceFirstFrame:0})):callbackDetails.callback({timestamp:timestamp,timeSincePreviousFrame:delta,timeSinceFirstFrame:timestamp-startTime})})),this.activeFrameCallbacks.size>0?(this.previousFrameTimestamp=timestamp,requestAnimationFrame(loop)):this.previousFrameTimestamp=null};1===this.activeFrameCallbacks.size&&callId===this.nextCallId&&requestAnimationFrame(loop)},registerFrameCallback(callback,callbackId){this.frameCallbackRegistry.set(callbackId,{callback:callback,startTime:null})},unregisterFrameCallback(callbackId){this.manageStateFrameCallback(callbackId,!1),this.frameCallbackRegistry.delete(callbackId)},manageStateFrameCallback(callbackId,state){if(-1!==callbackId)if(state)this.activeFrameCallbacks.add(callbackId),this.runCallbacks(this.nextCallId);else{this.frameCallbackRegistry.get(callbackId).startTime=null,this.activeFrameCallbacks.delete(callbackId),0===this.activeFrameCallbacks.size&&(this.nextCallId+=1)}}};global._frameCallbackRegistry=frameCallbackRegistry}));