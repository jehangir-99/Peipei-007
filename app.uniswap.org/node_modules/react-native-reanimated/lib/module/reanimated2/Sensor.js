"use strict";function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(arg){var key=_toPrimitive(arg,"string");return"symbol"==typeof key?key:String(key)}function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}import NativeReanimatedModule from"./NativeReanimated";import{SensorType}from"./commonTypes";import{makeMutable}from"./mutables";function initSensorData(sensorType){return sensorType===SensorType.ROTATION?makeMutable({qw:0,qx:0,qy:0,qz:0,yaw:0,pitch:0,roll:0,interfaceOrientation:0}):makeMutable({x:0,y:0,z:0,interfaceOrientation:0})}export default class Sensor{constructor(sensorType,config){_defineProperty(this,"listenersNumber",0),_defineProperty(this,"sensorId",null),_defineProperty(this,"sensorType",void 0),_defineProperty(this,"data",void 0),_defineProperty(this,"config",void 0),this.sensorType=sensorType,this.config=config,this.data=initSensorData(sensorType)}register(eventHandler){const config=this.config,sensorType=this.sensorType;return this.sensorId=NativeReanimatedModule.registerSensor(sensorType,"auto"===config.interval?-1:config.interval,config.iosReferenceFrame,eventHandler),-1!==this.sensorId}isRunning(){return-1!==this.sensorId&&null!==this.sensorId}isAvailable(){return-1!==this.sensorId}getSharedValue(){return this.data}unregister(){null!==this.sensorId&&-1!==this.sensorId&&NativeReanimatedModule.unregisterSensor(this.sensorId),this.sensorId=null}}