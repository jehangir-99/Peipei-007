"use strict";const NEWTON_ITERATIONS=4,NEWTON_MIN_SLOPE=.001,SUBDIVISION_PRECISION=1e-7,SUBDIVISION_MAX_ITERATIONS=10,kSplineTableSize=11,kSampleStepSize=.1;function A(aA1,aA2){return 1-3*aA2+3*aA1}function B(aA1,aA2){return 3*aA2-6*aA1}function C(aA1){return 3*aA1}function calcBezier(aT,aA1,aA2){return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT}function getSlope(aT,aA1,aA2){return 3*A(aA1,aA2)*aT*aT+2*B(aA1,aA2)*aT+C(aA1)}function binarySubdivide(aX,aA,aB,mX1,mX2){let currentX,currentT,i=0;do{currentT=aA+(aB-aA)/2,currentX=calcBezier(currentT,mX1,mX2)-aX,currentX>0?aB=currentT:aA=currentT}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT}function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){for(let i=0;i<NEWTON_ITERATIONS;++i){const currentSlope=getSlope(aGuessT,mX1,mX2);if(0===currentSlope)return aGuessT;aGuessT-=(calcBezier(aGuessT,mX1,mX2)-aX)/currentSlope}return aGuessT}export function Bezier(mX1,mY1,mX2,mY2){if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1))throw new Error("[Reanimated] Bezier x values must be in [0, 1] range.");if(mX1===mY1&&mX2===mY2)return function(x){return x};const sampleValues=new Array(11);for(let i=0;i<11;++i)sampleValues[i]=calcBezier(.1*i,mX1,mX2);return function(x){return mX1===mY1&&mX2===mY2?x:0===x?0:1===x?1:calcBezier(function(aX){let intervalStart=0,currentSample=1;for(;10!==currentSample&&sampleValues[currentSample]<=aX;++currentSample)intervalStart+=.1;--currentSample;const guessForT=intervalStart+(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample])*.1,initialSlope=getSlope(guessForT,mX1,mX2);return initialSlope>=.001?newtonRaphsonIterate(aX,guessForT,mX1,mX2):0===initialSlope?guessForT:binarySubdivide(aX,intervalStart,intervalStart+.1,mX1,mX2)}(x),mY1,mY2)}}