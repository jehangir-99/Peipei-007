"use strict";function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(arg){var key=_toPrimitive(arg,"string");return"symbol"==typeof key?key:String(key)}function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}import{NativeEventEmitter,NativeModules,findNodeHandle}from"react-native";import{shouldBeUseWeb}from"../reanimated2/PlatformChecker";import{runOnJS,runOnUIImmediately}from"../reanimated2/threads";const SHOULD_BE_USE_WEB=shouldBeUseWeb();class JSPropsUpdaterPaper{constructor(){_defineProperty(this,"_reanimatedEventEmitter",void 0),this._reanimatedEventEmitter=new NativeEventEmitter(NativeModules.ReanimatedModule)}addOnJSPropsChangeListener(animatedComponent){const viewTag=findNodeHandle(animatedComponent);if(JSPropsUpdaterPaper._tagToComponentMapping.set(viewTag,animatedComponent),1===JSPropsUpdaterPaper._tagToComponentMapping.size){const listener=data=>{const component=JSPropsUpdaterPaper._tagToComponentMapping.get(data.viewTag);null==component||component._updateFromNative(data.props)};this._reanimatedEventEmitter.addListener("onReanimatedPropsChange",listener)}}removeOnJSPropsChangeListener(animatedComponent){const viewTag=findNodeHandle(animatedComponent);JSPropsUpdaterPaper._tagToComponentMapping.delete(viewTag),0===JSPropsUpdaterPaper._tagToComponentMapping.size&&this._reanimatedEventEmitter.removeAllListeners("onReanimatedPropsChange")}}_defineProperty(JSPropsUpdaterPaper,"_tagToComponentMapping",new Map);class JSPropsUpdaterFabric{constructor(){if(!JSPropsUpdaterFabric.isInitialized){const updater=(viewTag,props)=>{const component=JSPropsUpdaterFabric._tagToComponentMapping.get(viewTag);null==component||component._updateFromNative(props)};runOnUIImmediately((()=>{global.updateJSProps=(viewTag,props)=>{runOnJS(updater)(viewTag,props)}}))(),JSPropsUpdaterFabric.isInitialized=!0}}addOnJSPropsChangeListener(animatedComponent){if(!JSPropsUpdaterFabric.isInitialized)return;const viewTag=findNodeHandle(animatedComponent);JSPropsUpdaterFabric._tagToComponentMapping.set(viewTag,animatedComponent)}removeOnJSPropsChangeListener(animatedComponent){if(!JSPropsUpdaterFabric.isInitialized)return;const viewTag=findNodeHandle(animatedComponent);JSPropsUpdaterFabric._tagToComponentMapping.delete(viewTag)}}_defineProperty(JSPropsUpdaterFabric,"_tagToComponentMapping",new Map),_defineProperty(JSPropsUpdaterFabric,"isInitialized",!1);class JSPropsUpdaterWeb{addOnJSPropsChangeListener(_animatedComponent){}removeOnJSPropsChangeListener(_animatedComponent){}}let JSPropsUpdater;JSPropsUpdater=SHOULD_BE_USE_WEB?JSPropsUpdaterWeb:global._IS_FABRIC?JSPropsUpdaterFabric:JSPropsUpdaterPaper;export default JSPropsUpdater;