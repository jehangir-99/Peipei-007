"use strict";function _defineProperty(obj,key,value){return(key=_toPropertyKey(key))in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toPropertyKey(arg){var key=_toPrimitive(arg,"string");return"symbol"==typeof key?key:String(key)}function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}import{isSharedValue}from"../reanimated2";import{isChromeDebugger}from"../reanimated2/PlatformChecker";import WorkletEventHandler from"../reanimated2/WorkletEventHandler";import{initialUpdaterRun}from"../reanimated2/animation";import{hasInlineStyles,getInlineStyle}from"./InlinePropManager";import{flattenArray,has}from"./utils";import{StyleSheet}from"react-native";function dummyListener(){}export class PropsFilter{constructor(){_defineProperty(this,"_initialStyle",{})}filterNonAnimatedProps(component){const inputProps=component.props,props={};for(const key in inputProps){const value=inputProps[key];if("style"===key){const styleProp=inputProps.style,processedStyle=flattenArray(styleProp??[]).map((style=>{var _style$viewsRef;return style&&style.viewDescriptors?(null===(_style$viewsRef=style.viewsRef)||void 0===_style$viewsRef||_style$viewsRef.add(component),component._isFirstRender&&(this._initialStyle={...style.initial.value,...this._initialStyle,...initialUpdaterRun(style.initial.updater)}),this._initialStyle):hasInlineStyles(style)?getInlineStyle(style,component._isFirstRender):style}));props[key]=StyleSheet.flatten(processedStyle)}else if("animatedProps"===key){const animatedProp=inputProps.animatedProps;void 0!==animatedProp.initial&&Object.keys(animatedProp.initial.value).forEach((initialValueKey=>{var _animatedProp$initial,_animatedProp$viewsRe;props[initialValueKey]=null===(_animatedProp$initial=animatedProp.initial)||void 0===_animatedProp$initial?void 0:_animatedProp$initial.value[initialValueKey],null===(_animatedProp$viewsRe=animatedProp.viewsRef)||void 0===_animatedProp$viewsRe||_animatedProp$viewsRe.add(component)}))}else has("workletEventHandler",value)&&value.workletEventHandler instanceof WorkletEventHandler?value.workletEventHandler.eventNames.length>0?value.workletEventHandler.eventNames.forEach((eventName=>{props[eventName]=has("listeners",value.workletEventHandler)?value.workletEventHandler.listeners[eventName]:dummyListener})):props[key]=dummyListener:isSharedValue(value)?component._isFirstRender&&(props[key]=value.value):"onGestureHandlerStateChange"===key&&isChromeDebugger()||(props[key]=value)}return props}}