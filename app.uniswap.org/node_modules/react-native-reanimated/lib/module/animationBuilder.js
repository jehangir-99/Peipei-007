"use strict";const mockTargetValues={targetOriginX:0,targetOriginY:0,targetWidth:0,targetHeight:0,targetGlobalOriginX:0,targetGlobalOriginY:0,targetBorderRadius:0,windowWidth:0,windowHeight:0,currentOriginX:0,currentOriginY:0,currentWidth:0,currentHeight:0,currentGlobalOriginX:0,currentGlobalOriginY:0,currentBorderRadius:0};function getCommonProperties(layoutStyle,componentStyle){let componentStyleFlat=Array.isArray(componentStyle)?componentStyle.flat():[componentStyle];componentStyleFlat=componentStyleFlat.filter(Boolean),componentStyleFlat=componentStyleFlat.map((style=>"initial"in style?style.initial.value:style));const componentStylesKeys=componentStyleFlat.flatMap((style=>Object.keys(style)));return Object.keys(layoutStyle).filter((key=>componentStylesKeys.includes(key)))}function maybeReportOverwrittenProperties(layoutAnimationStyle,style,displayName){const commonProperties=getCommonProperties(layoutAnimationStyle,style);commonProperties.length>0&&console.warn(`[Reanimated] ${1===commonProperties.length?"Property":"Properties"} "${commonProperties.join(", ")}" of ${displayName} may be overwritten by a layout animation. Please wrap your component with an animated view and apply the layout animation on the wrapper.`)}export function maybeBuild(layoutAnimationOrBuilder,style,displayName){if("build"in layoutAnimationOrBuilder&&"function"==typeof layoutAnimationOrBuilder.build){const animationFactory=layoutAnimationOrBuilder.build();if(__DEV__&&style){maybeReportOverwrittenProperties(animationFactory(mockTargetValues).animations,style,displayName)}return animationFactory}return layoutAnimationOrBuilder}