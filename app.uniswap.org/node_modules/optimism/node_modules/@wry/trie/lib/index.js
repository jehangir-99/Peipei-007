const defaultMakeData=()=>Object.create(null),{forEach:forEach,slice:slice}=Array.prototype,{hasOwnProperty:hasOwnProperty}=Object.prototype;export class Trie{constructor(weakness=!0,makeData=defaultMakeData){this.weakness=weakness,this.makeData=makeData}lookup(...array){return this.lookupArray(array)}lookupArray(array){let node=this;return forEach.call(array,(key=>node=node.getChildTrie(key))),hasOwnProperty.call(node,"data")?node.data:node.data=this.makeData(slice.call(array))}peek(...array){return this.peekArray(array)}peekArray(array){let node=this;for(let i=0,len=array.length;node&&i<len;++i){const map=this.weakness&&isObjRef(array[i])?node.weak:node.strong;node=map&&map.get(array[i])}return node&&node.data}getChildTrie(key){const map=this.weakness&&isObjRef(key)?this.weak||(this.weak=new WeakMap):this.strong||(this.strong=new Map);let child=map.get(key);return child||map.set(key,child=new Trie(this.weakness,this.makeData)),child}}function isObjRef(value){switch(typeof value){case"object":if(null===value)break;case"function":return!0}return!1}