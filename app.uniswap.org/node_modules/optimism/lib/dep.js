import{parentEntrySlot}from"./context.js";import{hasOwnProperty,maybeUnsubscribe,arrayFromSet}from"./helpers.js";const EntryMethods={setDirty:!0,dispose:!0,forget:!0};export function dep(options){const depsByKey=new Map,subscribe=options&&options.subscribe;function depend(key){const parent=parentEntrySlot.getValue();if(parent){let dep=depsByKey.get(key);dep||depsByKey.set(key,dep=new Set),parent.dependOn(dep),"function"==typeof subscribe&&(maybeUnsubscribe(dep),dep.unsubscribe=subscribe(key))}}return depend.dirty=function(key,entryMethodName){const dep=depsByKey.get(key);if(dep){const m=entryMethodName&&hasOwnProperty.call(EntryMethods,entryMethodName)?entryMethodName:"setDirty";arrayFromSet(dep).forEach((entry=>entry[m]())),depsByKey.delete(key),maybeUnsubscribe(dep)}},depend}