import{parentEntrySlot}from"./context.js";import{maybeUnsubscribe,arrayFromSet}from"./helpers.js";const emptySetPool=[],POOL_TARGET_SIZE=100;function assert(condition,optionalMessage){if(!condition)throw new Error(optionalMessage||"assertion failure")}function valueIs(a,b){const len=a.length;return len>0&&len===b.length&&a[len-1]===b[len-1]}function valueGet(value){switch(value.length){case 0:throw new Error("unknown value");case 1:return value[0];case 2:throw value[1]}}function valueCopy(value){return value.slice(0)}export class Entry{constructor(fn){this.fn=fn,this.parents=new Set,this.childValues=new Map,this.dirtyChildren=null,this.dirty=!0,this.recomputing=!1,this.value=[],this.deps=null,++Entry.count}peek(){if(1===this.value.length&&!mightBeDirty(this))return rememberParent(this),this.value[0]}recompute(args){return assert(!this.recomputing,"already recomputing"),rememberParent(this),mightBeDirty(this)?reallyRecompute(this,args):valueGet(this.value)}setDirty(){this.dirty||(this.dirty=!0,reportDirty(this),maybeUnsubscribe(this))}dispose(){this.setDirty(),forgetChildren(this),eachParent(this,((parent,child)=>{parent.setDirty(),forgetChild(parent,this)}))}forget(){this.dispose()}dependOn(dep){dep.add(this),this.deps||(this.deps=emptySetPool.pop()||new Set),this.deps.add(dep)}forgetDeps(){this.deps&&(arrayFromSet(this.deps).forEach((dep=>dep.delete(this))),this.deps.clear(),emptySetPool.push(this.deps),this.deps=null)}}function rememberParent(child){const parent=parentEntrySlot.getValue();if(parent)return child.parents.add(parent),parent.childValues.has(child)||parent.childValues.set(child,[]),mightBeDirty(child)?reportDirtyChild(parent,child):reportCleanChild(parent,child),parent}function reallyRecompute(entry,args){return forgetChildren(entry),parentEntrySlot.withValue(entry,recomputeNewValue,[entry,args]),maybeSubscribe(entry,args)&&setClean(entry),valueGet(entry.value)}function recomputeNewValue(entry,args){entry.recomputing=!0;const{normalizeResult:normalizeResult}=entry;let oldValueCopy;normalizeResult&&1===entry.value.length&&(oldValueCopy=valueCopy(entry.value)),entry.value.length=0;try{if(entry.value[0]=entry.fn.apply(null,args),normalizeResult&&oldValueCopy&&!valueIs(oldValueCopy,entry.value))try{entry.value[0]=normalizeResult(entry.value[0],oldValueCopy[0])}catch(_a){}}catch(e){entry.value[1]=e}entry.recomputing=!1}function mightBeDirty(entry){return entry.dirty||!(!entry.dirtyChildren||!entry.dirtyChildren.size)}function setClean(entry){entry.dirty=!1,mightBeDirty(entry)||reportClean(entry)}function reportDirty(child){eachParent(child,reportDirtyChild)}function reportClean(child){eachParent(child,reportCleanChild)}function eachParent(child,callback){const parentCount=child.parents.size;if(parentCount){const parents=arrayFromSet(child.parents);for(let i=0;i<parentCount;++i)callback(parents[i],child)}}function reportDirtyChild(parent,child){assert(parent.childValues.has(child)),assert(mightBeDirty(child));const parentWasClean=!mightBeDirty(parent);if(parent.dirtyChildren){if(parent.dirtyChildren.has(child))return}else parent.dirtyChildren=emptySetPool.pop()||new Set;parent.dirtyChildren.add(child),parentWasClean&&reportDirty(parent)}function reportCleanChild(parent,child){assert(parent.childValues.has(child)),assert(!mightBeDirty(child));const childValue=parent.childValues.get(child);0===childValue.length?parent.childValues.set(child,valueCopy(child.value)):valueIs(childValue,child.value)||parent.setDirty(),removeDirtyChild(parent,child),mightBeDirty(parent)||reportClean(parent)}function removeDirtyChild(parent,child){const dc=parent.dirtyChildren;dc&&(dc.delete(child),0===dc.size&&(emptySetPool.length<POOL_TARGET_SIZE&&emptySetPool.push(dc),parent.dirtyChildren=null))}function forgetChildren(parent){parent.childValues.size>0&&parent.childValues.forEach(((_value,child)=>{forgetChild(parent,child)})),parent.forgetDeps(),assert(null===parent.dirtyChildren)}function forgetChild(parent,child){child.parents.delete(parent),parent.childValues.delete(child),removeDirtyChild(parent,child)}function maybeSubscribe(entry,args){if("function"==typeof entry.subscribe)try{maybeUnsubscribe(entry),entry.unsubscribe=entry.subscribe.apply(null,args)}catch(e){return entry.setDirty(),!1}return!0}Entry.count=0;