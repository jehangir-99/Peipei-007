let currentContext=null;const MISSING_VALUE={};let idCounter=1;const makeSlotClass=()=>class{constructor(){this.id=["slot",idCounter++,Date.now(),Math.random().toString(36).slice(2)].join(":")}hasValue(){for(let context=currentContext;context;context=context.parent)if(this.id in context.slots){const value=context.slots[this.id];if(value===MISSING_VALUE)break;return context!==currentContext&&(currentContext.slots[this.id]=value),!0}return currentContext&&(currentContext.slots[this.id]=MISSING_VALUE),!1}getValue(){if(this.hasValue())return currentContext.slots[this.id]}withValue(value,callback,args,thisArg){const slots={__proto__:null,[this.id]:value},parent=currentContext;currentContext={parent:parent,slots:slots};try{return callback.apply(thisArg,args)}finally{currentContext=parent}}static bind(callback){const context=currentContext;return function(){const saved=currentContext;try{return currentContext=context,callback.apply(this,arguments)}finally{currentContext=saved}}}static noContext(callback,args,thisArg){if(!currentContext)return callback.apply(thisArg,args);{const saved=currentContext;try{return currentContext=null,callback.apply(thisArg,args)}finally{currentContext=saved}}}};function maybe(fn){try{return fn()}catch(ignored){}}const globalKey="@wry/context:Slot",host=maybe((()=>globalThis))||maybe((()=>global))||Object.create(null),globalHost=host;export const Slot=globalHost[globalKey]||Array[globalKey]||function(Slot){try{Object.defineProperty(globalHost,globalKey,{value:Slot,enumerable:!1,writable:!1,configurable:!0})}finally{return Slot}}(makeSlotClass());