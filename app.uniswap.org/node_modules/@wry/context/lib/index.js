import{Slot}from"./slot.js";export{Slot};export const{bind:bind,noContext:noContext}=Slot;export{setTimeoutWithContext as setTimeout};function setTimeoutWithContext(callback,delay){return setTimeout(bind(callback),delay)}export function asyncFromGen(genFn){return function(){const gen=genFn.apply(this,arguments),boundNext=bind(gen.next),boundThrow=bind(gen.throw);return new Promise(((resolve,reject)=>{function invoke(method,argument){try{var result=method.call(gen,argument)}catch(error){return reject(error)}const next=result.done?resolve:invokeNext;isPromiseLike(result.value)?result.value.then(next,result.done?reject:invokeThrow):next(result.value)}const invokeNext=value=>invoke(boundNext,value),invokeThrow=error=>invoke(boundThrow,error);invokeNext()}))}}function isPromiseLike(value){return value&&"function"==typeof value.then}const wrappedFibers=[];export function wrapYieldingFiberMethods(Fiber){if(wrappedFibers.indexOf(Fiber)<0){const wrap=(obj,method)=>{const fn=obj[method];obj[method]=function(){return noContext(fn,arguments,this)}};wrap(Fiber,"yield"),wrap(Fiber.prototype,"run"),wrap(Fiber.prototype,"throwInto"),wrappedFibers.push(Fiber)}return Fiber}