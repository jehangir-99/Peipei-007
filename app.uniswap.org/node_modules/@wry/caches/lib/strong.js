function defaultDispose(){}export class StrongCache{constructor(max=1/0,dispose=defaultDispose){this.max=max,this.dispose=dispose,this.map=new Map,this.newest=null,this.oldest=null}has(key){return this.map.has(key)}get(key){const node=this.getNode(key);return node&&node.value}get size(){return this.map.size}getNode(key){const node=this.map.get(key);if(node&&node!==this.newest){const{older:older,newer:newer}=node;newer&&(newer.older=older),older&&(older.newer=newer),node.older=this.newest,node.older.newer=node,node.newer=null,this.newest=node,node===this.oldest&&(this.oldest=newer)}return node}set(key,value){let node=this.getNode(key);return node?node.value=value:(node={key:key,value:value,newer:null,older:this.newest},this.newest&&(this.newest.newer=node),this.newest=node,this.oldest=this.oldest||node,this.map.set(key,node),node.value)}clean(){for(;this.oldest&&this.map.size>this.max;)this.delete(this.oldest.key)}delete(key){const node=this.map.get(key);return!!node&&(node===this.newest&&(this.newest=node.older),node===this.oldest&&(this.oldest=node.newer),node.newer&&(node.newer.older=node.older),node.older&&(node.older.newer=node.newer),this.map.delete(key),this.dispose(node.value,key),!0)}}