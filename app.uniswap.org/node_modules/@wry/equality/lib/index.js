const{toString:toString,hasOwnProperty:hasOwnProperty}=Object.prototype,fnToStr=Function.prototype.toString,previousComparisons=new Map;export function equal(a,b){try{return check(a,b)}finally{previousComparisons.clear()}}export default equal;function check(a,b){if(a===b)return!0;const aTag=toString.call(a);if(aTag!==toString.call(b))return!1;switch(aTag){case"[object Array]":if(a.length!==b.length)return!1;case"[object Object]":{if(previouslyCompared(a,b))return!0;const aKeys=definedKeys(a),bKeys=definedKeys(b),keyCount=aKeys.length;if(keyCount!==bKeys.length)return!1;for(let k=0;k<keyCount;++k)if(!hasOwnProperty.call(b,aKeys[k]))return!1;for(let k=0;k<keyCount;++k){const key=aKeys[k];if(!check(a[key],b[key]))return!1}return!0}case"[object Error]":return a.name===b.name&&a.message===b.message;case"[object Number]":if(a!=a)return b!=b;case"[object Boolean]":case"[object Date]":return+a==+b;case"[object RegExp]":case"[object String]":return a==`${b}`;case"[object Map]":case"[object Set]":{if(a.size!==b.size)return!1;if(previouslyCompared(a,b))return!0;const aIterator=a.entries(),isMap="[object Map]"===aTag;for(;;){const info=aIterator.next();if(info.done)break;const[aKey,aValue]=info.value;if(!b.has(aKey))return!1;if(isMap&&!check(aValue,b.get(aKey)))return!1}return!0}case"[object Uint16Array]":case"[object Uint8Array]":case"[object Uint32Array]":case"[object Int32Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object ArrayBuffer]":a=new Uint8Array(a),b=new Uint8Array(b);case"[object DataView]":{let len=a.byteLength;if(len===b.byteLength)for(;len--&&a[len]===b[len];);return-1===len}case"[object AsyncFunction]":case"[object GeneratorFunction]":case"[object AsyncGeneratorFunction]":case"[object Function]":{const aCode=fnToStr.call(a);return aCode===fnToStr.call(b)&&!endsWith(aCode,nativeCodeSuffix)}}return!1}function definedKeys(obj){return Object.keys(obj).filter(isDefinedKey,obj)}function isDefinedKey(key){return void 0!==this[key]}const nativeCodeSuffix="{ [native code] }";function endsWith(full,suffix){const fromIndex=full.length-suffix.length;return fromIndex>=0&&full.indexOf(suffix,fromIndex)===fromIndex}function previouslyCompared(a,b){let bSet=previousComparisons.get(a);if(bSet){if(bSet.has(b))return!0}else previousComparisons.set(a,bSet=new Set);return bSet.add(b),!1}