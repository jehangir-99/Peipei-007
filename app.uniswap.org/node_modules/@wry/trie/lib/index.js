const defaultMakeData=()=>Object.create(null),{forEach:forEach,slice:slice}=Array.prototype,{hasOwnProperty:hasOwnProperty}=Object.prototype;export class Trie{constructor(weakness=!0,makeData=defaultMakeData){this.weakness=weakness,this.makeData=makeData}lookup(){return this.lookupArray(arguments)}lookupArray(array){let node=this;return forEach.call(array,(key=>node=node.getChildTrie(key))),hasOwnProperty.call(node,"data")?node.data:node.data=this.makeData(slice.call(array))}peek(){return this.peekArray(arguments)}peekArray(array){let node=this;for(let i=0,len=array.length;node&&i<len;++i){const map=node.mapFor(array[i],!1);node=map&&map.get(array[i])}return node&&node.data}remove(){return this.removeArray(arguments)}removeArray(array){let data;if(array.length){const head=array[0],map=this.mapFor(head,!1),child=map&&map.get(head);child&&(data=child.removeArray(slice.call(array,1)),child.data||child.weak||child.strong&&child.strong.size||map.delete(head))}else data=this.data,delete this.data;return data}getChildTrie(key){const map=this.mapFor(key,!0);let child=map.get(key);return child||map.set(key,child=new Trie(this.weakness,this.makeData)),child}mapFor(key,create){return this.weakness&&isObjRef(key)?this.weak||(create?this.weak=new WeakMap:void 0):this.strong||(create?this.strong=new Map:void 0)}}function isObjRef(value){switch(typeof value){case"object":if(null===value)break;case"function":return!0}return!1}