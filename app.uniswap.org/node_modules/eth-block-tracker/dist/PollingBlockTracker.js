"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.PollingBlockTracker=void 0;const json_rpc_random_id_1=__importDefault(require("json-rpc-random-id")),pify_1=__importDefault(require("pify")),BaseBlockTracker_1=require("./BaseBlockTracker"),logging_utils_1=require("./logging-utils"),log=(0,logging_utils_1.createModuleLogger)(logging_utils_1.projectLogger,"polling-block-tracker"),createRandomId=(0,json_rpc_random_id_1.default)(),sec=1e3;class PollingBlockTracker extends BaseBlockTracker_1.BaseBlockTracker{constructor(opts={}){var _a;if(!opts.provider)throw new Error("PollingBlockTracker - no provider specified.");super(Object.assign(Object.assign({},opts),{blockResetDuration:null!==(_a=opts.blockResetDuration)&&void 0!==_a?_a:opts.pollingInterval})),this._provider=opts.provider,this._pollingInterval=opts.pollingInterval||2e4,this._retryTimeout=opts.retryTimeout||this._pollingInterval/10,this._keepEventLoopActive=void 0===opts.keepEventLoopActive||opts.keepEventLoopActive,this._setSkipCacheFlag=opts.setSkipCacheFlag||!1}async checkForLatestBlock(){return await this._updateLatestBlock(),await this.getLatestBlock()}async _start(){this._synchronize()}async _end(){}async _synchronize(){for(var _a;this._isRunning;)try{await this._updateLatestBlock();const promise=timeout(this._pollingInterval,!this._keepEventLoopActive);this.emit("_waitingForNextIteration"),await promise}catch(err){const newErr=new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\n${null!==(_a=err.stack)&&void 0!==_a?_a:err}`);try{this.emit("error",newErr)}catch(emitErr){console.error(newErr)}const promise=timeout(this._retryTimeout,!this._keepEventLoopActive);this.emit("_waitingForNextIteration"),await promise}}async _updateLatestBlock(){const latestBlock=await this._fetchLatestBlock();this._newPotentialLatest(latestBlock)}async _fetchLatestBlock(){const req={jsonrpc:"2.0",id:createRandomId(),method:"eth_blockNumber",params:[]};this._setSkipCacheFlag&&(req.skipCache=!0),log("Making request",req);const res=await(0,pify_1.default)((cb=>this._provider.sendAsync(req,cb)))();if(log("Got response",res),res.error)throw new Error(`PollingBlockTracker - encountered error fetching block:\n${res.error.message}`);return res.result}}function timeout(duration,unref){return new Promise((resolve=>{const timeoutRef=setTimeout(resolve,duration);timeoutRef.unref&&unref&&timeoutRef.unref()}))}exports.PollingBlockTracker=PollingBlockTracker;