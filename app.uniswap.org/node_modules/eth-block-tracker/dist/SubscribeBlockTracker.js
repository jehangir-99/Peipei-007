"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.SubscribeBlockTracker=void 0;const json_rpc_random_id_1=__importDefault(require("json-rpc-random-id")),BaseBlockTracker_1=require("./BaseBlockTracker"),createRandomId=(0,json_rpc_random_id_1.default)();class SubscribeBlockTracker extends BaseBlockTracker_1.BaseBlockTracker{constructor(opts={}){if(!opts.provider)throw new Error("SubscribeBlockTracker - no provider specified.");super(opts),this._provider=opts.provider,this._subscriptionId=null}async checkForLatestBlock(){return await this.getLatestBlock()}async _start(){if(void 0===this._subscriptionId||null===this._subscriptionId)try{const blockNumber=await this._call("eth_blockNumber");this._subscriptionId=await this._call("eth_subscribe","newHeads"),this._provider.on("data",this._handleSubData.bind(this)),this._newPotentialLatest(blockNumber)}catch(e){this.emit("error",e)}}async _end(){if(null!==this._subscriptionId&&void 0!==this._subscriptionId)try{await this._call("eth_unsubscribe",this._subscriptionId),this._subscriptionId=null}catch(e){this.emit("error",e)}}_call(method,...params){return new Promise(((resolve,reject)=>{this._provider.sendAsync({id:createRandomId(),method:method,params:params,jsonrpc:"2.0"},((err,res)=>{err?reject(err):resolve(res.result)}))}))}_handleSubData(_,response){var _a;"eth_subscription"===response.method&&(null===(_a=response.params)||void 0===_a?void 0:_a.subscription)===this._subscriptionId&&this._newPotentialLatest(response.params.result.number)}}exports.SubscribeBlockTracker=SubscribeBlockTracker;