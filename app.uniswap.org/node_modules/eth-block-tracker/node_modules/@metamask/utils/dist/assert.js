"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.assertExhaustive=exports.assertStruct=exports.assert=exports.AssertionError=void 0;const superstruct_1=require("superstruct");function isErrorWithMessage(error){return"object"==typeof error&&null!==error&&"message"in error}function isConstructable(fn){var _a,_b;return Boolean("string"==typeof(null===(_b=null===(_a=null==fn?void 0:fn.prototype)||void 0===_a?void 0:_a.constructor)||void 0===_b?void 0:_b.name))}function getErrorMessage(error){const message=isErrorWithMessage(error)?error.message:String(error);return message.endsWith(".")?message.slice(0,-1):message}function getError(ErrorWrapper,message){return isConstructable(ErrorWrapper)?new ErrorWrapper({message:message}):ErrorWrapper({message:message})}class AssertionError extends Error{constructor(options){super(options.message),this.code="ERR_ASSERTION"}}function assert(value,message="Assertion failed.",ErrorWrapper=AssertionError){if(!value){if(message instanceof Error)throw message;throw getError(ErrorWrapper,message)}}function assertStruct(value,struct,errorPrefix="Assertion failed",ErrorWrapper=AssertionError){try{(0,superstruct_1.assert)(value,struct)}catch(error){throw getError(ErrorWrapper,`${errorPrefix}: ${getErrorMessage(error)}.`)}}function assertExhaustive(_object){throw new Error("Invalid branch reached. Should be detected during compilation.")}exports.AssertionError=AssertionError,exports.assert=assert,exports.assertStruct=assertStruct,exports.assertExhaustive=assertExhaustive;