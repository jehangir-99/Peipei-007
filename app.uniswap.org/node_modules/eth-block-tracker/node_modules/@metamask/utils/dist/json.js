"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getJsonRpcIdValidator=exports.assertIsJsonRpcError=exports.isJsonRpcError=exports.assertIsJsonRpcFailure=exports.isJsonRpcFailure=exports.assertIsJsonRpcSuccess=exports.isJsonRpcSuccess=exports.assertIsJsonRpcResponse=exports.isJsonRpcResponse=exports.assertIsPendingJsonRpcResponse=exports.isPendingJsonRpcResponse=exports.JsonRpcResponseStruct=exports.JsonRpcFailureStruct=exports.JsonRpcSuccessStruct=exports.PendingJsonRpcResponseStruct=exports.assertIsJsonRpcRequest=exports.isJsonRpcRequest=exports.assertIsJsonRpcNotification=exports.isJsonRpcNotification=exports.JsonRpcNotificationStruct=exports.JsonRpcRequestStruct=exports.JsonRpcParamsStruct=exports.JsonRpcErrorStruct=exports.JsonRpcIdStruct=exports.JsonRpcVersionStruct=exports.jsonrpc2=exports.getJsonSize=exports.isValidJson=exports.JsonStruct=exports.UnsafeJsonStruct=void 0;const superstruct_1=require("superstruct"),assert_1=require("./assert"),finiteNumber=()=>(0,superstruct_1.define)("finite number",(value=>(0,superstruct_1.is)(value,(0,superstruct_1.number)())&&Number.isFinite(value)));function isValidJson(value){return(0,superstruct_1.is)(value,exports.JsonStruct)}function getJsonSize(value){(0,assert_1.assertStruct)(value,exports.JsonStruct,"Invalid JSON value");const json=JSON.stringify(value);return(new TextEncoder).encode(json).byteLength}function isJsonRpcNotification(value){return(0,superstruct_1.is)(value,exports.JsonRpcNotificationStruct)}function assertIsJsonRpcNotification(value,ErrorWrapper){(0,assert_1.assertStruct)(value,exports.JsonRpcNotificationStruct,"Invalid JSON-RPC notification",ErrorWrapper)}function isJsonRpcRequest(value){return(0,superstruct_1.is)(value,exports.JsonRpcRequestStruct)}function assertIsJsonRpcRequest(value,ErrorWrapper){(0,assert_1.assertStruct)(value,exports.JsonRpcRequestStruct,"Invalid JSON-RPC request",ErrorWrapper)}function isPendingJsonRpcResponse(response){return(0,superstruct_1.is)(response,exports.PendingJsonRpcResponseStruct)}function assertIsPendingJsonRpcResponse(response,ErrorWrapper){(0,assert_1.assertStruct)(response,exports.PendingJsonRpcResponseStruct,"Invalid pending JSON-RPC response",ErrorWrapper)}function isJsonRpcResponse(response){return(0,superstruct_1.is)(response,exports.JsonRpcResponseStruct)}function assertIsJsonRpcResponse(value,ErrorWrapper){(0,assert_1.assertStruct)(value,exports.JsonRpcResponseStruct,"Invalid JSON-RPC response",ErrorWrapper)}function isJsonRpcSuccess(value){return(0,superstruct_1.is)(value,exports.JsonRpcSuccessStruct)}function assertIsJsonRpcSuccess(value,ErrorWrapper){(0,assert_1.assertStruct)(value,exports.JsonRpcSuccessStruct,"Invalid JSON-RPC success response",ErrorWrapper)}function isJsonRpcFailure(value){return(0,superstruct_1.is)(value,exports.JsonRpcFailureStruct)}function assertIsJsonRpcFailure(value,ErrorWrapper){(0,assert_1.assertStruct)(value,exports.JsonRpcFailureStruct,"Invalid JSON-RPC failure response",ErrorWrapper)}function isJsonRpcError(value){return(0,superstruct_1.is)(value,exports.JsonRpcErrorStruct)}function assertIsJsonRpcError(value,ErrorWrapper){(0,assert_1.assertStruct)(value,exports.JsonRpcErrorStruct,"Invalid JSON-RPC error",ErrorWrapper)}function getJsonRpcIdValidator(options){const{permitEmptyString:permitEmptyString,permitFractions:permitFractions,permitNull:permitNull}=Object.assign({permitEmptyString:!0,permitFractions:!1,permitNull:!0},options);return id=>Boolean("number"==typeof id&&(permitFractions||Number.isInteger(id))||"string"==typeof id&&(permitEmptyString||id.length>0)||permitNull&&null===id)}exports.UnsafeJsonStruct=(0,superstruct_1.union)([(0,superstruct_1.literal)(null),(0,superstruct_1.boolean)(),finiteNumber(),(0,superstruct_1.string)(),(0,superstruct_1.array)((0,superstruct_1.lazy)((()=>exports.UnsafeJsonStruct))),(0,superstruct_1.record)((0,superstruct_1.string)(),(0,superstruct_1.lazy)((()=>exports.UnsafeJsonStruct)))]),exports.JsonStruct=(0,superstruct_1.define)("Json",((value,context)=>{function checkStruct(innerValue,struct){const errors=[...struct.validator(innerValue,context)];return!(errors.length>0)||errors}try{const unsafeResult=checkStruct(value,exports.UnsafeJsonStruct);return!0!==unsafeResult?unsafeResult:checkStruct(JSON.parse(JSON.stringify(value)),exports.UnsafeJsonStruct)}catch(error){return error instanceof RangeError&&"Circular reference detected"}})),exports.isValidJson=isValidJson,exports.getJsonSize=getJsonSize,exports.jsonrpc2="2.0",exports.JsonRpcVersionStruct=(0,superstruct_1.literal)(exports.jsonrpc2),exports.JsonRpcIdStruct=(0,superstruct_1.nullable)((0,superstruct_1.union)([(0,superstruct_1.number)(),(0,superstruct_1.string)()])),exports.JsonRpcErrorStruct=(0,superstruct_1.object)({code:(0,superstruct_1.integer)(),message:(0,superstruct_1.string)(),data:(0,superstruct_1.optional)(exports.JsonStruct),stack:(0,superstruct_1.optional)((0,superstruct_1.string)())}),exports.JsonRpcParamsStruct=(0,superstruct_1.optional)((0,superstruct_1.union)([(0,superstruct_1.record)((0,superstruct_1.string)(),exports.JsonStruct),(0,superstruct_1.array)(exports.JsonStruct)])),exports.JsonRpcRequestStruct=(0,superstruct_1.object)({id:exports.JsonRpcIdStruct,jsonrpc:exports.JsonRpcVersionStruct,method:(0,superstruct_1.string)(),params:exports.JsonRpcParamsStruct}),exports.JsonRpcNotificationStruct=(0,superstruct_1.omit)(exports.JsonRpcRequestStruct,["id"]),exports.isJsonRpcNotification=isJsonRpcNotification,exports.assertIsJsonRpcNotification=assertIsJsonRpcNotification,exports.isJsonRpcRequest=isJsonRpcRequest,exports.assertIsJsonRpcRequest=assertIsJsonRpcRequest,exports.PendingJsonRpcResponseStruct=(0,superstruct_1.object)({id:exports.JsonRpcIdStruct,jsonrpc:exports.JsonRpcVersionStruct,result:(0,superstruct_1.optional)((0,superstruct_1.unknown)()),error:(0,superstruct_1.optional)(exports.JsonRpcErrorStruct)}),exports.JsonRpcSuccessStruct=(0,superstruct_1.object)({id:exports.JsonRpcIdStruct,jsonrpc:exports.JsonRpcVersionStruct,result:exports.JsonStruct}),exports.JsonRpcFailureStruct=(0,superstruct_1.object)({id:exports.JsonRpcIdStruct,jsonrpc:exports.JsonRpcVersionStruct,error:exports.JsonRpcErrorStruct}),exports.JsonRpcResponseStruct=(0,superstruct_1.union)([exports.JsonRpcSuccessStruct,exports.JsonRpcFailureStruct]),exports.isPendingJsonRpcResponse=isPendingJsonRpcResponse,exports.assertIsPendingJsonRpcResponse=assertIsPendingJsonRpcResponse,exports.isJsonRpcResponse=isJsonRpcResponse,exports.assertIsJsonRpcResponse=assertIsJsonRpcResponse,exports.isJsonRpcSuccess=isJsonRpcSuccess,exports.assertIsJsonRpcSuccess=assertIsJsonRpcSuccess,exports.isJsonRpcFailure=isJsonRpcFailure,exports.assertIsJsonRpcFailure=assertIsJsonRpcFailure,exports.isJsonRpcError=isJsonRpcError,exports.assertIsJsonRpcError=assertIsJsonRpcError,exports.getJsonRpcIdValidator=getJsonRpcIdValidator;