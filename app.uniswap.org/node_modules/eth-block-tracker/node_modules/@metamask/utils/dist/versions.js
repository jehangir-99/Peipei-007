"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.satisfiesVersionRange=exports.gtRange=exports.gtVersion=exports.assertIsSemVerRange=exports.assertIsSemVerVersion=exports.isValidSemVerRange=exports.isValidSemVerVersion=exports.VersionRangeStruct=exports.VersionStruct=void 0;const semver_1=require("semver"),superstruct_1=require("superstruct"),assert_1=require("./assert");function isValidSemVerVersion(version){return(0,superstruct_1.is)(version,exports.VersionStruct)}function isValidSemVerRange(versionRange){return(0,superstruct_1.is)(versionRange,exports.VersionRangeStruct)}function assertIsSemVerVersion(version){(0,assert_1.assertStruct)(version,exports.VersionStruct)}function assertIsSemVerRange(range){(0,assert_1.assertStruct)(range,exports.VersionRangeStruct)}function gtVersion(version1,version2){return(0,semver_1.gt)(version1,version2)}function gtRange(version,range){return(0,semver_1.gtr)(version,range)}function satisfiesVersionRange(version,versionRange){return(0,semver_1.satisfies)(version,versionRange,{includePrerelease:!0})}exports.VersionStruct=(0,superstruct_1.refine)((0,superstruct_1.string)(),"Version",(value=>null!==(0,semver_1.valid)(value)||`Expected SemVer version, got "${value}"`)),exports.VersionRangeStruct=(0,superstruct_1.refine)((0,superstruct_1.string)(),"Version range",(value=>null!==(0,semver_1.validRange)(value)||`Expected SemVer range, got "${value}"`)),exports.isValidSemVerVersion=isValidSemVerVersion,exports.isValidSemVerRange=isValidSemVerRange,exports.assertIsSemVerVersion=assertIsSemVerVersion,exports.assertIsSemVerRange=assertIsSemVerRange,exports.gtVersion=gtVersion,exports.gtRange=gtRange,exports.satisfiesVersionRange=satisfiesVersionRange;