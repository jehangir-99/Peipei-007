import{coerce,equals as equalBytes}from"../bytes.js";import*as varint from"../varint.js";export const create=(code,digest)=>{const size=digest.byteLength,sizeOffset=varint.encodingLength(code),digestOffset=sizeOffset+varint.encodingLength(size),bytes=new Uint8Array(digestOffset+size);return varint.encodeTo(code,bytes,0),varint.encodeTo(size,bytes,sizeOffset),bytes.set(digest,digestOffset),new Digest(code,size,digest,bytes)};export const decode=multihash=>{const bytes=coerce(multihash),[code,sizeOffset]=varint.decode(bytes),[size,digestOffset]=varint.decode(bytes.subarray(sizeOffset)),digest=bytes.subarray(sizeOffset+digestOffset);if(digest.byteLength!==size)throw new Error("Incorrect length");return new Digest(code,size,digest,bytes)};export const equals=(a,b)=>a===b||a.code===b.code&&a.size===b.size&&equalBytes(a.bytes,b.bytes);export class Digest{constructor(code,size,digest,bytes){this.code=code,this.size=size,this.digest=digest,this.bytes=bytes}}