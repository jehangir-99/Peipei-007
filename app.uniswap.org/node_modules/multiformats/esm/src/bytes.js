const empty=new Uint8Array(0),toHex=d=>d.reduce(((hex,byte)=>hex+byte.toString(16).padStart(2,"0")),""),fromHex=hex=>{const hexes=hex.match(/../g);return hexes?new Uint8Array(hexes.map((b=>parseInt(b,16)))):empty},equals=(aa,bb)=>{if(aa===bb)return!0;if(aa.byteLength!==bb.byteLength)return!1;for(let ii=0;ii<aa.byteLength;ii++)if(aa[ii]!==bb[ii])return!1;return!0},coerce=o=>{if(o instanceof Uint8Array&&"Uint8Array"===o.constructor.name)return o;if(o instanceof ArrayBuffer)return new Uint8Array(o);if(ArrayBuffer.isView(o))return new Uint8Array(o.buffer,o.byteOffset,o.byteLength);throw new Error("Unknown type, must be binary type")},isBinary=o=>o instanceof ArrayBuffer||ArrayBuffer.isView(o),fromString=str=>(new TextEncoder).encode(str),toString=b=>(new TextDecoder).decode(b);export{equals,coerce,isBinary,fromHex,toHex,fromString,toString,empty};