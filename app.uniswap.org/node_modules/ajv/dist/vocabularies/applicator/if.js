"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const codegen_1=require("../../compile/codegen"),util_1=require("../../compile/util"),error={message:({params:params})=>codegen_1.str`must match "${params.ifClause}" schema`,params:({params:params})=>codegen_1._`{failingKeyword: ${params.ifClause}}`},def={keyword:"if",schemaType:["object","boolean"],trackErrors:!0,error:error,code(cxt){const{gen:gen,parentSchema:parentSchema,it:it}=cxt;void 0===parentSchema.then&&void 0===parentSchema.else&&(0,util_1.checkStrictMode)(it,'"if" without "then" and "else" is ignored');const hasThen=hasSchema(it,"then"),hasElse=hasSchema(it,"else");if(!hasThen&&!hasElse)return;const valid=gen.let("valid",!0),schValid=gen.name("_valid");if(function(){const schCxt=cxt.subschema({keyword:"if",compositeRule:!0,createErrors:!1,allErrors:!1},schValid);cxt.mergeEvaluated(schCxt)}(),cxt.reset(),hasThen&&hasElse){const ifClause=gen.let("ifClause");cxt.setParams({ifClause:ifClause}),gen.if(schValid,validateClause("then",ifClause),validateClause("else",ifClause))}else hasThen?gen.if(schValid,validateClause("then")):gen.if((0,codegen_1.not)(schValid),validateClause("else"));function validateClause(keyword,ifClause){return()=>{const schCxt=cxt.subschema({keyword:keyword},schValid);gen.assign(valid,schValid),cxt.mergeValidEvaluated(schCxt,valid),ifClause?gen.assign(ifClause,codegen_1._`${keyword}`):cxt.setParams({ifClause:keyword})}}cxt.pass(valid,(()=>cxt.error(!0)))}};function hasSchema(it,keyword){const schema=it.schema[keyword];return void 0!==schema&&!(0,util_1.alwaysValidSchema)(it,schema)}exports.default=def;