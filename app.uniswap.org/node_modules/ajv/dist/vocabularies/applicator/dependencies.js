"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.validateSchemaDeps=exports.validatePropertyDeps=exports.error=void 0;const codegen_1=require("../../compile/codegen"),util_1=require("../../compile/util"),code_1=require("../code");exports.error={message:({params:{property:property,depsCount:depsCount,deps:deps}})=>{const property_ies=1===depsCount?"property":"properties";return codegen_1.str`must have ${property_ies} ${deps} when property ${property} is present`},params:({params:{property:property,depsCount:depsCount,deps:deps,missingProperty:missingProperty}})=>codegen_1._`{property: ${property},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}`};const def={keyword:"dependencies",type:"object",schemaType:"object",error:exports.error,code(cxt){const[propDeps,schDeps]=splitDependencies(cxt);validatePropertyDeps(cxt,propDeps),validateSchemaDeps(cxt,schDeps)}};function splitDependencies({schema:schema}){const propertyDeps={},schemaDeps={};for(const key in schema){if("__proto__"===key)continue;(Array.isArray(schema[key])?propertyDeps:schemaDeps)[key]=schema[key]}return[propertyDeps,schemaDeps]}function validatePropertyDeps(cxt,propertyDeps=cxt.schema){const{gen:gen,data:data,it:it}=cxt;if(0===Object.keys(propertyDeps).length)return;const missing=gen.let("missing");for(const prop in propertyDeps){const deps=propertyDeps[prop];if(0===deps.length)continue;const hasProperty=(0,code_1.propertyInData)(gen,data,prop,it.opts.ownProperties);cxt.setParams({property:prop,depsCount:deps.length,deps:deps.join(", ")}),it.allErrors?gen.if(hasProperty,(()=>{for(const depProp of deps)(0,code_1.checkReportMissingProp)(cxt,depProp)})):(gen.if(codegen_1._`${hasProperty} && (${(0,code_1.checkMissingProp)(cxt,deps,missing)})`),(0,code_1.reportMissingProp)(cxt,missing),gen.else())}}function validateSchemaDeps(cxt,schemaDeps=cxt.schema){const{gen:gen,data:data,keyword:keyword,it:it}=cxt,valid=gen.name("valid");for(const prop in schemaDeps)(0,util_1.alwaysValidSchema)(it,schemaDeps[prop])||(gen.if((0,code_1.propertyInData)(gen,data,prop,it.opts.ownProperties),(()=>{const schCxt=cxt.subschema({keyword:keyword,schemaProp:prop},valid);cxt.mergeValidEvaluated(schCxt,valid)}),(()=>gen.var(valid,!0))),cxt.ok(valid))}exports.validatePropertyDeps=validatePropertyDeps,exports.validateSchemaDeps=validateSchemaDeps,exports.default=def;