"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.validateAdditionalItems=void 0;const codegen_1=require("../../compile/codegen"),util_1=require("../../compile/util"),error={message:({params:{len:len}})=>codegen_1.str`must NOT have more than ${len} items`,params:({params:{len:len}})=>codegen_1._`{limit: ${len}}`},def={keyword:"additionalItems",type:"array",schemaType:["boolean","object"],before:"uniqueItems",error:error,code(cxt){const{parentSchema:parentSchema,it:it}=cxt,{items:items}=parentSchema;Array.isArray(items)?validateAdditionalItems(cxt,items):(0,util_1.checkStrictMode)(it,'"additionalItems" is ignored when "items" is not an array of schemas')}};function validateAdditionalItems(cxt,items){const{gen:gen,schema:schema,data:data,keyword:keyword,it:it}=cxt;it.items=!0;const len=gen.const("len",codegen_1._`${data}.length`);if(!1===schema)cxt.setParams({len:items.length}),cxt.pass(codegen_1._`${len} <= ${items.length}`);else if("object"==typeof schema&&!(0,util_1.alwaysValidSchema)(it,schema)){const valid=gen.var("valid",codegen_1._`${len} <= ${items.length}`);gen.if((0,codegen_1.not)(valid),(()=>function(valid){gen.forRange("i",items.length,len,(i=>{cxt.subschema({keyword:keyword,dataProp:i,dataPropType:util_1.Type.Num},valid),it.allErrors||gen.if((0,codegen_1.not)(valid),(()=>gen.break()))}))}(valid))),cxt.ok(valid)}}exports.validateAdditionalItems=validateAdditionalItems,exports.default=def;