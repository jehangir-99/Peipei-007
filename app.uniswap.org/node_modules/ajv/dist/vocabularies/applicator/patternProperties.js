"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const code_1=require("../code"),codegen_1=require("../../compile/codegen"),util_1=require("../../compile/util"),util_2=require("../../compile/util"),def={keyword:"patternProperties",type:"object",schemaType:"object",code(cxt){const{gen:gen,schema:schema,data:data,parentSchema:parentSchema,it:it}=cxt,{opts:opts}=it,patterns=(0,code_1.allSchemaProperties)(schema),alwaysValidPatterns=patterns.filter((p=>(0,util_1.alwaysValidSchema)(it,schema[p])));if(0===patterns.length||alwaysValidPatterns.length===patterns.length&&(!it.opts.unevaluated||!0===it.props))return;const checkProperties=opts.strictSchema&&!opts.allowMatchingProperties&&parentSchema.properties,valid=gen.name("valid");!0===it.props||it.props instanceof codegen_1.Name||(it.props=(0,util_2.evaluatedPropsToName)(gen,it.props));const{props:props}=it;function checkMatchingProperties(pat){for(const prop in checkProperties)new RegExp(pat).test(prop)&&(0,util_1.checkStrictMode)(it,`property ${prop} matches pattern ${pat} (use allowMatchingProperties)`)}function validateProperties(pat){gen.forIn("key",data,(key=>{gen.if(codegen_1._`${(0,code_1.usePattern)(cxt,pat)}.test(${key})`,(()=>{const alwaysValid=alwaysValidPatterns.includes(pat);alwaysValid||cxt.subschema({keyword:"patternProperties",schemaProp:pat,dataProp:key,dataPropType:util_2.Type.Str},valid),it.opts.unevaluated&&!0!==props?gen.assign(codegen_1._`${props}[${key}]`,!0):alwaysValid||it.allErrors||gen.if((0,codegen_1.not)(valid),(()=>gen.break()))}))}))}!function(){for(const pat of patterns)checkProperties&&checkMatchingProperties(pat),it.allErrors?validateProperties(pat):(gen.var(valid,!0),validateProperties(pat),gen.if(valid))}()}};exports.default=def;