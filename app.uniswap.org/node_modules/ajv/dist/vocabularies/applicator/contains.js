"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const codegen_1=require("../../compile/codegen"),util_1=require("../../compile/util"),error={message:({params:{min:min,max:max}})=>void 0===max?codegen_1.str`must contain at least ${min} valid item(s)`:codegen_1.str`must contain at least ${min} and no more than ${max} valid item(s)`,params:({params:{min:min,max:max}})=>void 0===max?codegen_1._`{minContains: ${min}}`:codegen_1._`{minContains: ${min}, maxContains: ${max}}`},def={keyword:"contains",type:"array",schemaType:["object","boolean"],before:"uniqueItems",trackErrors:!0,error:error,code(cxt){const{gen:gen,schema:schema,parentSchema:parentSchema,data:data,it:it}=cxt;let min,max;const{minContains:minContains,maxContains:maxContains}=parentSchema;it.opts.next?(min=void 0===minContains?1:minContains,max=maxContains):min=1;const len=gen.const("len",codegen_1._`${data}.length`);if(cxt.setParams({min:min,max:max}),void 0===max&&0===min)return void(0,util_1.checkStrictMode)(it,'"minContains" == 0 without "maxContains": "contains" keyword ignored');if(void 0!==max&&min>max)return(0,util_1.checkStrictMode)(it,'"minContains" > "maxContains" is always invalid'),void cxt.fail();if((0,util_1.alwaysValidSchema)(it,schema)){let cond=codegen_1._`${len} >= ${min}`;return void 0!==max&&(cond=codegen_1._`${cond} && ${len} <= ${max}`),void cxt.pass(cond)}it.items=!0;const valid=gen.name("valid");function validateItemsWithCount(){const schValid=gen.name("_valid"),count=gen.let("count",0);validateItems(schValid,(()=>gen.if(schValid,(()=>function(count){gen.code(codegen_1._`${count}++`),void 0===max?gen.if(codegen_1._`${count} >= ${min}`,(()=>gen.assign(valid,!0).break())):(gen.if(codegen_1._`${count} > ${max}`,(()=>gen.assign(valid,!1).break())),1===min?gen.assign(valid,!0):gen.if(codegen_1._`${count} >= ${min}`,(()=>gen.assign(valid,!0))))}(count)))))}function validateItems(_valid,block){gen.forRange("i",0,len,(i=>{cxt.subschema({keyword:"contains",dataProp:i,dataPropType:util_1.Type.Num,compositeRule:!0},_valid),block()}))}void 0===max&&1===min?validateItems(valid,(()=>gen.if(valid,(()=>gen.break())))):0===min?(gen.let(valid,!0),void 0!==max&&gen.if(codegen_1._`${data}.length > 0`,validateItemsWithCount)):(gen.let(valid,!1),validateItemsWithCount()),cxt.result(valid,(()=>cxt.reset()))}};exports.default=def;