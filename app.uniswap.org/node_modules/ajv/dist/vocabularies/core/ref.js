"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.callRef=exports.getValidate=void 0;const ref_error_1=require("../../compile/ref_error"),code_1=require("../code"),codegen_1=require("../../compile/codegen"),names_1=require("../../compile/names"),compile_1=require("../../compile"),util_1=require("../../compile/util"),def={keyword:"$ref",schemaType:"string",code(cxt){const{gen:gen,schema:$ref,it:it}=cxt,{baseId:baseId,schemaEnv:env,validateName:validateName,opts:opts,self:self}=it,{root:root}=env;if(("#"===$ref||"#/"===$ref)&&baseId===root.baseId)return function(){if(env===root)return callRef(cxt,validateName,env,env.$async);const rootName=gen.scopeValue("root",{ref:root});return callRef(cxt,codegen_1._`${rootName}.validate`,root,root.$async)}();const schOrEnv=compile_1.resolveRef.call(self,root,baseId,$ref);if(void 0===schOrEnv)throw new ref_error_1.default(it.opts.uriResolver,baseId,$ref);return schOrEnv instanceof compile_1.SchemaEnv?function(sch){const v=getValidate(cxt,sch);callRef(cxt,v,sch,sch.$async)}(schOrEnv):function(sch){const schName=gen.scopeValue("schema",!0===opts.code.source?{ref:sch,code:(0,codegen_1.stringify)(sch)}:{ref:sch}),valid=gen.name("valid"),schCxt=cxt.subschema({schema:sch,dataTypes:[],schemaPath:codegen_1.nil,topSchemaRef:schName,errSchemaPath:$ref},valid);cxt.mergeEvaluated(schCxt),cxt.ok(valid)}(schOrEnv)}};function getValidate(cxt,sch){const{gen:gen}=cxt;return sch.validate?gen.scopeValue("validate",{ref:sch.validate}):codegen_1._`${gen.scopeValue("wrapper",{ref:sch})}.validate`}function callRef(cxt,v,sch,$async){const{gen:gen,it:it}=cxt,{allErrors:allErrors,schemaEnv:env,opts:opts}=it,passCxt=opts.passContext?names_1.default.this:codegen_1.nil;function addErrorsFrom(source){const errs=codegen_1._`${source}.errors`;gen.assign(names_1.default.vErrors,codegen_1._`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`),gen.assign(names_1.default.errors,codegen_1._`${names_1.default.vErrors}.length`)}function addEvaluatedFrom(source){var _a;if(!it.opts.unevaluated)return;const schEvaluated=null===(_a=null==sch?void 0:sch.validate)||void 0===_a?void 0:_a.evaluated;if(!0!==it.props)if(schEvaluated&&!schEvaluated.dynamicProps)void 0!==schEvaluated.props&&(it.props=util_1.mergeEvaluated.props(gen,schEvaluated.props,it.props));else{const props=gen.var("props",codegen_1._`${source}.evaluated.props`);it.props=util_1.mergeEvaluated.props(gen,props,it.props,codegen_1.Name)}if(!0!==it.items)if(schEvaluated&&!schEvaluated.dynamicItems)void 0!==schEvaluated.items&&(it.items=util_1.mergeEvaluated.items(gen,schEvaluated.items,it.items));else{const items=gen.var("items",codegen_1._`${source}.evaluated.items`);it.items=util_1.mergeEvaluated.items(gen,items,it.items,codegen_1.Name)}}$async?function(){if(!env.$async)throw new Error("async schema referenced by sync schema");const valid=gen.let("valid");gen.try((()=>{gen.code(codegen_1._`await ${(0,code_1.callValidateCode)(cxt,v,passCxt)}`),addEvaluatedFrom(v),allErrors||gen.assign(valid,!0)}),(e=>{gen.if(codegen_1._`!(${e} instanceof ${it.ValidationError})`,(()=>gen.throw(e))),addErrorsFrom(e),allErrors||gen.assign(valid,!1)})),cxt.ok(valid)}():cxt.result((0,code_1.callValidateCode)(cxt,v,passCxt),(()=>addEvaluatedFrom(v)),(()=>addErrorsFrom(v)))}exports.getValidate=getValidate,exports.callRef=callRef,exports.default=def;