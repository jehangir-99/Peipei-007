"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const codegen_1=require("../../compile/codegen"),types_1=require("../discriminator/types"),compile_1=require("../../compile"),util_1=require("../../compile/util"),error={message:({params:{discrError:discrError,tagName:tagName}})=>discrError===types_1.DiscrError.Tag?`tag "${tagName}" must be string`:`value of tag "${tagName}" must be in oneOf`,params:({params:{discrError:discrError,tag:tag,tagName:tagName}})=>codegen_1._`{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`},def={keyword:"discriminator",type:"object",schemaType:"object",error:error,code(cxt){const{gen:gen,data:data,schema:schema,parentSchema:parentSchema,it:it}=cxt,{oneOf:oneOf}=parentSchema;if(!it.opts.discriminator)throw new Error("discriminator: requires discriminator option");const tagName=schema.propertyName;if("string"!=typeof tagName)throw new Error("discriminator: requires propertyName");if(schema.mapping)throw new Error("discriminator: mapping is not supported");if(!oneOf)throw new Error("discriminator: requires oneOf keyword");const valid=gen.let("valid",!1),tag=gen.const("tag",codegen_1._`${data}${(0,codegen_1.getProperty)(tagName)}`);function applyTagSchema(schemaProp){const _valid=gen.name("valid"),schCxt=cxt.subschema({keyword:"oneOf",schemaProp:schemaProp},_valid);return cxt.mergeEvaluated(schCxt,codegen_1.Name),_valid}gen.if(codegen_1._`typeof ${tag} == "string"`,(()=>function(){const mapping=function(){var _a;const oneOfMapping={},topRequired=hasRequired(parentSchema);let tagRequired=!0;for(let i=0;i<oneOf.length;i++){let sch=oneOf[i];(null==sch?void 0:sch.$ref)&&!(0,util_1.schemaHasRulesButRef)(sch,it.self.RULES)&&(sch=compile_1.resolveRef.call(it.self,it.schemaEnv.root,it.baseId,null==sch?void 0:sch.$ref),sch instanceof compile_1.SchemaEnv&&(sch=sch.schema));const propSch=null===(_a=null==sch?void 0:sch.properties)||void 0===_a?void 0:_a[tagName];if("object"!=typeof propSch)throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${tagName}"`);tagRequired=tagRequired&&(topRequired||hasRequired(sch)),addMappings(propSch,i)}if(!tagRequired)throw new Error(`discriminator: "${tagName}" must be required`);return oneOfMapping;function hasRequired({required:required}){return Array.isArray(required)&&required.includes(tagName)}function addMappings(sch,i){if(sch.const)addMapping(sch.const,i);else{if(!sch.enum)throw new Error(`discriminator: "properties/${tagName}" must have "const" or "enum"`);for(const tagValue of sch.enum)addMapping(tagValue,i)}}function addMapping(tagValue,i){if("string"!=typeof tagValue||tagValue in oneOfMapping)throw new Error(`discriminator: "${tagName}" values must be unique strings`);oneOfMapping[tagValue]=i}}();gen.if(!1);for(const tagValue in mapping)gen.elseIf(codegen_1._`${tag} === ${tagValue}`),gen.assign(valid,applyTagSchema(mapping[tagValue]));gen.else(),cxt.error(!1,{discrError:types_1.DiscrError.Mapping,tag:tag,tagName:tagName}),gen.endIf()}()),(()=>cxt.error(!1,{discrError:types_1.DiscrError.Tag,tag:tag,tagName:tagName}))),cxt.ok(valid)}};exports.default=def;