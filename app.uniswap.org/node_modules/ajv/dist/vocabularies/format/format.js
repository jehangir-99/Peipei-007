"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const codegen_1=require("../../compile/codegen"),error={message:({schemaCode:schemaCode})=>codegen_1.str`must match format "${schemaCode}"`,params:({schemaCode:schemaCode})=>codegen_1._`{format: ${schemaCode}}`},def={keyword:"format",type:["number","string"],schemaType:"string",$data:!0,error:error,code(cxt,ruleType){const{gen:gen,data:data,$data:$data,schema:schema,schemaCode:schemaCode,it:it}=cxt,{opts:opts,errSchemaPath:errSchemaPath,schemaEnv:schemaEnv,self:self}=it;opts.validateFormats&&($data?function(){const fmts=gen.scopeValue("formats",{ref:self.formats,code:opts.code.formats}),fDef=gen.const("fDef",codegen_1._`${fmts}[${schemaCode}]`),fType=gen.let("fType"),format=gen.let("format");gen.if(codegen_1._`typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`,(()=>gen.assign(fType,codegen_1._`${fDef}.type || "string"`).assign(format,codegen_1._`${fDef}.validate`)),(()=>gen.assign(fType,codegen_1._`"string"`).assign(format,fDef))),cxt.fail$data((0,codegen_1.or)(!1===opts.strictSchema?codegen_1.nil:codegen_1._`${schemaCode} && !${format}`,function(){const callFormat=schemaEnv.$async?codegen_1._`(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))`:codegen_1._`${format}(${data})`,validData=codegen_1._`(typeof ${format} == "function" ? ${callFormat} : ${format}.test(${data}))`;return codegen_1._`${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`}()))}():function(){const formatDef=self.formats[schema];if(!formatDef)return void function(){if(!1===opts.strictSchema)return void self.logger.warn(unknownMsg());throw new Error(unknownMsg());function unknownMsg(){return`unknown format "${schema}" ignored in schema at path "${errSchemaPath}"`}}();if(!0===formatDef)return;const[fmtType,format,fmtRef]=function(fmtDef){const code=fmtDef instanceof RegExp?(0,codegen_1.regexpCode)(fmtDef):opts.code.formats?codegen_1._`${opts.code.formats}${(0,codegen_1.getProperty)(schema)}`:void 0,fmt=gen.scopeValue("formats",{key:schema,ref:fmtDef,code:code});if("object"==typeof fmtDef&&!(fmtDef instanceof RegExp))return[fmtDef.type||"string",fmtDef.validate,codegen_1._`${fmt}.validate`];return["string",fmtDef,fmt]}(formatDef);fmtType===ruleType&&cxt.pass(function(){if("object"==typeof formatDef&&!(formatDef instanceof RegExp)&&formatDef.async){if(!schemaEnv.$async)throw new Error("async format in sync schema");return codegen_1._`await ${fmtRef}(${data})`}return"function"==typeof format?codegen_1._`${fmtRef}(${data})`:codegen_1._`${fmtRef}.test(${data})`}())}())}};exports.default=def;