"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const dataType_1=require("../../compile/validate/dataType"),codegen_1=require("../../compile/codegen"),util_1=require("../../compile/util"),equal_1=require("../../runtime/equal"),error={message:({params:{i:i,j:j}})=>codegen_1.str`must NOT have duplicate items (items ## ${j} and ${i} are identical)`,params:({params:{i:i,j:j}})=>codegen_1._`{i: ${i}, j: ${j}}`},def={keyword:"uniqueItems",type:"array",schemaType:"boolean",$data:!0,error:error,code(cxt){const{gen:gen,data:data,$data:$data,schema:schema,parentSchema:parentSchema,schemaCode:schemaCode,it:it}=cxt;if(!$data&&!schema)return;const valid=gen.let("valid"),itemTypes=parentSchema.items?(0,dataType_1.getSchemaTypes)(parentSchema.items):[];function loopN(i,j){const item=gen.name("item"),wrongType=(0,dataType_1.checkDataTypes)(itemTypes,item,it.opts.strictNumbers,dataType_1.DataType.Wrong),indices=gen.const("indices",codegen_1._`{}`);gen.for(codegen_1._`;${i}--;`,(()=>{gen.let(item,codegen_1._`${data}[${i}]`),gen.if(wrongType,codegen_1._`continue`),itemTypes.length>1&&gen.if(codegen_1._`typeof ${item} == "string"`,codegen_1._`${item} += "_"`),gen.if(codegen_1._`typeof ${indices}[${item}] == "number"`,(()=>{gen.assign(j,codegen_1._`${indices}[${item}]`),cxt.error(),gen.assign(valid,!1).break()})).code(codegen_1._`${indices}[${item}] = ${i}`)}))}function loopN2(i,j){const eql=(0,util_1.useFunc)(gen,equal_1.default),outer=gen.name("outer");gen.label(outer).for(codegen_1._`;${i}--;`,(()=>gen.for(codegen_1._`${j} = ${i}; ${j}--;`,(()=>gen.if(codegen_1._`${eql}(${data}[${i}], ${data}[${j}])`,(()=>{cxt.error(),gen.assign(valid,!1).break(outer)}))))))}cxt.block$data(valid,(function(){const i=gen.let("i",codegen_1._`${data}.length`),j=gen.let("j");cxt.setParams({i:i,j:j}),gen.assign(valid,!0),gen.if(codegen_1._`${i} > 1`,(()=>(itemTypes.length>0&&!itemTypes.some((t=>"object"===t||"array"===t))?loopN:loopN2)(i,j)))}),codegen_1._`${schemaCode} === false`),cxt.ok(valid)}};exports.default=def;