"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const codegen_1=require("../../compile/codegen"),util_1=require("../../compile/util"),equal_1=require("../../runtime/equal"),error={message:"must be equal to one of the allowed values",params:({schemaCode:schemaCode})=>codegen_1._`{allowedValues: ${schemaCode}}`},def={keyword:"enum",schemaType:"array",$data:!0,error:error,code(cxt){const{gen:gen,data:data,$data:$data,schema:schema,schemaCode:schemaCode,it:it}=cxt;if(!$data&&0===schema.length)throw new Error("enum must have non-empty array");const useLoop=schema.length>=it.opts.loopEnum;let eql;const getEql=()=>null!=eql?eql:eql=(0,util_1.useFunc)(gen,equal_1.default);let valid;if(useLoop||$data)valid=gen.let("valid"),cxt.block$data(valid,(function(){gen.assign(valid,!1),gen.forOf("v",schemaCode,(v=>gen.if(codegen_1._`${getEql()}(${data}, ${v})`,(()=>gen.assign(valid,!0).break()))))}));else{if(!Array.isArray(schema))throw new Error("ajv implementation error");const vSchema=gen.const("vSchema",schemaCode);valid=(0,codegen_1.or)(...schema.map(((_x,i)=>function(vSchema,i){const sch=schema[i];return"object"==typeof sch&&null!==sch?codegen_1._`${getEql()}(${data}, ${vSchema}[${i}])`:codegen_1._`${data} === ${sch}`}(vSchema,i))))}cxt.pass(valid)}};exports.default=def;