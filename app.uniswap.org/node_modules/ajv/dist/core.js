"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.CodeGen=exports.Name=exports.nil=exports.stringify=exports.str=exports._=exports.KeywordCxt=void 0;var validate_1=require("./compile/validate");Object.defineProperty(exports,"KeywordCxt",{enumerable:!0,get:function(){return validate_1.KeywordCxt}});var codegen_1=require("./compile/codegen");Object.defineProperty(exports,"_",{enumerable:!0,get:function(){return codegen_1._}}),Object.defineProperty(exports,"str",{enumerable:!0,get:function(){return codegen_1.str}}),Object.defineProperty(exports,"stringify",{enumerable:!0,get:function(){return codegen_1.stringify}}),Object.defineProperty(exports,"nil",{enumerable:!0,get:function(){return codegen_1.nil}}),Object.defineProperty(exports,"Name",{enumerable:!0,get:function(){return codegen_1.Name}}),Object.defineProperty(exports,"CodeGen",{enumerable:!0,get:function(){return codegen_1.CodeGen}});const validation_error_1=require("./runtime/validation_error"),ref_error_1=require("./compile/ref_error"),rules_1=require("./compile/rules"),compile_1=require("./compile"),codegen_2=require("./compile/codegen"),resolve_1=require("./compile/resolve"),dataType_1=require("./compile/validate/dataType"),util_1=require("./compile/util"),$dataRefSchema=require("./refs/data.json"),uri_1=require("./runtime/uri"),defaultRegExp=(str,flags)=>new RegExp(str,flags);defaultRegExp.code="new RegExp";const META_IGNORE_OPTIONS=["removeAdditional","useDefaults","coerceTypes"],EXT_SCOPE_NAMES=new Set(["validate","serialize","parse","wrapper","root","schema","keyword","pattern","formats","validate$data","func","obj","Error"]),removedOptions={errorDataPath:"",format:"`validateFormats: false` can be used instead.",nullable:'"nullable" keyword is supported by default.',jsonPointers:"Deprecated jsPropertySyntax can be used instead.",extendRefs:"Deprecated ignoreKeywordsWithRef can be used instead.",missingRefs:"Pass empty schema with $id that should be ignored to ajv.addSchema.",processCode:"Use option `code: {process: (code, schemaEnv: object) => string}`",sourceCode:"Use option `code: {source: true}`",strictDefaults:"It is default now, see option `strict`.",strictKeywords:"It is default now, see option `strict`.",uniqueItems:'"uniqueItems" keyword is always validated.',unknownFormats:"Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",cache:"Map is used as cache, schema object as key.",serialize:"Map is used as cache, schema object as key.",ajvErrors:"It is default now."},deprecatedOptions={ignoreKeywordsWithRef:"",jsPropertySyntax:"",unicode:'"minLength"/"maxLength" account for unicode characters by default.'},MAX_EXPRESSION=200;function requiredOptions(o){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o,_p,_q,_r,_s,_t,_u,_v,_w,_x,_y,_z,_0;const s=o.strict,_optz=null===(_a=o.code)||void 0===_a?void 0:_a.optimize,optimize=!0===_optz||void 0===_optz?1:_optz||0,regExp=null!==(_c=null===(_b=o.code)||void 0===_b?void 0:_b.regExp)&&void 0!==_c?_c:defaultRegExp,uriResolver=null!==(_d=o.uriResolver)&&void 0!==_d?_d:uri_1.default;return{strictSchema:null===(_f=null!==(_e=o.strictSchema)&&void 0!==_e?_e:s)||void 0===_f||_f,strictNumbers:null===(_h=null!==(_g=o.strictNumbers)&&void 0!==_g?_g:s)||void 0===_h||_h,strictTypes:null!==(_k=null!==(_j=o.strictTypes)&&void 0!==_j?_j:s)&&void 0!==_k?_k:"log",strictTuples:null!==(_m=null!==(_l=o.strictTuples)&&void 0!==_l?_l:s)&&void 0!==_m?_m:"log",strictRequired:null!==(_p=null!==(_o=o.strictRequired)&&void 0!==_o?_o:s)&&void 0!==_p&&_p,code:o.code?{...o.code,optimize:optimize,regExp:regExp}:{optimize:optimize,regExp:regExp},loopRequired:null!==(_q=o.loopRequired)&&void 0!==_q?_q:200,loopEnum:null!==(_r=o.loopEnum)&&void 0!==_r?_r:200,meta:null===(_s=o.meta)||void 0===_s||_s,messages:null===(_t=o.messages)||void 0===_t||_t,inlineRefs:null===(_u=o.inlineRefs)||void 0===_u||_u,schemaId:null!==(_v=o.schemaId)&&void 0!==_v?_v:"$id",addUsedSchema:null===(_w=o.addUsedSchema)||void 0===_w||_w,validateSchema:null===(_x=o.validateSchema)||void 0===_x||_x,validateFormats:null===(_y=o.validateFormats)||void 0===_y||_y,unicodeRegExp:null===(_z=o.unicodeRegExp)||void 0===_z||_z,int32range:null===(_0=o.int32range)||void 0===_0||_0,uriResolver:uriResolver}}class Ajv{constructor(opts={}){this.schemas={},this.refs={},this.formats={},this._compilations=new Set,this._loading={},this._cache=new Map,opts=this.opts={...opts,...requiredOptions(opts)};const{es5:es5,lines:lines}=this.opts.code;this.scope=new codegen_2.ValueScope({scope:{},prefixes:EXT_SCOPE_NAMES,es5:es5,lines:lines}),this.logger=getLogger(opts.logger);const formatOpt=opts.validateFormats;opts.validateFormats=!1,this.RULES=(0,rules_1.getRules)(),checkOptions.call(this,removedOptions,opts,"NOT SUPPORTED"),checkOptions.call(this,deprecatedOptions,opts,"DEPRECATED","warn"),this._metaOpts=getMetaSchemaOptions.call(this),opts.formats&&addInitialFormats.call(this),this._addVocabularies(),this._addDefaultMetaSchema(),opts.keywords&&addInitialKeywords.call(this,opts.keywords),"object"==typeof opts.meta&&this.addMetaSchema(opts.meta),addInitialSchemas.call(this),opts.validateFormats=formatOpt}_addVocabularies(){this.addKeyword("$async")}_addDefaultMetaSchema(){const{$data:$data,meta:meta,schemaId:schemaId}=this.opts;let _dataRefSchema=$dataRefSchema;"id"===schemaId&&(_dataRefSchema={...$dataRefSchema},_dataRefSchema.id=_dataRefSchema.$id,delete _dataRefSchema.$id),meta&&$data&&this.addMetaSchema(_dataRefSchema,_dataRefSchema[schemaId],!1)}defaultMeta(){const{meta:meta,schemaId:schemaId}=this.opts;return this.opts.defaultMeta="object"==typeof meta?meta[schemaId]||meta:void 0}validate(schemaKeyRef,data){let v;if("string"==typeof schemaKeyRef){if(v=this.getSchema(schemaKeyRef),!v)throw new Error(`no schema with key or ref "${schemaKeyRef}"`)}else v=this.compile(schemaKeyRef);const valid=v(data);return"$async"in v||(this.errors=v.errors),valid}compile(schema,_meta){const sch=this._addSchema(schema,_meta);return sch.validate||this._compileSchemaEnv(sch)}compileAsync(schema,meta){if("function"!=typeof this.opts.loadSchema)throw new Error("options.loadSchema should be a function");const{loadSchema:loadSchema}=this.opts;return runCompileAsync.call(this,schema,meta);async function runCompileAsync(_schema,_meta){await loadMetaSchema.call(this,_schema.$schema);const sch=this._addSchema(_schema,_meta);return sch.validate||_compileAsync.call(this,sch)}async function loadMetaSchema($ref){$ref&&!this.getSchema($ref)&&await runCompileAsync.call(this,{$ref:$ref},!0)}async function _compileAsync(sch){try{return this._compileSchemaEnv(sch)}catch(e){if(!(e instanceof ref_error_1.default))throw e;return checkLoaded.call(this,e),await loadMissingSchema.call(this,e.missingSchema),_compileAsync.call(this,sch)}}function checkLoaded({missingSchema:ref,missingRef:missingRef}){if(this.refs[ref])throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`)}async function loadMissingSchema(ref){const _schema=await _loadSchema.call(this,ref);this.refs[ref]||await loadMetaSchema.call(this,_schema.$schema),this.refs[ref]||this.addSchema(_schema,ref,meta)}async function _loadSchema(ref){const p=this._loading[ref];if(p)return p;try{return await(this._loading[ref]=loadSchema(ref))}finally{delete this._loading[ref]}}}addSchema(schema,key,_meta,_validateSchema=this.opts.validateSchema){if(Array.isArray(schema)){for(const sch of schema)this.addSchema(sch,void 0,_meta,_validateSchema);return this}let id;if("object"==typeof schema){const{schemaId:schemaId}=this.opts;if(id=schema[schemaId],void 0!==id&&"string"!=typeof id)throw new Error(`schema ${schemaId} must be string`)}return key=(0,resolve_1.normalizeId)(key||id),this._checkUnique(key),this.schemas[key]=this._addSchema(schema,_meta,key,_validateSchema,!0),this}addMetaSchema(schema,key,_validateSchema=this.opts.validateSchema){return this.addSchema(schema,key,!0,_validateSchema),this}validateSchema(schema,throwOrLogError){if("boolean"==typeof schema)return!0;let $schema;if($schema=schema.$schema,void 0!==$schema&&"string"!=typeof $schema)throw new Error("$schema must be a string");if($schema=$schema||this.opts.defaultMeta||this.defaultMeta(),!$schema)return this.logger.warn("meta-schema not available"),this.errors=null,!0;const valid=this.validate($schema,schema);if(!valid&&throwOrLogError){const message="schema is invalid: "+this.errorsText();if("log"!==this.opts.validateSchema)throw new Error(message);this.logger.error(message)}return valid}getSchema(keyRef){let sch;for(;"string"==typeof(sch=getSchEnv.call(this,keyRef));)keyRef=sch;if(void 0===sch){const{schemaId:schemaId}=this.opts,root=new compile_1.SchemaEnv({schema:{},schemaId:schemaId});if(sch=compile_1.resolveSchema.call(this,root,keyRef),!sch)return;this.refs[keyRef]=sch}return sch.validate||this._compileSchemaEnv(sch)}removeSchema(schemaKeyRef){if(schemaKeyRef instanceof RegExp)return this._removeAllSchemas(this.schemas,schemaKeyRef),this._removeAllSchemas(this.refs,schemaKeyRef),this;switch(typeof schemaKeyRef){case"undefined":return this._removeAllSchemas(this.schemas),this._removeAllSchemas(this.refs),this._cache.clear(),this;case"string":{const sch=getSchEnv.call(this,schemaKeyRef);return"object"==typeof sch&&this._cache.delete(sch.schema),delete this.schemas[schemaKeyRef],delete this.refs[schemaKeyRef],this}case"object":{const cacheKey=schemaKeyRef;this._cache.delete(cacheKey);let id=schemaKeyRef[this.opts.schemaId];return id&&(id=(0,resolve_1.normalizeId)(id),delete this.schemas[id],delete this.refs[id]),this}default:throw new Error("ajv.removeSchema: invalid parameter")}}addVocabulary(definitions){for(const def of definitions)this.addKeyword(def);return this}addKeyword(kwdOrDef,def){let keyword;if("string"==typeof kwdOrDef)keyword=kwdOrDef,"object"==typeof def&&(this.logger.warn("these parameters are deprecated, see docs for addKeyword"),def.keyword=keyword);else{if("object"!=typeof kwdOrDef||void 0!==def)throw new Error("invalid addKeywords parameters");if(keyword=(def=kwdOrDef).keyword,Array.isArray(keyword)&&!keyword.length)throw new Error("addKeywords: keyword must be string or non-empty array")}if(checkKeyword.call(this,keyword,def),!def)return(0,util_1.eachItem)(keyword,(kwd=>addRule.call(this,kwd))),this;keywordMetaschema.call(this,def);const definition={...def,type:(0,dataType_1.getJSONTypes)(def.type),schemaType:(0,dataType_1.getJSONTypes)(def.schemaType)};return(0,util_1.eachItem)(keyword,0===definition.type.length?k=>addRule.call(this,k,definition):k=>definition.type.forEach((t=>addRule.call(this,k,definition,t)))),this}getKeyword(keyword){const rule=this.RULES.all[keyword];return"object"==typeof rule?rule.definition:!!rule}removeKeyword(keyword){const{RULES:RULES}=this;delete RULES.keywords[keyword],delete RULES.all[keyword];for(const group of RULES.rules){const i=group.rules.findIndex((rule=>rule.keyword===keyword));i>=0&&group.rules.splice(i,1)}return this}addFormat(name,format){return"string"==typeof format&&(format=new RegExp(format)),this.formats[name]=format,this}errorsText(errors=this.errors,{separator:separator=", ",dataVar:dataVar="data"}={}){return errors&&0!==errors.length?errors.map((e=>`${dataVar}${e.instancePath} ${e.message}`)).reduce(((text,msg)=>text+separator+msg)):"No errors"}$dataMetaSchema(metaSchema,keywordsJsonPointers){const rules=this.RULES.all;metaSchema=JSON.parse(JSON.stringify(metaSchema));for(const jsonPointer of keywordsJsonPointers){const segments=jsonPointer.split("/").slice(1);let keywords=metaSchema;for(const seg of segments)keywords=keywords[seg];for(const key in rules){const rule=rules[key];if("object"!=typeof rule)continue;const{$data:$data}=rule.definition,schema=keywords[key];$data&&schema&&(keywords[key]=schemaOrData(schema))}}return metaSchema}_removeAllSchemas(schemas,regex){for(const keyRef in schemas){const sch=schemas[keyRef];regex&&!regex.test(keyRef)||("string"==typeof sch?delete schemas[keyRef]:sch&&!sch.meta&&(this._cache.delete(sch.schema),delete schemas[keyRef]))}}_addSchema(schema,meta,baseId,validateSchema=this.opts.validateSchema,addSchema=this.opts.addUsedSchema){let id;const{schemaId:schemaId}=this.opts;if("object"==typeof schema)id=schema[schemaId];else{if(this.opts.jtd)throw new Error("schema must be object");if("boolean"!=typeof schema)throw new Error("schema must be object or boolean")}let sch=this._cache.get(schema);if(void 0!==sch)return sch;baseId=(0,resolve_1.normalizeId)(id||baseId);const localRefs=resolve_1.getSchemaRefs.call(this,schema,baseId);return sch=new compile_1.SchemaEnv({schema:schema,schemaId:schemaId,meta:meta,baseId:baseId,localRefs:localRefs}),this._cache.set(sch.schema,sch),addSchema&&!baseId.startsWith("#")&&(baseId&&this._checkUnique(baseId),this.refs[baseId]=sch),validateSchema&&this.validateSchema(schema,!0),sch}_checkUnique(id){if(this.schemas[id]||this.refs[id])throw new Error(`schema with key or id "${id}" already exists`)}_compileSchemaEnv(sch){if(sch.meta?this._compileMetaSchema(sch):compile_1.compileSchema.call(this,sch),!sch.validate)throw new Error("ajv implementation error");return sch.validate}_compileMetaSchema(sch){const currentOpts=this.opts;this.opts=this._metaOpts;try{compile_1.compileSchema.call(this,sch)}finally{this.opts=currentOpts}}}function checkOptions(checkOpts,options,msg,log="error"){for(const key in checkOpts){const opt=key;opt in options&&this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`)}}function getSchEnv(keyRef){return keyRef=(0,resolve_1.normalizeId)(keyRef),this.schemas[keyRef]||this.refs[keyRef]}function addInitialSchemas(){const optsSchemas=this.opts.schemas;if(optsSchemas)if(Array.isArray(optsSchemas))this.addSchema(optsSchemas);else for(const key in optsSchemas)this.addSchema(optsSchemas[key],key)}function addInitialFormats(){for(const name in this.opts.formats){const format=this.opts.formats[name];format&&this.addFormat(name,format)}}function addInitialKeywords(defs){if(Array.isArray(defs))this.addVocabulary(defs);else{this.logger.warn("keywords option as map is deprecated, pass array");for(const keyword in defs){const def=defs[keyword];def.keyword||(def.keyword=keyword),this.addKeyword(def)}}}function getMetaSchemaOptions(){const metaOpts={...this.opts};for(const opt of META_IGNORE_OPTIONS)delete metaOpts[opt];return metaOpts}exports.default=Ajv,Ajv.ValidationError=validation_error_1.default,Ajv.MissingRefError=ref_error_1.default;const noLogs={log(){},warn(){},error(){}};function getLogger(logger){if(!1===logger)return noLogs;if(void 0===logger)return console;if(logger.log&&logger.warn&&logger.error)return logger;throw new Error("logger must implement log, warn and error methods")}const KEYWORD_NAME=/^[a-z_$][a-z0-9_$:-]*$/i;function checkKeyword(keyword,def){const{RULES:RULES}=this;if((0,util_1.eachItem)(keyword,(kwd=>{if(RULES.keywords[kwd])throw new Error(`Keyword ${kwd} is already defined`);if(!KEYWORD_NAME.test(kwd))throw new Error(`Keyword ${kwd} has invalid name`)})),def&&def.$data&&!("code"in def)&&!("validate"in def))throw new Error('$data keyword must have "code" or "validate" function')}function addRule(keyword,definition,dataType){var _a;const post=null==definition?void 0:definition.post;if(dataType&&post)throw new Error('keyword with "post" flag cannot have "type"');const{RULES:RULES}=this;let ruleGroup=post?RULES.post:RULES.rules.find((({type:t})=>t===dataType));if(ruleGroup||(ruleGroup={type:dataType,rules:[]},RULES.rules.push(ruleGroup)),RULES.keywords[keyword]=!0,!definition)return;const rule={keyword:keyword,definition:{...definition,type:(0,dataType_1.getJSONTypes)(definition.type),schemaType:(0,dataType_1.getJSONTypes)(definition.schemaType)}};definition.before?addBeforeRule.call(this,ruleGroup,rule,definition.before):ruleGroup.rules.push(rule),RULES.all[keyword]=rule,null===(_a=definition.implements)||void 0===_a||_a.forEach((kwd=>this.addKeyword(kwd)))}function addBeforeRule(ruleGroup,rule,before){const i=ruleGroup.rules.findIndex((_rule=>_rule.keyword===before));i>=0?ruleGroup.rules.splice(i,0,rule):(ruleGroup.rules.push(rule),this.logger.warn(`rule ${before} is not defined`))}function keywordMetaschema(def){let{metaSchema:metaSchema}=def;void 0!==metaSchema&&(def.$data&&this.opts.$data&&(metaSchema=schemaOrData(metaSchema)),def.validateSchema=this.compile(metaSchema,!0))}const $dataRef={$ref:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"};function schemaOrData(schema){return{anyOf:[schema,$dataRef]}}