"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.or=exports.and=exports.not=exports.CodeGen=exports.operators=exports.varKinds=exports.ValueScopeName=exports.ValueScope=exports.Scope=exports.Name=exports.regexpCode=exports.stringify=exports.getProperty=exports.nil=exports.strConcat=exports.str=exports._=void 0;const code_1=require("./code"),scope_1=require("./scope");var code_2=require("./code");Object.defineProperty(exports,"_",{enumerable:!0,get:function(){return code_2._}}),Object.defineProperty(exports,"str",{enumerable:!0,get:function(){return code_2.str}}),Object.defineProperty(exports,"strConcat",{enumerable:!0,get:function(){return code_2.strConcat}}),Object.defineProperty(exports,"nil",{enumerable:!0,get:function(){return code_2.nil}}),Object.defineProperty(exports,"getProperty",{enumerable:!0,get:function(){return code_2.getProperty}}),Object.defineProperty(exports,"stringify",{enumerable:!0,get:function(){return code_2.stringify}}),Object.defineProperty(exports,"regexpCode",{enumerable:!0,get:function(){return code_2.regexpCode}}),Object.defineProperty(exports,"Name",{enumerable:!0,get:function(){return code_2.Name}});var scope_2=require("./scope");Object.defineProperty(exports,"Scope",{enumerable:!0,get:function(){return scope_2.Scope}}),Object.defineProperty(exports,"ValueScope",{enumerable:!0,get:function(){return scope_2.ValueScope}}),Object.defineProperty(exports,"ValueScopeName",{enumerable:!0,get:function(){return scope_2.ValueScopeName}}),Object.defineProperty(exports,"varKinds",{enumerable:!0,get:function(){return scope_2.varKinds}}),exports.operators={GT:new code_1._Code(">"),GTE:new code_1._Code(">="),LT:new code_1._Code("<"),LTE:new code_1._Code("<="),EQ:new code_1._Code("==="),NEQ:new code_1._Code("!=="),NOT:new code_1._Code("!"),OR:new code_1._Code("||"),AND:new code_1._Code("&&"),ADD:new code_1._Code("+")};class Node{optimizeNodes(){return this}optimizeNames(_names,_constants){return this}}class Def extends Node{constructor(varKind,name,rhs){super(),this.varKind=varKind,this.name=name,this.rhs=rhs}render({es5:es5,_n:_n}){const varKind=es5?scope_1.varKinds.var:this.varKind,rhs=void 0===this.rhs?"":` = ${this.rhs}`;return`${varKind} ${this.name}${rhs};`+_n}optimizeNames(names,constants){if(names[this.name.str])return this.rhs&&(this.rhs=optimizeExpr(this.rhs,names,constants)),this}get names(){return this.rhs instanceof code_1._CodeOrName?this.rhs.names:{}}}class Assign extends Node{constructor(lhs,rhs,sideEffects){super(),this.lhs=lhs,this.rhs=rhs,this.sideEffects=sideEffects}render({_n:_n}){return`${this.lhs} = ${this.rhs};`+_n}optimizeNames(names,constants){if(!(this.lhs instanceof code_1.Name)||names[this.lhs.str]||this.sideEffects)return this.rhs=optimizeExpr(this.rhs,names,constants),this}get names(){return addExprNames(this.lhs instanceof code_1.Name?{}:{...this.lhs.names},this.rhs)}}class AssignOp extends Assign{constructor(lhs,op,rhs,sideEffects){super(lhs,rhs,sideEffects),this.op=op}render({_n:_n}){return`${this.lhs} ${this.op}= ${this.rhs};`+_n}}class Label extends Node{constructor(label){super(),this.label=label,this.names={}}render({_n:_n}){return`${this.label}:`+_n}}class Break extends Node{constructor(label){super(),this.label=label,this.names={}}render({_n:_n}){return`break${this.label?` ${this.label}`:""};`+_n}}class Throw extends Node{constructor(error){super(),this.error=error}render({_n:_n}){return`throw ${this.error};`+_n}get names(){return this.error.names}}class AnyCode extends Node{constructor(code){super(),this.code=code}render({_n:_n}){return`${this.code};`+_n}optimizeNodes(){return`${this.code}`?this:void 0}optimizeNames(names,constants){return this.code=optimizeExpr(this.code,names,constants),this}get names(){return this.code instanceof code_1._CodeOrName?this.code.names:{}}}class ParentNode extends Node{constructor(nodes=[]){super(),this.nodes=nodes}render(opts){return this.nodes.reduce(((code,n)=>code+n.render(opts)),"")}optimizeNodes(){const{nodes:nodes}=this;let i=nodes.length;for(;i--;){const n=nodes[i].optimizeNodes();Array.isArray(n)?nodes.splice(i,1,...n):n?nodes[i]=n:nodes.splice(i,1)}return nodes.length>0?this:void 0}optimizeNames(names,constants){const{nodes:nodes}=this;let i=nodes.length;for(;i--;){const n=nodes[i];n.optimizeNames(names,constants)||(subtractNames(names,n.names),nodes.splice(i,1))}return nodes.length>0?this:void 0}get names(){return this.nodes.reduce(((names,n)=>addNames(names,n.names)),{})}}class BlockNode extends ParentNode{render(opts){return"{"+opts._n+super.render(opts)+"}"+opts._n}}class Root extends ParentNode{}class Else extends BlockNode{}Else.kind="else";class If extends BlockNode{constructor(condition,nodes){super(nodes),this.condition=condition}render(opts){let code=`if(${this.condition})`+super.render(opts);return this.else&&(code+="else "+this.else.render(opts)),code}optimizeNodes(){super.optimizeNodes();const cond=this.condition;if(!0===cond)return this.nodes;let e=this.else;if(e){const ns=e.optimizeNodes();e=this.else=Array.isArray(ns)?new Else(ns):ns}return e?!1===cond?e instanceof If?e:e.nodes:this.nodes.length?this:new If(not(cond),e instanceof If?[e]:e.nodes):!1!==cond&&this.nodes.length?this:void 0}optimizeNames(names,constants){var _a;if(this.else=null===(_a=this.else)||void 0===_a?void 0:_a.optimizeNames(names,constants),super.optimizeNames(names,constants)||this.else)return this.condition=optimizeExpr(this.condition,names,constants),this}get names(){const names=super.names;return addExprNames(names,this.condition),this.else&&addNames(names,this.else.names),names}}If.kind="if";class For extends BlockNode{}For.kind="for";class ForLoop extends For{constructor(iteration){super(),this.iteration=iteration}render(opts){return`for(${this.iteration})`+super.render(opts)}optimizeNames(names,constants){if(super.optimizeNames(names,constants))return this.iteration=optimizeExpr(this.iteration,names,constants),this}get names(){return addNames(super.names,this.iteration.names)}}class ForRange extends For{constructor(varKind,name,from,to){super(),this.varKind=varKind,this.name=name,this.from=from,this.to=to}render(opts){const varKind=opts.es5?scope_1.varKinds.var:this.varKind,{name:name,from:from,to:to}=this;return`for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)`+super.render(opts)}get names(){const names=addExprNames(super.names,this.from);return addExprNames(names,this.to)}}class ForIter extends For{constructor(loop,varKind,name,iterable){super(),this.loop=loop,this.varKind=varKind,this.name=name,this.iterable=iterable}render(opts){return`for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})`+super.render(opts)}optimizeNames(names,constants){if(super.optimizeNames(names,constants))return this.iterable=optimizeExpr(this.iterable,names,constants),this}get names(){return addNames(super.names,this.iterable.names)}}class Func extends BlockNode{constructor(name,args,async){super(),this.name=name,this.args=args,this.async=async}render(opts){return`${this.async?"async ":""}function ${this.name}(${this.args})`+super.render(opts)}}Func.kind="func";class Return extends ParentNode{render(opts){return"return "+super.render(opts)}}Return.kind="return";class Try extends BlockNode{render(opts){let code="try"+super.render(opts);return this.catch&&(code+=this.catch.render(opts)),this.finally&&(code+=this.finally.render(opts)),code}optimizeNodes(){var _a,_b;return super.optimizeNodes(),null===(_a=this.catch)||void 0===_a||_a.optimizeNodes(),null===(_b=this.finally)||void 0===_b||_b.optimizeNodes(),this}optimizeNames(names,constants){var _a,_b;return super.optimizeNames(names,constants),null===(_a=this.catch)||void 0===_a||_a.optimizeNames(names,constants),null===(_b=this.finally)||void 0===_b||_b.optimizeNames(names,constants),this}get names(){const names=super.names;return this.catch&&addNames(names,this.catch.names),this.finally&&addNames(names,this.finally.names),names}}class Catch extends BlockNode{constructor(error){super(),this.error=error}render(opts){return`catch(${this.error})`+super.render(opts)}}Catch.kind="catch";class Finally extends BlockNode{render(opts){return"finally"+super.render(opts)}}Finally.kind="finally";class CodeGen{constructor(extScope,opts={}){this._values={},this._blockStarts=[],this._constants={},this.opts={...opts,_n:opts.lines?"\n":""},this._extScope=extScope,this._scope=new scope_1.Scope({parent:extScope}),this._nodes=[new Root]}toString(){return this._root.render(this.opts)}name(prefix){return this._scope.name(prefix)}scopeName(prefix){return this._extScope.name(prefix)}scopeValue(prefixOrName,value){const name=this._extScope.value(prefixOrName,value);return(this._values[name.prefix]||(this._values[name.prefix]=new Set)).add(name),name}getScopeValue(prefix,keyOrRef){return this._extScope.getValue(prefix,keyOrRef)}scopeRefs(scopeName){return this._extScope.scopeRefs(scopeName,this._values)}scopeCode(){return this._extScope.scopeCode(this._values)}_def(varKind,nameOrPrefix,rhs,constant){const name=this._scope.toName(nameOrPrefix);return void 0!==rhs&&constant&&(this._constants[name.str]=rhs),this._leafNode(new Def(varKind,name,rhs)),name}const(nameOrPrefix,rhs,_constant){return this._def(scope_1.varKinds.const,nameOrPrefix,rhs,_constant)}let(nameOrPrefix,rhs,_constant){return this._def(scope_1.varKinds.let,nameOrPrefix,rhs,_constant)}var(nameOrPrefix,rhs,_constant){return this._def(scope_1.varKinds.var,nameOrPrefix,rhs,_constant)}assign(lhs,rhs,sideEffects){return this._leafNode(new Assign(lhs,rhs,sideEffects))}add(lhs,rhs){return this._leafNode(new AssignOp(lhs,exports.operators.ADD,rhs))}code(c){return"function"==typeof c?c():c!==code_1.nil&&this._leafNode(new AnyCode(c)),this}object(...keyValues){const code=["{"];for(const[key,value]of keyValues)code.length>1&&code.push(","),code.push(key),(key!==value||this.opts.es5)&&(code.push(":"),(0,code_1.addCodeArg)(code,value));return code.push("}"),new code_1._Code(code)}if(condition,thenBody,elseBody){if(this._blockNode(new If(condition)),thenBody&&elseBody)this.code(thenBody).else().code(elseBody).endIf();else if(thenBody)this.code(thenBody).endIf();else if(elseBody)throw new Error('CodeGen: "else" body without "then" body');return this}elseIf(condition){return this._elseNode(new If(condition))}else(){return this._elseNode(new Else)}endIf(){return this._endBlockNode(If,Else)}_for(node,forBody){return this._blockNode(node),forBody&&this.code(forBody).endFor(),this}for(iteration,forBody){return this._for(new ForLoop(iteration),forBody)}forRange(nameOrPrefix,from,to,forBody,varKind=(this.opts.es5?scope_1.varKinds.var:scope_1.varKinds.let)){const name=this._scope.toName(nameOrPrefix);return this._for(new ForRange(varKind,name,from,to),(()=>forBody(name)))}forOf(nameOrPrefix,iterable,forBody,varKind=scope_1.varKinds.const){const name=this._scope.toName(nameOrPrefix);if(this.opts.es5){const arr=iterable instanceof code_1.Name?iterable:this.var("_arr",iterable);return this.forRange("_i",0,code_1._`${arr}.length`,(i=>{this.var(name,code_1._`${arr}[${i}]`),forBody(name)}))}return this._for(new ForIter("of",varKind,name,iterable),(()=>forBody(name)))}forIn(nameOrPrefix,obj,forBody,varKind=(this.opts.es5?scope_1.varKinds.var:scope_1.varKinds.const)){if(this.opts.ownProperties)return this.forOf(nameOrPrefix,code_1._`Object.keys(${obj})`,forBody);const name=this._scope.toName(nameOrPrefix);return this._for(new ForIter("in",varKind,name,obj),(()=>forBody(name)))}endFor(){return this._endBlockNode(For)}label(label){return this._leafNode(new Label(label))}break(label){return this._leafNode(new Break(label))}return(value){const node=new Return;if(this._blockNode(node),this.code(value),1!==node.nodes.length)throw new Error('CodeGen: "return" should have one node');return this._endBlockNode(Return)}try(tryBody,catchCode,finallyCode){if(!catchCode&&!finallyCode)throw new Error('CodeGen: "try" without "catch" and "finally"');const node=new Try;if(this._blockNode(node),this.code(tryBody),catchCode){const error=this.name("e");this._currNode=node.catch=new Catch(error),catchCode(error)}return finallyCode&&(this._currNode=node.finally=new Finally,this.code(finallyCode)),this._endBlockNode(Catch,Finally)}throw(error){return this._leafNode(new Throw(error))}block(body,nodeCount){return this._blockStarts.push(this._nodes.length),body&&this.code(body).endBlock(nodeCount),this}endBlock(nodeCount){const len=this._blockStarts.pop();if(void 0===len)throw new Error("CodeGen: not in self-balancing block");const toClose=this._nodes.length-len;if(toClose<0||void 0!==nodeCount&&toClose!==nodeCount)throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);return this._nodes.length=len,this}func(name,args=code_1.nil,async,funcBody){return this._blockNode(new Func(name,args,async)),funcBody&&this.code(funcBody).endFunc(),this}endFunc(){return this._endBlockNode(Func)}optimize(n=1){for(;n-- >0;)this._root.optimizeNodes(),this._root.optimizeNames(this._root.names,this._constants)}_leafNode(node){return this._currNode.nodes.push(node),this}_blockNode(node){this._currNode.nodes.push(node),this._nodes.push(node)}_endBlockNode(N1,N2){const n=this._currNode;if(n instanceof N1||N2&&n instanceof N2)return this._nodes.pop(),this;throw new Error(`CodeGen: not in block "${N2?`${N1.kind}/${N2.kind}`:N1.kind}"`)}_elseNode(node){const n=this._currNode;if(!(n instanceof If))throw new Error('CodeGen: "else" without "if"');return this._currNode=n.else=node,this}get _root(){return this._nodes[0]}get _currNode(){const ns=this._nodes;return ns[ns.length-1]}set _currNode(node){const ns=this._nodes;ns[ns.length-1]=node}}function addNames(names,from){for(const n in from)names[n]=(names[n]||0)+(from[n]||0);return names}function addExprNames(names,from){return from instanceof code_1._CodeOrName?addNames(names,from.names):names}function optimizeExpr(expr,names,constants){return expr instanceof code_1.Name?replaceName(expr):(e=expr)instanceof code_1._Code&&e._items.some((c=>c instanceof code_1.Name&&1===names[c.str]&&void 0!==constants[c.str]))?new code_1._Code(expr._items.reduce(((items,c)=>(c instanceof code_1.Name&&(c=replaceName(c)),c instanceof code_1._Code?items.push(...c._items):items.push(c),items)),[])):expr;var e;function replaceName(n){const c=constants[n.str];return void 0===c||1!==names[n.str]?n:(delete names[n.str],c)}}function subtractNames(names,from){for(const n in from)names[n]=(names[n]||0)-(from[n]||0)}function not(x){return"boolean"==typeof x||"number"==typeof x||null===x?!x:code_1._`!${par(x)}`}exports.CodeGen=CodeGen,exports.not=not;const andCode=mappend(exports.operators.AND);function and(...args){return args.reduce(andCode)}exports.and=and;const orCode=mappend(exports.operators.OR);function or(...args){return args.reduce(orCode)}function mappend(op){return(x,y)=>x===code_1.nil?y:y===code_1.nil?x:code_1._`${par(x)} ${op} ${par(y)}`}function par(x){return x instanceof code_1.Name?x:code_1._`(${x})`}exports.or=or;