"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getData=exports.KeywordCxt=exports.validateFunctionCode=void 0;const boolSchema_1=require("./boolSchema"),dataType_1=require("./dataType"),applicability_1=require("./applicability"),dataType_2=require("./dataType"),defaults_1=require("./defaults"),keyword_1=require("./keyword"),subschema_1=require("./subschema"),codegen_1=require("../codegen"),names_1=require("../names"),resolve_1=require("../resolve"),util_1=require("../util"),errors_1=require("../errors");function validateFunctionCode(it){isSchemaObj(it)&&(checkKeywords(it),schemaCxtHasRules(it))?topSchemaObjCode(it):validateFunction(it,(()=>(0,boolSchema_1.topBoolOrEmptySchema)(it)))}function validateFunction({gen:gen,validateName:validateName,schema:schema,schemaEnv:schemaEnv,opts:opts},body){opts.code.es5?gen.func(validateName,codegen_1._`${names_1.default.data}, ${names_1.default.valCxt}`,schemaEnv.$async,(()=>{gen.code(codegen_1._`"use strict"; ${funcSourceUrl(schema,opts)}`),destructureValCxtES5(gen,opts),gen.code(body)})):gen.func(validateName,codegen_1._`${names_1.default.data}, ${destructureValCxt(opts)}`,schemaEnv.$async,(()=>gen.code(funcSourceUrl(schema,opts)).code(body)))}function destructureValCxt(opts){return codegen_1._`{${names_1.default.instancePath}="", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef?codegen_1._`, ${names_1.default.dynamicAnchors}={}`:codegen_1.nil}}={}`}function destructureValCxtES5(gen,opts){gen.if(names_1.default.valCxt,(()=>{gen.var(names_1.default.instancePath,codegen_1._`${names_1.default.valCxt}.${names_1.default.instancePath}`),gen.var(names_1.default.parentData,codegen_1._`${names_1.default.valCxt}.${names_1.default.parentData}`),gen.var(names_1.default.parentDataProperty,codegen_1._`${names_1.default.valCxt}.${names_1.default.parentDataProperty}`),gen.var(names_1.default.rootData,codegen_1._`${names_1.default.valCxt}.${names_1.default.rootData}`),opts.dynamicRef&&gen.var(names_1.default.dynamicAnchors,codegen_1._`${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`)}),(()=>{gen.var(names_1.default.instancePath,codegen_1._`""`),gen.var(names_1.default.parentData,codegen_1._`undefined`),gen.var(names_1.default.parentDataProperty,codegen_1._`undefined`),gen.var(names_1.default.rootData,names_1.default.data),opts.dynamicRef&&gen.var(names_1.default.dynamicAnchors,codegen_1._`{}`)}))}function topSchemaObjCode(it){const{schema:schema,opts:opts,gen:gen}=it;validateFunction(it,(()=>{opts.$comment&&schema.$comment&&commentKeyword(it),checkNoDefault(it),gen.let(names_1.default.vErrors,null),gen.let(names_1.default.errors,0),opts.unevaluated&&resetEvaluated(it),typeAndKeywords(it),returnResults(it)}))}function resetEvaluated(it){const{gen:gen,validateName:validateName}=it;it.evaluated=gen.const("evaluated",codegen_1._`${validateName}.evaluated`),gen.if(codegen_1._`${it.evaluated}.dynamicProps`,(()=>gen.assign(codegen_1._`${it.evaluated}.props`,codegen_1._`undefined`))),gen.if(codegen_1._`${it.evaluated}.dynamicItems`,(()=>gen.assign(codegen_1._`${it.evaluated}.items`,codegen_1._`undefined`)))}function funcSourceUrl(schema,opts){const schId="object"==typeof schema&&schema[opts.schemaId];return schId&&(opts.code.source||opts.code.process)?codegen_1._`/*# sourceURL=${schId} */`:codegen_1.nil}function subschemaCode(it,valid){isSchemaObj(it)&&(checkKeywords(it),schemaCxtHasRules(it))?subSchemaObjCode(it,valid):(0,boolSchema_1.boolOrEmptySchema)(it,valid)}function schemaCxtHasRules({schema:schema,self:self}){if("boolean"==typeof schema)return!schema;for(const key in schema)if(self.RULES.all[key])return!0;return!1}function isSchemaObj(it){return"boolean"!=typeof it.schema}function subSchemaObjCode(it,valid){const{schema:schema,gen:gen,opts:opts}=it;opts.$comment&&schema.$comment&&commentKeyword(it),updateContext(it),checkAsyncSchema(it);const errsCount=gen.const("_errs",names_1.default.errors);typeAndKeywords(it,errsCount),gen.var(valid,codegen_1._`${errsCount} === ${names_1.default.errors}`)}function checkKeywords(it){(0,util_1.checkUnknownRules)(it),checkRefsAndKeywords(it)}function typeAndKeywords(it,errsCount){if(it.opts.jtd)return schemaKeywords(it,[],!1,errsCount);const types=(0,dataType_1.getSchemaTypes)(it.schema);schemaKeywords(it,types,!(0,dataType_1.coerceAndCheckDataType)(it,types),errsCount)}function checkRefsAndKeywords(it){const{schema:schema,errSchemaPath:errSchemaPath,opts:opts,self:self}=it;schema.$ref&&opts.ignoreKeywordsWithRef&&(0,util_1.schemaHasRulesButRef)(schema,self.RULES)&&self.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`)}function checkNoDefault(it){const{schema:schema,opts:opts}=it;void 0!==schema.default&&opts.useDefaults&&opts.strictSchema&&(0,util_1.checkStrictMode)(it,"default is ignored in the schema root")}function updateContext(it){const schId=it.schema[it.opts.schemaId];schId&&(it.baseId=(0,resolve_1.resolveUrl)(it.opts.uriResolver,it.baseId,schId))}function checkAsyncSchema(it){if(it.schema.$async&&!it.schemaEnv.$async)throw new Error("async schema in sync schema")}function commentKeyword({gen:gen,schemaEnv:schemaEnv,schema:schema,errSchemaPath:errSchemaPath,opts:opts}){const msg=schema.$comment;if(!0===opts.$comment)gen.code(codegen_1._`${names_1.default.self}.logger.log(${msg})`);else if("function"==typeof opts.$comment){const schemaPath=codegen_1.str`${errSchemaPath}/$comment`,rootName=gen.scopeValue("root",{ref:schemaEnv.root});gen.code(codegen_1._`${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`)}}function returnResults(it){const{gen:gen,schemaEnv:schemaEnv,validateName:validateName,ValidationError:ValidationError,opts:opts}=it;schemaEnv.$async?gen.if(codegen_1._`${names_1.default.errors} === 0`,(()=>gen.return(names_1.default.data)),(()=>gen.throw(codegen_1._`new ${ValidationError}(${names_1.default.vErrors})`))):(gen.assign(codegen_1._`${validateName}.errors`,names_1.default.vErrors),opts.unevaluated&&assignEvaluated(it),gen.return(codegen_1._`${names_1.default.errors} === 0`))}function assignEvaluated({gen:gen,evaluated:evaluated,props:props,items:items}){props instanceof codegen_1.Name&&gen.assign(codegen_1._`${evaluated}.props`,props),items instanceof codegen_1.Name&&gen.assign(codegen_1._`${evaluated}.items`,items)}function schemaKeywords(it,types,typeErrors,errsCount){const{gen:gen,schema:schema,data:data,allErrors:allErrors,opts:opts,self:self}=it,{RULES:RULES}=self;function groupKeywords(group){(0,applicability_1.shouldUseGroup)(schema,group)&&(group.type?(gen.if((0,dataType_2.checkDataType)(group.type,data,opts.strictNumbers)),iterateKeywords(it,group),1===types.length&&types[0]===group.type&&typeErrors&&(gen.else(),(0,dataType_2.reportTypeError)(it)),gen.endIf()):iterateKeywords(it,group),allErrors||gen.if(codegen_1._`${names_1.default.errors} === ${errsCount||0}`))}!schema.$ref||!opts.ignoreKeywordsWithRef&&(0,util_1.schemaHasRulesButRef)(schema,RULES)?(opts.jtd||checkStrictTypes(it,types),gen.block((()=>{for(const group of RULES.rules)groupKeywords(group);groupKeywords(RULES.post)}))):gen.block((()=>keywordCode(it,"$ref",RULES.all.$ref.definition)))}function iterateKeywords(it,group){const{gen:gen,schema:schema,opts:{useDefaults:useDefaults}}=it;useDefaults&&(0,defaults_1.assignDefaults)(it,group.type),gen.block((()=>{for(const rule of group.rules)(0,applicability_1.shouldUseRule)(schema,rule)&&keywordCode(it,rule.keyword,rule.definition,group.type)}))}function checkStrictTypes(it,types){!it.schemaEnv.meta&&it.opts.strictTypes&&(checkContextTypes(it,types),it.opts.allowUnionTypes||checkMultipleTypes(it,types),checkKeywordTypes(it,it.dataTypes))}function checkContextTypes(it,types){types.length&&(it.dataTypes.length?(types.forEach((t=>{includesType(it.dataTypes,t)||strictTypesError(it,`type "${t}" not allowed by context "${it.dataTypes.join(",")}"`)})),it.dataTypes=it.dataTypes.filter((t=>includesType(types,t)))):it.dataTypes=types)}function checkMultipleTypes(it,ts){ts.length>1&&(2!==ts.length||!ts.includes("null"))&&strictTypesError(it,"use allowUnionTypes to allow union type keyword")}function checkKeywordTypes(it,ts){const rules=it.self.RULES.all;for(const keyword in rules){const rule=rules[keyword];if("object"==typeof rule&&(0,applicability_1.shouldUseRule)(it.schema,rule)){const{type:type}=rule.definition;type.length&&!type.some((t=>hasApplicableType(ts,t)))&&strictTypesError(it,`missing type "${type.join(",")}" for keyword "${keyword}"`)}}}function hasApplicableType(schTs,kwdT){return schTs.includes(kwdT)||"number"===kwdT&&schTs.includes("integer")}function includesType(ts,t){return ts.includes(t)||"integer"===t&&ts.includes("number")}function strictTypesError(it,msg){msg+=` at "${it.schemaEnv.baseId+it.errSchemaPath}" (strictTypes)`,(0,util_1.checkStrictMode)(it,msg,it.opts.strictTypes)}exports.validateFunctionCode=validateFunctionCode;class KeywordCxt{constructor(it,def,keyword){if((0,keyword_1.validateKeywordUsage)(it,def,keyword),this.gen=it.gen,this.allErrors=it.allErrors,this.keyword=keyword,this.data=it.data,this.schema=it.schema[keyword],this.$data=def.$data&&it.opts.$data&&this.schema&&this.schema.$data,this.schemaValue=(0,util_1.schemaRefOrVal)(it,this.schema,keyword,this.$data),this.schemaType=def.schemaType,this.parentSchema=it.schema,this.params={},this.it=it,this.def=def,this.$data)this.schemaCode=it.gen.const("vSchema",getData(this.$data,it));else if(this.schemaCode=this.schemaValue,!(0,keyword_1.validSchemaType)(this.schema,def.schemaType,def.allowUndefined))throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);("code"in def?def.trackErrors:!1!==def.errors)&&(this.errsCount=it.gen.const("_errs",names_1.default.errors))}result(condition,successAction,failAction){this.failResult((0,codegen_1.not)(condition),successAction,failAction)}failResult(condition,successAction,failAction){this.gen.if(condition),failAction?failAction():this.error(),successAction?(this.gen.else(),successAction(),this.allErrors&&this.gen.endIf()):this.allErrors?this.gen.endIf():this.gen.else()}pass(condition,failAction){this.failResult((0,codegen_1.not)(condition),void 0,failAction)}fail(condition){if(void 0===condition)return this.error(),void(this.allErrors||this.gen.if(!1));this.gen.if(condition),this.error(),this.allErrors?this.gen.endIf():this.gen.else()}fail$data(condition){if(!this.$data)return this.fail(condition);const{schemaCode:schemaCode}=this;this.fail(codegen_1._`${schemaCode} !== undefined && (${(0,codegen_1.or)(this.invalid$data(),condition)})`)}error(append,errorParams,errorPaths){if(errorParams)return this.setParams(errorParams),this._error(append,errorPaths),void this.setParams({});this._error(append,errorPaths)}_error(append,errorPaths){(append?errors_1.reportExtraError:errors_1.reportError)(this,this.def.error,errorPaths)}$dataError(){(0,errors_1.reportError)(this,this.def.$dataError||errors_1.keyword$DataError)}reset(){if(void 0===this.errsCount)throw new Error('add "trackErrors" to keyword definition');(0,errors_1.resetErrorsCount)(this.gen,this.errsCount)}ok(cond){this.allErrors||this.gen.if(cond)}setParams(obj,assign){assign?Object.assign(this.params,obj):this.params=obj}block$data(valid,codeBlock,$dataValid=codegen_1.nil){this.gen.block((()=>{this.check$data(valid,$dataValid),codeBlock()}))}check$data(valid=codegen_1.nil,$dataValid=codegen_1.nil){if(!this.$data)return;const{gen:gen,schemaCode:schemaCode,schemaType:schemaType,def:def}=this;gen.if((0,codegen_1.or)(codegen_1._`${schemaCode} === undefined`,$dataValid)),valid!==codegen_1.nil&&gen.assign(valid,!0),(schemaType.length||def.validateSchema)&&(gen.elseIf(this.invalid$data()),this.$dataError(),valid!==codegen_1.nil&&gen.assign(valid,!1)),gen.else()}invalid$data(){const{gen:gen,schemaCode:schemaCode,schemaType:schemaType,def:def,it:it}=this;return(0,codegen_1.or)(function(){if(schemaType.length){if(!(schemaCode instanceof codegen_1.Name))throw new Error("ajv implementation error");const st=Array.isArray(schemaType)?schemaType:[schemaType];return codegen_1._`${(0,dataType_2.checkDataTypes)(st,schemaCode,it.opts.strictNumbers,dataType_2.DataType.Wrong)}`}return codegen_1.nil}(),function(){if(def.validateSchema){const validateSchemaRef=gen.scopeValue("validate$data",{ref:def.validateSchema});return codegen_1._`!${validateSchemaRef}(${schemaCode})`}return codegen_1.nil}())}subschema(appl,valid){const subschema=(0,subschema_1.getSubschema)(this.it,appl);(0,subschema_1.extendSubschemaData)(subschema,this.it,appl),(0,subschema_1.extendSubschemaMode)(subschema,appl);const nextContext={...this.it,...subschema,items:void 0,props:void 0};return subschemaCode(nextContext,valid),nextContext}mergeEvaluated(schemaCxt,toName){const{it:it,gen:gen}=this;it.opts.unevaluated&&(!0!==it.props&&void 0!==schemaCxt.props&&(it.props=util_1.mergeEvaluated.props(gen,schemaCxt.props,it.props,toName)),!0!==it.items&&void 0!==schemaCxt.items&&(it.items=util_1.mergeEvaluated.items(gen,schemaCxt.items,it.items,toName)))}mergeValidEvaluated(schemaCxt,valid){const{it:it,gen:gen}=this;if(it.opts.unevaluated&&(!0!==it.props||!0!==it.items))return gen.if(valid,(()=>this.mergeEvaluated(schemaCxt,codegen_1.Name))),!0}}function keywordCode(it,keyword,def,ruleType){const cxt=new KeywordCxt(it,def,keyword);"code"in def?def.code(cxt,ruleType):cxt.$data&&def.validate?(0,keyword_1.funcKeywordCode)(cxt,def):"macro"in def?(0,keyword_1.macroKeywordCode)(cxt,def):(def.compile||def.validate)&&(0,keyword_1.funcKeywordCode)(cxt,def)}exports.KeywordCxt=KeywordCxt;const JSON_POINTER=/^\/(?:[^~]|~0|~1)*$/,RELATIVE_JSON_POINTER=/^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;function getData($data,{dataLevel:dataLevel,dataNames:dataNames,dataPathArr:dataPathArr}){let jsonPointer,data;if(""===$data)return names_1.default.rootData;if("/"===$data[0]){if(!JSON_POINTER.test($data))throw new Error(`Invalid JSON-pointer: ${$data}`);jsonPointer=$data,data=names_1.default.rootData}else{const matches=RELATIVE_JSON_POINTER.exec($data);if(!matches)throw new Error(`Invalid JSON-pointer: ${$data}`);const up=+matches[1];if(jsonPointer=matches[2],"#"===jsonPointer){if(up>=dataLevel)throw new Error(errorMsg("property/index",up));return dataPathArr[dataLevel-up]}if(up>dataLevel)throw new Error(errorMsg("data",up));if(data=dataNames[dataLevel-up],!jsonPointer)return data}let expr=data;const segments=jsonPointer.split("/");for(const segment of segments)segment&&(data=codegen_1._`${data}${(0,codegen_1.getProperty)((0,util_1.unescapeJsonPointer)(segment))}`,expr=codegen_1._`${expr} && ${data}`);return expr;function errorMsg(pointerType,up){return`Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`}}exports.getData=getData;