"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.reportTypeError=exports.checkDataTypes=exports.checkDataType=exports.coerceAndCheckDataType=exports.getJSONTypes=exports.getSchemaTypes=exports.DataType=void 0;const rules_1=require("../rules"),applicability_1=require("./applicability"),errors_1=require("../errors"),codegen_1=require("../codegen"),util_1=require("../util");var DataType;function getSchemaTypes(schema){const types=getJSONTypes(schema.type);if(types.includes("null")){if(!1===schema.nullable)throw new Error("type: null contradicts nullable: false")}else{if(!types.length&&void 0!==schema.nullable)throw new Error('"nullable" cannot be used without "type"');!0===schema.nullable&&types.push("null")}return types}function getJSONTypes(ts){const types=Array.isArray(ts)?ts:ts?[ts]:[];if(types.every(rules_1.isJSONType))return types;throw new Error("type must be JSONType or JSONType[]: "+types.join(","))}function coerceAndCheckDataType(it,types){const{gen:gen,data:data,opts:opts}=it,coerceTo=coerceToTypes(types,opts.coerceTypes),checkTypes=types.length>0&&!(0===coerceTo.length&&1===types.length&&(0,applicability_1.schemaHasRulesForType)(it,types[0]));if(checkTypes){const wrongType=checkDataTypes(types,data,opts.strictNumbers,DataType.Wrong);gen.if(wrongType,(()=>{coerceTo.length?coerceData(it,types,coerceTo):reportTypeError(it)}))}return checkTypes}!function(DataType){DataType[DataType.Correct=0]="Correct",DataType[DataType.Wrong=1]="Wrong"}(DataType=exports.DataType||(exports.DataType={})),exports.getSchemaTypes=getSchemaTypes,exports.getJSONTypes=getJSONTypes,exports.coerceAndCheckDataType=coerceAndCheckDataType;const COERCIBLE=new Set(["string","number","integer","boolean","null"]);function coerceToTypes(types,coerceTypes){return coerceTypes?types.filter((t=>COERCIBLE.has(t)||"array"===coerceTypes&&"array"===t)):[]}function coerceData(it,types,coerceTo){const{gen:gen,data:data,opts:opts}=it,dataType=gen.let("dataType",codegen_1._`typeof ${data}`),coerced=gen.let("coerced",codegen_1._`undefined`);"array"===opts.coerceTypes&&gen.if(codegen_1._`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`,(()=>gen.assign(data,codegen_1._`${data}[0]`).assign(dataType,codegen_1._`typeof ${data}`).if(checkDataTypes(types,data,opts.strictNumbers),(()=>gen.assign(coerced,data))))),gen.if(codegen_1._`${coerced} !== undefined`);for(const t of coerceTo)(COERCIBLE.has(t)||"array"===t&&"array"===opts.coerceTypes)&&coerceSpecificType(t);function coerceSpecificType(t){switch(t){case"string":return void gen.elseIf(codegen_1._`${dataType} == "number" || ${dataType} == "boolean"`).assign(coerced,codegen_1._`"" + ${data}`).elseIf(codegen_1._`${data} === null`).assign(coerced,codegen_1._`""`);case"number":return void gen.elseIf(codegen_1._`${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`).assign(coerced,codegen_1._`+${data}`);case"integer":return void gen.elseIf(codegen_1._`${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`).assign(coerced,codegen_1._`+${data}`);case"boolean":return void gen.elseIf(codegen_1._`${data} === "false" || ${data} === 0 || ${data} === null`).assign(coerced,!1).elseIf(codegen_1._`${data} === "true" || ${data} === 1`).assign(coerced,!0);case"null":return gen.elseIf(codegen_1._`${data} === "" || ${data} === 0 || ${data} === false`),void gen.assign(coerced,null);case"array":gen.elseIf(codegen_1._`${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`).assign(coerced,codegen_1._`[${data}]`)}}gen.else(),reportTypeError(it),gen.endIf(),gen.if(codegen_1._`${coerced} !== undefined`,(()=>{gen.assign(data,coerced),assignParentData(it,coerced)}))}function assignParentData({gen:gen,parentData:parentData,parentDataProperty:parentDataProperty},expr){gen.if(codegen_1._`${parentData} !== undefined`,(()=>gen.assign(codegen_1._`${parentData}[${parentDataProperty}]`,expr)))}function checkDataType(dataType,data,strictNums,correct=DataType.Correct){const EQ=correct===DataType.Correct?codegen_1.operators.EQ:codegen_1.operators.NEQ;let cond;switch(dataType){case"null":return codegen_1._`${data} ${EQ} null`;case"array":cond=codegen_1._`Array.isArray(${data})`;break;case"object":cond=codegen_1._`${data} && typeof ${data} == "object" && !Array.isArray(${data})`;break;case"integer":cond=numCond(codegen_1._`!(${data} % 1) && !isNaN(${data})`);break;case"number":cond=numCond();break;default:return codegen_1._`typeof ${data} ${EQ} ${dataType}`}return correct===DataType.Correct?cond:(0,codegen_1.not)(cond);function numCond(_cond=codegen_1.nil){return(0,codegen_1.and)(codegen_1._`typeof ${data} == "number"`,_cond,strictNums?codegen_1._`isFinite(${data})`:codegen_1.nil)}}function checkDataTypes(dataTypes,data,strictNums,correct){if(1===dataTypes.length)return checkDataType(dataTypes[0],data,strictNums,correct);let cond;const types=(0,util_1.toHash)(dataTypes);if(types.array&&types.object){const notObj=codegen_1._`typeof ${data} != "object"`;cond=types.null?notObj:codegen_1._`!${data} || ${notObj}`,delete types.null,delete types.array,delete types.object}else cond=codegen_1.nil;types.number&&delete types.integer;for(const t in types)cond=(0,codegen_1.and)(cond,checkDataType(t,data,strictNums,correct));return cond}exports.checkDataType=checkDataType,exports.checkDataTypes=checkDataTypes;const typeError={message:({schema:schema})=>`must be ${schema}`,params:({schema:schema,schemaValue:schemaValue})=>"string"==typeof schema?codegen_1._`{type: ${schema}}`:codegen_1._`{type: ${schemaValue}}`};function reportTypeError(it){const cxt=getTypeErrorContext(it);(0,errors_1.reportError)(cxt,typeError)}function getTypeErrorContext(it){const{gen:gen,data:data,schema:schema}=it,schemaCode=(0,util_1.schemaRefOrVal)(it,schema,"type");return{gen:gen,keyword:"type",data:data,schema:schema.type,schemaCode:schemaCode,schemaValue:schemaCode,parentSchema:schema,params:{},it:it}}exports.reportTypeError=reportTypeError;