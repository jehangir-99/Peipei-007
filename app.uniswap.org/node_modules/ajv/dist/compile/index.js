"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.resolveSchema=exports.getCompilingSchema=exports.resolveRef=exports.compileSchema=exports.SchemaEnv=void 0;const codegen_1=require("./codegen"),validation_error_1=require("../runtime/validation_error"),names_1=require("./names"),resolve_1=require("./resolve"),util_1=require("./util"),validate_1=require("./validate");class SchemaEnv{constructor(env){var _a;let schema;this.refs={},this.dynamicAnchors={},"object"==typeof env.schema&&(schema=env.schema),this.schema=env.schema,this.schemaId=env.schemaId,this.root=env.root||this,this.baseId=null!==(_a=env.baseId)&&void 0!==_a?_a:(0,resolve_1.normalizeId)(null==schema?void 0:schema[env.schemaId||"$id"]),this.schemaPath=env.schemaPath,this.localRefs=env.localRefs,this.meta=env.meta,this.$async=null==schema?void 0:schema.$async,this.refs={}}}function compileSchema(sch){const _sch=getCompilingSchema.call(this,sch);if(_sch)return _sch;const rootId=(0,resolve_1.getFullPath)(this.opts.uriResolver,sch.root.baseId),{es5:es5,lines:lines}=this.opts.code,{ownProperties:ownProperties}=this.opts,gen=new codegen_1.CodeGen(this.scope,{es5:es5,lines:lines,ownProperties:ownProperties});let _ValidationError;sch.$async&&(_ValidationError=gen.scopeValue("Error",{ref:validation_error_1.default,code:codegen_1._`require("ajv/dist/runtime/validation_error").default`}));const validateName=gen.scopeName("validate");sch.validateName=validateName;const schemaCxt={gen:gen,allErrors:this.opts.allErrors,data:names_1.default.data,parentData:names_1.default.parentData,parentDataProperty:names_1.default.parentDataProperty,dataNames:[names_1.default.data],dataPathArr:[codegen_1.nil],dataLevel:0,dataTypes:[],definedProperties:new Set,topSchemaRef:gen.scopeValue("schema",!0===this.opts.code.source?{ref:sch.schema,code:(0,codegen_1.stringify)(sch.schema)}:{ref:sch.schema}),validateName:validateName,ValidationError:_ValidationError,schema:sch.schema,schemaEnv:sch,rootId:rootId,baseId:sch.baseId||rootId,schemaPath:codegen_1.nil,errSchemaPath:sch.schemaPath||(this.opts.jtd?"":"#"),errorPath:codegen_1._`""`,opts:this.opts,self:this};let sourceCode;try{this._compilations.add(sch),(0,validate_1.validateFunctionCode)(schemaCxt),gen.optimize(this.opts.code.optimize);const validateCode=gen.toString();sourceCode=`${gen.scopeRefs(names_1.default.scope)}return ${validateCode}`,this.opts.code.process&&(sourceCode=this.opts.code.process(sourceCode,sch));const validate=new Function(`${names_1.default.self}`,`${names_1.default.scope}`,sourceCode)(this,this.scope.get());if(this.scope.value(validateName,{ref:validate}),validate.errors=null,validate.schema=sch.schema,validate.schemaEnv=sch,sch.$async&&(validate.$async=!0),!0===this.opts.code.source&&(validate.source={validateName:validateName,validateCode:validateCode,scopeValues:gen._values}),this.opts.unevaluated){const{props:props,items:items}=schemaCxt;validate.evaluated={props:props instanceof codegen_1.Name?void 0:props,items:items instanceof codegen_1.Name?void 0:items,dynamicProps:props instanceof codegen_1.Name,dynamicItems:items instanceof codegen_1.Name},validate.source&&(validate.source.evaluated=(0,codegen_1.stringify)(validate.evaluated))}return sch.validate=validate,sch}catch(e){throw delete sch.validate,delete sch.validateName,sourceCode&&this.logger.error("Error compiling schema, function code:",sourceCode),e}finally{this._compilations.delete(sch)}}function resolveRef(root,baseId,ref){var _a;ref=(0,resolve_1.resolveUrl)(this.opts.uriResolver,baseId,ref);const schOrFunc=root.refs[ref];if(schOrFunc)return schOrFunc;let _sch=resolve.call(this,root,ref);if(void 0===_sch){const schema=null===(_a=root.localRefs)||void 0===_a?void 0:_a[ref],{schemaId:schemaId}=this.opts;schema&&(_sch=new SchemaEnv({schema:schema,schemaId:schemaId,root:root,baseId:baseId}))}return void 0!==_sch?root.refs[ref]=inlineOrCompile.call(this,_sch):void 0}function inlineOrCompile(sch){return(0,resolve_1.inlineRef)(sch.schema,this.opts.inlineRefs)?sch.schema:sch.validate?sch:compileSchema.call(this,sch)}function getCompilingSchema(schEnv){for(const sch of this._compilations)if(sameSchemaEnv(sch,schEnv))return sch}function sameSchemaEnv(s1,s2){return s1.schema===s2.schema&&s1.root===s2.root&&s1.baseId===s2.baseId}function resolve(root,ref){let sch;for(;"string"==typeof(sch=this.refs[ref]);)ref=sch;return sch||this.schemas[ref]||resolveSchema.call(this,root,ref)}function resolveSchema(root,ref){const p=this.opts.uriResolver.parse(ref),refPath=(0,resolve_1._getFullPath)(this.opts.uriResolver,p);let baseId=(0,resolve_1.getFullPath)(this.opts.uriResolver,root.baseId,void 0);if(Object.keys(root.schema).length>0&&refPath===baseId)return getJsonPointer.call(this,p,root);const id=(0,resolve_1.normalizeId)(refPath),schOrRef=this.refs[id]||this.schemas[id];if("string"==typeof schOrRef){const sch=resolveSchema.call(this,root,schOrRef);if("object"!=typeof(null==sch?void 0:sch.schema))return;return getJsonPointer.call(this,p,sch)}if("object"==typeof(null==schOrRef?void 0:schOrRef.schema)){if(schOrRef.validate||compileSchema.call(this,schOrRef),id===(0,resolve_1.normalizeId)(ref)){const{schema:schema}=schOrRef,{schemaId:schemaId}=this.opts,schId=schema[schemaId];return schId&&(baseId=(0,resolve_1.resolveUrl)(this.opts.uriResolver,baseId,schId)),new SchemaEnv({schema:schema,schemaId:schemaId,root:root,baseId:baseId})}return getJsonPointer.call(this,p,schOrRef)}}exports.SchemaEnv=SchemaEnv,exports.compileSchema=compileSchema,exports.resolveRef=resolveRef,exports.getCompilingSchema=getCompilingSchema,exports.resolveSchema=resolveSchema;const PREVENT_SCOPE_CHANGE=new Set(["properties","patternProperties","enum","dependencies","definitions"]);function getJsonPointer(parsedRef,{baseId:baseId,schema:schema,root:root}){var _a;if("/"!==(null===(_a=parsedRef.fragment)||void 0===_a?void 0:_a[0]))return;for(const part of parsedRef.fragment.slice(1).split("/")){if("boolean"==typeof schema)return;const partSchema=schema[(0,util_1.unescapeFragment)(part)];if(void 0===partSchema)return;const schId="object"==typeof(schema=partSchema)&&schema[this.opts.schemaId];!PREVENT_SCOPE_CHANGE.has(part)&&schId&&(baseId=(0,resolve_1.resolveUrl)(this.opts.uriResolver,baseId,schId))}let env;if("boolean"!=typeof schema&&schema.$ref&&!(0,util_1.schemaHasRulesButRef)(schema,this.RULES)){const $ref=(0,resolve_1.resolveUrl)(this.opts.uriResolver,baseId,schema.$ref);env=resolveSchema.call(this,root,$ref)}const{schemaId:schemaId}=this.opts;return env=env||new SchemaEnv({schema:schema,schemaId:schemaId,root:root,baseId:baseId}),env.schema!==env.root.schema?env:void 0}