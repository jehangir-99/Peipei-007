"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getSchemaRefs=exports.resolveUrl=exports.normalizeId=exports._getFullPath=exports.getFullPath=exports.inlineRef=void 0;const util_1=require("./util"),equal=require("fast-deep-equal"),traverse=require("json-schema-traverse"),SIMPLE_INLINED=new Set(["type","format","pattern","maxLength","minLength","maxProperties","minProperties","maxItems","minItems","maximum","minimum","uniqueItems","multipleOf","required","enum","const"]);function inlineRef(schema,limit=!0){return"boolean"==typeof schema||(!0===limit?!hasRef(schema):!!limit&&countKeys(schema)<=limit)}exports.inlineRef=inlineRef;const REF_KEYWORDS=new Set(["$ref","$recursiveRef","$recursiveAnchor","$dynamicRef","$dynamicAnchor"]);function hasRef(schema){for(const key in schema){if(REF_KEYWORDS.has(key))return!0;const sch=schema[key];if(Array.isArray(sch)&&sch.some(hasRef))return!0;if("object"==typeof sch&&hasRef(sch))return!0}return!1}function countKeys(schema){let count=0;for(const key in schema){if("$ref"===key)return 1/0;if(count++,!SIMPLE_INLINED.has(key)&&("object"==typeof schema[key]&&(0,util_1.eachItem)(schema[key],(sch=>count+=countKeys(sch))),count===1/0))return 1/0}return count}function getFullPath(resolver,id="",normalize){!1!==normalize&&(id=normalizeId(id));const p=resolver.parse(id);return _getFullPath(resolver,p)}function _getFullPath(resolver,p){return resolver.serialize(p).split("#")[0]+"#"}exports.getFullPath=getFullPath,exports._getFullPath=_getFullPath;const TRAILING_SLASH_HASH=/#\/?$/;function normalizeId(id){return id?id.replace(TRAILING_SLASH_HASH,""):""}function resolveUrl(resolver,baseId,id){return id=normalizeId(id),resolver.resolve(baseId,id)}exports.normalizeId=normalizeId,exports.resolveUrl=resolveUrl;const ANCHOR=/^[a-z_][-a-z0-9._]*$/i;function getSchemaRefs(schema,baseId){if("boolean"==typeof schema)return{};const{schemaId:schemaId,uriResolver:uriResolver}=this.opts,schId=normalizeId(schema[schemaId]||baseId),baseIds={"":schId},pathPrefix=getFullPath(uriResolver,schId,!1),localRefs={},schemaRefs=new Set;return traverse(schema,{allKeys:!0},((sch,jsonPtr,_,parentJsonPtr)=>{if(void 0===parentJsonPtr)return;const fullPath=pathPrefix+jsonPtr;let baseId=baseIds[parentJsonPtr];function addRef(ref){const _resolve=this.opts.uriResolver.resolve;if(ref=normalizeId(baseId?_resolve(baseId,ref):ref),schemaRefs.has(ref))throw ambiguos(ref);schemaRefs.add(ref);let schOrRef=this.refs[ref];return"string"==typeof schOrRef&&(schOrRef=this.refs[schOrRef]),"object"==typeof schOrRef?checkAmbiguosRef(sch,schOrRef.schema,ref):ref!==normalizeId(fullPath)&&("#"===ref[0]?(checkAmbiguosRef(sch,localRefs[ref],ref),localRefs[ref]=sch):this.refs[ref]=fullPath),ref}function addAnchor(anchor){if("string"==typeof anchor){if(!ANCHOR.test(anchor))throw new Error(`invalid anchor "${anchor}"`);addRef.call(this,`#${anchor}`)}}"string"==typeof sch[schemaId]&&(baseId=addRef.call(this,sch[schemaId])),addAnchor.call(this,sch.$anchor),addAnchor.call(this,sch.$dynamicAnchor),baseIds[jsonPtr]=baseId})),localRefs;function checkAmbiguosRef(sch1,sch2,ref){if(void 0!==sch2&&!equal(sch1,sch2))throw ambiguos(ref)}function ambiguos(ref){return new Error(`reference "${ref}" resolves to more than one schema`)}}exports.getSchemaRefs=getSchemaRefs;